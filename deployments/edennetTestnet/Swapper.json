{
  "address": "0x8c5f0e4e4a9d6f72322ba9c5fbfc5deb05a15637",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidChainlinkRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSwap",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Paused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooBigAmountIn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooLate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooSmallAmountOut",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "quoteIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "quoteOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "permitData",
          "type": "bytes"
        }
      ],
      "name": "swapExactInputWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "permitData",
          "type": "bytes"
        }
      ],
      "name": "swapExactOutputWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "contractName": "Swapper",
  "sourceName": "contracts/monetizer/facets/Swapper.sol",
  "bytecode": "0x6080604052348015600e575f5ffd5b506148598061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061006f575f3560e01c8063b92567fa1161004d578063b92567fa146100be578063c10a6287146100d1578063d92c6cb2146100e4575f5ffd5b80633b6a1fe0146100735780634583aea6146100985780639525f3ab146100ab575b5f5ffd5b610086610081366004613b34565b6100f7565b60405190815260200160405180910390f35b6100866100a6366004613b97565b61018e565b6100866100b9366004613b97565b610233565b6100866100cc366004613b34565b6102d5565b6100866100df366004613c97565b610360565b6100866100f2366004613c97565b6103d8565b5f5f5f610105878786610450565b915091508161011e5761011986828b610628565b610128565b610128818a610707565b925087831015610164576040517fa1aabbe100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101828984898989878760405180602001604052805f8152506107de565b50509695505050505050565b5f7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7581806101bd868642610450565b915091508115610211576101d18188610707565b600184015490945061020c908290869070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff166110a5565b610229565b61021c858289610628565b935061022985828661113c565b5050509392505050565b5f7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c758180610262868642610450565b9150915081156102b85760018301546102a4908290899070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff166110a5565b6102ae81886112bd565b93505050506102ce565b6102c385828961113c565b6102ae858289611315565b9392505050565b5f5f5f6102e3878786610450565b91509150816102fc576102f786828b611315565b610306565b610306818a6112bd565b925087831115610342576040517fa2b0657400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610182838a898989878760405180602001604052805f8152506107de565b5f5f5f61036d8786611362565b9150915061037b818a6112bd565b9250878311156103b7576040517fa2b0657400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103c5838989888886611468565b9350610182838a89858a6001878b6107de565b5f5f5f6103e58786611362565b915091506103f3818a610707565b92508783101561042f576040517fa1aabbe100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61043d898a89888886611468565b9350610182898489858a6001878b6107de565b5f5f8242111561048c576040517fecdd1c2900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c75805473ffffffffffffffffffffffffffffffffffffffff9081169087168190036105455773ffffffffffffffffffffffffffffffffffffffff86165f9081526005830160205260408120805490945062010000900460ff16900361053d576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f935061061e565b8073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16036105ec5773ffffffffffffffffffffffffffffffffffffffff87165f90815260058301602052604081208054909450610100900460ff1690036105e3576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001935061061e565b6040517f672215de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050935093915050565b5f5f5f6106bf8686600501805461063e90613d50565b80601f016020809104026020016040519081016040528092919081815260200182805461066a90613d50565b80156106b55780601f1061068c576101008083540402835291602001916106b5565b820191905f5260205f20905b81548152906001019060200180831161069857829003601f168201915b50505050506115f7565b915091506106cf85600286611833565b92506106fd816106df8486613dce565b6106e99190613e12565b86546012906301000000900460ff16612245565b9695505050505050565b5f5f61079c84600501805461071b90613d50565b80601f016020809104026020016040519081016040528092919081815260200182805461074790613d50565b80156107925780601f1061076957610100808354040283529160200191610792565b820191905f5260205f20905b81548152906001019060200180831161077557829003601f168201915b50505050506122ae565b90506107c96107ab8483613dce565b85546107c2906301000000900460ff166012613e25565b6012612245565b91506107d6845f84611833565b949350505050565b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c75805460ff7501000000000000000000000000000000000000000000909104167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01610876576040517f37ed32e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16750200000000000000000000000000000000000000000017815588158015906108c257505f88115b1561105d577f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c758415610c96576001818101545f916109409161093b918d916b033b2e3c9fd0803ce8000000917001000000000000000000000000000000009091046fffffffffffffffffffffffffffffffff16906123c7565b612412565b8554909150610988906fffffffffffffffffffffffffffffffff8316906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16613e3e565b85547affffffffffffffffffffffffffffffffffffffffffffffffffffff91909116650100000000000264ffffffffff90911617855560018201546109f79086905f906fffffffffffffffffffffffffffffffff700100000000000000000000000000000000909104166110a5565b6001820154610a199082906fffffffffffffffffffffffffffffffff16613e71565b6001830180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055835115610a8257610a7c6e22d473030f116ddee9f6b43ac78ba385612470565b50610b6c565b845460ff1615610b4a57610b4533610b26876007016001018054610aa590613d50565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad190613d50565b8015610b1c5780601f10610af357610100808354040283529160200191610b1c565b820191905f5260205f20905b815481529060010190602001808311610aff57829003601f168201915b5050505050612486565b73ffffffffffffffffffffffffffffffffffffffff8c1691908e6124ca565b610b6c565b610b6c73ffffffffffffffffffffffffffffffffffffffff8a1633308e6124ca565b845460ff1615610c0d57610c0d8b866007016001018054610b8c90613d50565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb890613d50565b8015610c035780601f10610bda57610100808354040283529160200191610c03565b820191905f5260205f20905b815481529060010190602001808311610be657829003601f168201915b5050505050612559565b6040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602482018c90528916906340c10f19906044015f604051808303815f87803b158015610c7a575f5ffd5b505af1158015610c8c573d5f5f3e3d5ffd5b5050505050610ffb565b8354640100000000900460ff1615801590610d425750610d40846006018054610cbe90613d50565b80601f0160208091040260200160405190810160405280929190818152602001828054610cea90613d50565b8015610d355780601f10610d0c57610100808354040283529160200191610d35565b820191905f5260205f20905b815481529060010190602001808311610d1857829003601f168201915b5050505050876125ff565b155b15610d79576040517f584a793800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018101545f90610dca9070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16610dc06b033b2e3c9fd0803ce80000008e613dce565b61093b9190613e12565b8554909150610e12906fffffffffffffffffffffffffffffffff8316906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16613e99565b85547affffffffffffffffffffffffffffffffffffffffffffffffffffff91909116650100000000000264ffffffffff9091161785556001820154610e6a9082906fffffffffffffffffffffffffffffffff16613ecc565b6001830180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff929092169190911790556040517f2b471d8e000000000000000000000000000000000000000000000000000000008152600481018c905233602482015273ffffffffffffffffffffffffffffffffffffffff8a1690632b471d8e906044015f604051808303815f87803b158015610f18575f5ffd5b505af1158015610f2a573d5f5f3e3d5ffd5b5050865460ff16159150610fd8905057610fd388888c886007016001018054610f5290613d50565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7e90613d50565b8015610fc95780601f10610fa057610100808354040283529160200191610fc9565b820191905f5260205f20905b815481529060010190602001808311610fac57829003601f168201915b50505050506127b7565b610ff9565b610ff973ffffffffffffffffffffffffffffffffffffffff8916888c612886565b505b604080518b8152602081018b905273ffffffffffffffffffffffffffffffffffffffff88811682840152915133928a811692908c16917f73adcdbf2d8fee0c1221daefef436a92c3c640e97ff2941e744bf5eef1ab346f9181900360600190a4505b80547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675010000000000000000000000000000000000000000001790555050505050505050565b600983015483546b033b2e3c9fd0803ce8000000906110eb9084906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16613dce565b6110f59190613e12565b6110ff9084613ef4565b1115611137576040517f1115766700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b815460ff16158015906111e35750806111e183600701600101805461116090613d50565b80601f016020809104026020016040519081016040528092919081815260200182805461118c90613d50565b80156111d75780601f106111ae576101008083540402835291602001916111d7565b820191905f5260205f20905b8154815290600101906020018083116111ba57829003601f168201915b50505050506128c4565b105b806112865750815460ff1615801561128657506040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015611260573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112849190613f07565b105b15611137576040517f1115766700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5f6112d184600501805461071b90613d50565b90506112df84600185611833565b91506107d6816112f7670de0b6b3a764000085613dce565b6113019190613e12565b85546012906301000000900460ff16612245565b5f5f5f61132b8686600501805461063e90613d50565b865491935091506113549061134d9086906301000000900460ff166012612245565b828461296a565b92506106fd85600385611833565b5f5f8242111561139e576040517fecdd1c2900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff83165f9081527f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7a60205260408120805490917f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7591610100900460ff169003611448576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5473ffffffffffffffffffffffffffffffffffffffff1694909350915050565b60408051606081810183525f8083526020830152918101829052825460ff16156114be576114a1836007016001018054610aa590613d50565b73ffffffffffffffffffffffffffffffffffffffff1681526114c2565b3081525b838060200190518101906114d69190613f6b565b60408084019182526020808501938452815160a08101835273ffffffffffffffffffffffffffffffffffffffff808c1660608301908152608083018e905282529451818301528083018a905282518084018452865190951685529084018c9052915190517f30f28b7a000000000000000000000000000000000000000000000000000000009361156e93929091339190602401613fb0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915298975050505050505050565b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c77805460408051602080840282018101909252828152670de0b6b3a7640000935f937f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c759385939291908301828280156116a457602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611679575b505083519394505f925050505b81811015611828575f670de0b6b3a764000090508873ffffffffffffffffffffffffffffffffffffffff168483815181106116ee576116ee614096565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614611804576117fb856005015f86858151811061172b5761172b614096565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600501805461177a90613d50565b80601f01602080910402602001604051908101604052809291908181526020018280546117a690613d50565b80156117f15780601f106117c8576101008083540402835291602001916117f1565b820191905f5260205f20905b8154815290600101906020018083116117d457829003601f168201915b5050505050612a1a565b91506118139050565b61180d88612a1a565b90965090505b8681101561181f578096505b506001016116b1565b505050509250929050565b5f61187e6040518061012001604052805f151581526020015f151581526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b61188784612ba6565b1515815261189484612bdd565b1515602082015280515f906118ad5760038601546118b3565b60018601545b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c76549091505f907f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c75906fffffffffffffffffffffffffffffffff1680158061191b5750836001145b156119895761197d8888875f0151611968578b6004015f8154811061194257611942614096565b905f5260205f2090600491828204019190066008029054906101000a900460070b612c00565b8b6002015f8154811061194257611942614096565b955050505050506102ce565b885481906119c690670de0b6b3a7640000906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16613dce565b6119d09190613e12565b60018301548a5467ffffffffffffffff92909216945070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16906b033b2e3c9fd0803ce800000090611a4c9083906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16613dce565b611a569190613e12565b60e087018190526b033b2e3c9fd0803ce8000000611a748484613dce565b611a7e9190613e12565b611a8891906140c3565b610100870152505083515f91508190611b399080611aa9578a600301611aae565b8a6001015b805480602002602001604051908101604052809291908181526020018280548015611b2957602002820191905f5260205f20905f905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411611ae45790505b5050505050633b9aca0086612c78565b90505b611b476001856140c3565b8110156121f357845115611cad57886001018181548110611b6a57611b6a614096565b5f918252602090912060048204015460039091166008026101000a900467ffffffffffffffff166040860152600189810190611ba7908390613ef4565b81548110611bb757611bb7614096565b5f918252602090912060048204015460039091166008026101000a900467ffffffffffffffff16606086015260028901805482908110611bf957611bf9614096565b5f918252602090912060048204015460039091166008026101000a900460070b608086015260028901611c2d826001613ef4565b81548110611c3d57611c3d614096565b5f918252602090912060048204015460039091166008026101000a900460070b60a086015260e08501516060860151611c7a90633b9aca006140c3565b8660600151876101000151611c8f9190613dce565b611c999190613e12565b611ca391906140c3565b60c0860152611e0d565b886003018181548110611cc257611cc2614096565b5f918252602090912060048204015460039182166008026101000a900467ffffffffffffffff1660408701528901611cfb826001613ef4565b81548110611d0b57611d0b614096565b905f5260205f2090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff16856060018181525050886004018181548110611d5b57611d5b614096565b5f918252602090912060048083049091015460039092166008026101000a90910460070b60808701528901611d91826001613ef4565b81548110611da157611da1614096565b5f918252602090912060048204015460039091166008026101000a900460070b60a08601526060850151611dd990633b9aca006140c3565b8560600151866101000151611dee9190613dce565b611df89190613e12565b8560e00151611e0791906140c3565b60c08601525b5f83633b9aca008760400151611e239190613dce565b03611e3357506080850151611f2a565b8560a00151866080015103611e4d57506080850151611f2a565b85515f90611e9b5760e08701516040880151611e6d90633b9aca006140c3565b8860400151896101000151611e829190613dce565b611e8c9190613e12565b611e9691906140c3565b611edc565b6040870151611eae90633b9aca006140c3565b8760400151886101000151611ec39190613dce565b611ecd9190613e12565b8760e00151611edc91906140c3565b9050808760c00151611eee9190613ef4565b8188608001518960a00151611f0391906140d6565b611f0d9190613dce565b611f179190613e12565b8760800151611f2691906140fc565b9150505b5f8660200151611f91578651611f6857611f638760c001516002848a60a00151611f5491906140fc565b611f5e9190614123565b612e18565b611f97565b611f638760c001516002848a60a00151611f8291906140fc565b611f8c9190614123565b612ec5565b8660c001515b905088811061212b575f876020015115611fe457611fd3838960a00151611fbe91906140d6565b611fc9846002613dce565b8c919060016123c7565b611fdd90846140fc565b9050612107565b5f612020848a60a00151611ff891906140d6565b6120038d6002613dce565b61200d9190613dce565b60c08b0151633b9aca00919060016123c7565b895190915015612081576002633b9aca008561205c848461204184866140fc565b61204b919061425a565b6120559190613ef4565b6001612f5d565b61206691906140fc565b61207091906140d6565b61207a9190614268565b9150612105565b5f600261209286633b9aca006140d6565b61209c919061425a565b9050818110156120c75760026120b6633b9aca00876140fc565b6120c09190614268565b9250612103565b6121006120dd6120d784846140c3565b5f612f5d565b6120eb633b9aca00886140fc565b6120f591906140d6565b6001600260016123c7565b92505b505b505b6121128b8b83612c00565b61211c9086613ef4565b985050505050505050506102ce565b612135818a6140c3565b9850866020015115612180578651612166576121618760c001516002848a60a00151611f5491906140fc565b612186565b6121618760c001516002848a60a00151611f8291906140fc565b8660c001515b6121909085613ef4565b9350633b9aca0087606001516121a69190613dce565b94506121b1836142b0565b87519093506121d3578660c001518760e001516121ce91906140c3565b6121e7565b8660c001518760e001516121e79190613ef4565b60e08801525050611b3c565b61222e8888875f015161221f5760048c0161220f6001896140c3565b8154811061194257611942614096565b60028c0161220f6001896140c3565b6122389083613ef4565b9998505050505050505050565b5f8160ff168360ff16111561227a5761225e82846142c8565b61226990600a61425a565b6122739085613e12565b90506102ce565b8160ff168360ff1610156122a75761229283836142c8565b61229d90600a61425a565b6122739085613dce565b50826102ce565b5f5f5f5f5f5f6122bd87612f8d565b93985091965094509250905060018560098111156122dd576122dd6142e1565b03612372575f838060200190518101906122f7919061430e565b90508073ffffffffffffffffffffffffffffffffffffffff16635ade93556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612342573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123669190613f07565b98975050505050505050565b5f81806020019051810190612387919061434d565b5090505f6123aa87878787866fffffffffffffffffffffffffffffffff16612fba565b9098509050878110156123bb578097505b50505050505050919050565b5f6123f46123d483613057565b80156123ef57505f84806123ea576123ea613de5565b868809115b151590565b6123ff86868661296a565b6124099190613ef4565b95945050505050565b5f6fffffffffffffffffffffffffffffffff82111561246c576040517f6dfcc65000000000000000000000000000000000000000000000000000000000815260806004820152602481018390526044015b60405180910390fd5b5090565b606061247d83835f613083565b90505b92915050565b5f5f5f6124928461313f565b30945090925090505f8280156124aa576124aa6142e1565b036124c357808060200190518101906107d6919061430e565b5050919050565b60405173ffffffffffffffffffffffffffffffffffffffff84811660248301528381166044830152606482018390526125539186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613160565b50505050565b5f5f6125648361313f565b90925090505f828015612579576125796142e1565b036125535780806020019051810190612592919061430e565b73ffffffffffffffffffffffffffffffffffffffff16632afcf480856040518263ffffffff1660e01b81526004016125cc91815260200190565b5f604051808303815f87803b1580156125e3575f5ffd5b505af11580156125f5573d5f5f3e3d5ffd5b5050505050505050565b5f5f5f84806020019051810190612616919061438a565b915091505f6126427f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7590565b6008015f848015612655576126556142e1565b8015612663576126636142e1565b81526020019081526020015f205f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205411156126bd57600192505050612480565b8051156127ad575f8280156126d4576126d46142e1565b036127ad575f818060200190518101906126ee919061430e565b905073ffffffffffffffffffffffffffffffffffffffff8116156127ab576040517f65e4ad9e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff86811660248301528216906365e4ad9e906044016020604051808303815f875af115801561277d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906127a191906143c2565b9350505050612480565b505b505f949350505050565b5f5f6127c28361313f565b90925090505f8280156127d7576127d76142e1565b0361287e57808060200190518101906127f0919061430e565b6040517f8bfb07c900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301528781166024830152604482018790529190911690638bfb07c9906064015f604051808303815f87803b158015612867575f5ffd5b505af1158015612879573d5f5f3e3d5ffd5b505050505b505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261113791859182169063a9059cbb9060640161250c565b5f5f5f6128d08461313f565b90925090505f8280156128e5576128e56142e1565b036124c357808060200190518101906128fe919061430e565b73ffffffffffffffffffffffffffffffffffffffff1663e8c9bee56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612946573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107d69190613f07565b5f5f5f61297786866131ff565b91509150815f0361299b5783818161299157612991613de5565b04925050506102ce565b8184116129b2576129b2600385150260111861321b565b5f848688095f868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010185841190960395909502919093039390930492909217029150509392505050565b5f5f5f5f5f5f5f612a2a88612f8d565b9398509196509450925090506001856009811115612a4a57612a4a6142e1565b03612ae1575f83806020019051810190612a64919061430e565b90508073ffffffffffffffffffffffffffffffffffffffff16634cb44a766040518163ffffffff1660e01b81526004016040805180830381865afa158015612aae573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612ad291906143e1565b97509750505050505050915091565b5f5f82806020019051810190612af7919061434d565b915091505f612b1b88888888876fffffffffffffffffffffffffffffffff16612fba565b909a50670de0b6b3a764000099509050612b476fffffffffffffffffffffffffffffffff83168a6140c3565b612b519082613dce565b612b63670de0b6b3a76400008c613dce565b1015612b8d5780612b7c670de0b6b3a76400008c613dce565b612b869190613e12565b9850612b99565b808a1015612b99578099505b5050505050505050915091565b5f80826003811115612bba57612bba6142e1565b1480612480575060015b826003811115612bd657612bd66142e1565b1492915050565b5f6001826003811115612bf257612bf26142e1565b148061248057506002612bc4565b5f80846003811115612c1457612c146142e1565b14612c6e576001846003811115612c2d57612c2d6142e1565b14612c64576002846003811115612c4657612c466142e1565b14612c5a57612c55838361322c565b6107d6565b612c558383612e18565b612c558383612ec5565b6107d683836132c1565b5f83515f03612c8857505f6107d6565b8351600190868015612cdc575067ffffffffffffffff84168587612cad6001856140c3565b81518110612cbd57612cbd614096565b6020026020010151612ccf9190614403565b67ffffffffffffffff1611155b80612d32575086158015612d32575067ffffffffffffffff84168587612d036001856140c3565b81518110612d1357612d13614096565b6020026020010151612d259190614403565b67ffffffffffffffff1610155b15612d4b57612d426001826140c3565b925050506107d6565b80821015612e02575f612d5e8383613353565b905087612da5578467ffffffffffffffff1686888381518110612d8357612d83614096565b6020026020010151612d959190614403565b67ffffffffffffffff1610612de1565b8467ffffffffffffffff1686888381518110612dc357612dc3614096565b6020026020010151612dd59190614403565b67ffffffffffffffff16115b15612dee57809150612dfc565b612df9816001613ef4565b92505b50612d4b565b612e0d6001836140c3565b979650505050505050565b5f5f8260070b12612e9157600782900b633b8b87c08110612e65576040517f1115766700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b633b9aca0084612e7583836140c3565b612e7f9190613dce565b612e899190613e12565b915050612480565b633b9aca0083612ea084614426565b612eb19060070b633b9aca00613ef4565b612ebb9190613dce565b61247d9190613e12565b5f5f8260070b12612f3257600782900b64e8d4a510008110612f13576040517f1115766700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612e89612f2482633b9aca00613ef4565b8590633b9aca0060016123c7565b61247d612f3e83614426565b612f4f9060070b633b9aca006140c3565b8490633b9aca0060016123c7565b5f5f612f688461336d565b9050612f85612f7684613057565b80156123ef5750818002851190565b019392505050565b5f5f606080606085806020019051810190612fa89190614470565b939a9299509097509550909350915050565b5f5f612fcf86670de0b6b3a7640000866134d2565b9050612fdc8782876134d2565b9150612ff0670de0b6b3a764000083613dce565b61300284670de0b6b3a76400006140c3565b61300c9083613dce565b108015613044575061302683670de0b6b3a7640000613ef4565b6130309082613dce565b613042670de0b6b3a764000084613dce565b105b1561304d578091505b9550959350505050565b5f600282600381111561306c5761306c6142e1565b613076919061451f565b60ff166001149050919050565b6060814710156130c8576040517fcf47918100000000000000000000000000000000000000000000000000000000815247600482015260248101839052604401612463565b5f5f8573ffffffffffffffffffffffffffffffffffffffff1684866040516130f09190614540565b5f6040518083038185875af1925050503d805f811461312a576040519150601f19603f3d011682016040523d82523d5f602084013e61312f565b606091505b50915091506106fd8683836138fd565b5f606082806020019051810190613156919061438a565b9094909350915050565b5f5f60205f8451602086015f885af18061317f576040513d5f823e3d81fd5b50505f513d915081156131965780600114156131b0565b73ffffffffffffffffffffffffffffffffffffffff84163b155b15612553576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401612463565b5f805f1983850993909202808410938190039390930393915050565b634e487b715f52806020526024601cfd5b5f5f8260070b1261329557600782900b633b8b87c08110613279576040517f1115766700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612e89633b9aca0061328b83826140c3565b86919060016123c7565b61247d633b9aca006132a684614426565b6132b79060070b633b9aca00613ef4565b85919060016123c7565b5f5f8260070b1261332b57600782900b64e8d4a51000811061330f576040517f1115766700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61331d81633b9aca00613ef4565b612e7f633b9aca0086613dce565b61333482614426565b6133459060070b633b9aca006140c3565b612ebb633b9aca0085613dce565b5f6133616002848418613e12565b61247d90848416613ef4565b5f6001821161337a575090565b81600170010000000000000000000000000000000082106133a05760809190911c9060401b5b6801000000000000000082106133bb5760409190911c9060201b5b64010000000082106133d25760209190911c9060101b5b6201000082106133e75760109190911c9060081b5b61010082106133fb5760089190911c9060041b5b6010821061340e5760049190911c9060021b5b6004821061341a5760011b5b600302600190811c9081858161343257613432613de5565b048201901c9050600181858161344a5761344a613de5565b048201901c9050600181858161346257613462613de5565b048201901c9050600181858161347a5761347a613de5565b048201901c9050600181858161349257613492613de5565b048201901c905060018185816134aa576134aa613de5565b048201901c90506134c98185816134c3576134c3613de5565b04821190565b90039392505050565b5f808460098111156134e6576134e66142e1565b036135b6575f5f5f5f5f868060200190518101906135049190614666565b945094509450945094505f613519828a61398c565b86519091505f5b818110156135a65761359c8389838151811061353e5761353e614096565b602002602001015188848151811061355857613558614096565b602002602001015188858151811061357257613572614096565b602002602001015160ff168b868151811061358f5761358f614096565b60200260200101516139bb565b9250600101613520565b50819750505050505050506102ce565b60038460098111156135ca576135ca6142e1565b036135de5750670de0b6b3a76400006102ce565b60028460098111156135f2576135f26142e1565b036135fe5750816102ce565b6004846009811115613612576136126142e1565b036136a9576040517f7a28fb88000000000000000000000000000000000000000000000000000000008152670de0b6b3a7640000600482015273ae7ab96520de3a18e5e111b5eaab095312d7fe8490637a28fb8890602401602060405180830381865afa158015613685573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122739190613f07565b60058460098111156136bd576136bd6142e1565b0361371f5773be9895146f7af43049ca1c1ae358b0541ea4970473ffffffffffffffffffffffffffffffffffffffff16633ba0b9a96040518163ffffffff1660e01b8152600401602060405180830381865afa158015613685573d5f5f3e3d5ffd5b6006846009811115613733576137336142e1565b036137955773ae78736cd615f374d3085123a210448e74fc639373ffffffffffffffffffffffffffffffffffffffff1663e6aa216c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613685573d5f5f3e3d5ffd5b60078460098111156137a9576137a96142e1565b0361380b5773ac3e018457b222d93114458476f3e3416abbe38f73ffffffffffffffffffffffffffffffffffffffff166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa158015613685573d5f5f3e3d5ffd5b600884600981111561381f5761381f6142e1565b03613842575f828060200190518101906138399190613f07565b91506102ce9050565b6009846009811115613856576138566142e1565b036138f6575f5f838060200190518101906138719190614791565b91509150808273ffffffffffffffffffffffffffffffffffffffff1663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156138bf573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906138e39190613f07565b6138ed9190613e12565b925050506102ce565b50816102ce565b6060826139125761390d82613acf565b6102ce565b8151158015613936575073ffffffffffffffffffffffffffffffffffffffff84163b155b15613985576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401612463565b50806102ce565b5f808360018111156139a0576139a06142e1565b036139b45750670de0b6b3a7640000612480565b5080612480565b5f5f5f8673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015613a07573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613a2b91906147d6565b509350509250505f82131580613a4f575063ffffffff8416613a4d82426140c3565b115b15613a86576040517fae19356300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8560ff16600103613ab957613a9c85600a614818565b613aa6838a613dce565b613ab09190613e12565b92505050612409565b81613ac586600a614818565b613aa6908a613dce565b805115613ade57805160208201fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b73ffffffffffffffffffffffffffffffffffffffff81168114613b10575f5ffd5b5f5f5f5f5f5f60c08789031215613b49575f5ffd5b86359550602087013594506040870135613b6281613b13565b93506060870135613b7281613b13565b92506080870135613b8281613b13565b9598949750929591949360a090920135925050565b5f5f5f60608486031215613ba9575f5ffd5b833592506020840135613bbb81613b13565b91506040840135613bcb81613b13565b809150509250925092565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613c4a57613c4a613bd6565b604052919050565b5f67ffffffffffffffff821115613c6b57613c6b613bd6565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b5f5f5f5f5f5f60c08789031215613cac575f5ffd5b86359550602087013594506040870135613cc581613b13565b93506060870135613cd581613b13565b92506080870135915060a087013567ffffffffffffffff811115613cf7575f5ffd5b8701601f81018913613d07575f5ffd5b8035613d1a613d1582613c52565b613c03565b8181528a6020838501011115613d2e575f5ffd5b816020840160208301375f602083830101528093505050509295509295509295565b600181811c90821680613d6457607f821691505b602082108103613d9b577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b808202811582820484141761248057612480613da1565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f82613e2057613e20613de5565b500490565b60ff818116838216019081111561248057612480613da1565b7affffffffffffffffffffffffffffffffffffffffffffffffffffff818116838216019081111561248057612480613da1565b6fffffffffffffffffffffffffffffffff818116838216019081111561248057612480613da1565b7affffffffffffffffffffffffffffffffffffffffffffffffffffff828116828216039081111561248057612480613da1565b6fffffffffffffffffffffffffffffffff828116828216039081111561248057612480613da1565b8082018082111561248057612480613da1565b5f60208284031215613f17575f5ffd5b5051919050565b5f82601f830112613f2d575f5ffd5b8151613f3b613d1582613c52565b818152846020838601011115613f4f575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b5f5f60408385031215613f7c575f5ffd5b8251602084015190925067ffffffffffffffff811115613f9a575f5ffd5b613fa685828601613f1e565b9150509250929050565b613fdb818651805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b602085015160408201526040850151606082015261401c6080820185805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b73ffffffffffffffffffffffffffffffffffffffff831660c082015261010060e08201525f825180610100840152806020850161012085015e5f61012082850101526101207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011684010191505095945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b8181038181111561248057612480613da1565b8181035f8312801583831316838312821617156140f5576140f5613da1565b5092915050565b8082018281125f83128015821682158216171561411b5761411b613da1565b505092915050565b5f8160070b8360070b8061413957614139613de5565b5f1981147fffffffffffffffffffffffffffffffffffffffffffffffff80000000000000008314161561416e5761416e613da1565b90059392505050565b6001815b60018411156141b25780850481111561419657614196613da1565b60018416156141a457908102905b60019390931c92800261417b565b935093915050565b5f826141c857506001612480565b816141d457505f612480565b81600181146141ea57600281146141f457614210565b6001915050612480565b60ff84111561420557614205613da1565b50506001821b612480565b5060208310610133831016604e8410600b8410161715614233575081810a612480565b61423f5f198484614177565b805f190482111561425257614252613da1565b029392505050565b5f61247d60ff8416836141ba565b5f8261427657614276613de5565b5f1983147f8000000000000000000000000000000000000000000000000000000000000000831416156142ab576142ab613da1565b500590565b5f5f1982036142c1576142c1613da1565b5060010190565b60ff828116828216039081111561248057612480613da1565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f6020828403121561431e575f5ffd5b81516102ce81613b13565b80516fffffffffffffffffffffffffffffffff81168114614348575f5ffd5b919050565b5f5f6040838503121561435e575f5ffd5b61436783614329565b915061437560208401614329565b90509250929050565b60018110613b10575f5ffd5b5f5f6040838503121561439b575f5ffd5b82516143a68161437e565b602084015190925067ffffffffffffffff811115613f9a575f5ffd5b5f602082840312156143d2575f5ffd5b815180151581146102ce575f5ffd5b5f5f604083850312156143f2575f5ffd5b505080516020909101519092909150565b67ffffffffffffffff81811683821602908116908181146140f5576140f5613da1565b5f8160070b7fffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000810361445a5761445a613da1565b5f0392915050565b8051600a8110614348575f5ffd5b5f5f5f5f5f60a08688031215614484575f5ffd5b61448d86614462565b945061449b60208701614462565b9350604086015167ffffffffffffffff8111156144b6575f5ffd5b6144c288828901613f1e565b935050606086015167ffffffffffffffff8111156144de575f5ffd5b6144ea88828901613f1e565b925050608086015167ffffffffffffffff811115614506575f5ffd5b61451288828901613f1e565b9150509295509295909350565b5f60ff83168061453157614531613de5565b8060ff84160691505092915050565b5f82518060208501845e5f920191825250919050565b5f67ffffffffffffffff82111561456f5761456f613bd6565b5060051b60200190565b5f82601f830112614588575f5ffd5b8151614596613d1582614556565b8082825260208201915060208360051b8601019250858311156145b7575f5ffd5b602085015b838110156145e557805163ffffffff811681146145d7575f5ffd5b8352602092830192016145bc565b5095945050505050565b5f82601f8301126145fe575f5ffd5b815161460c613d1582614556565b8082825260208201915060208360051b86010192508583111561462d575f5ffd5b602085015b838110156145e557805160ff8116811461464a575f5ffd5b835260209283019201614632565b805160028110614348575f5ffd5b5f5f5f5f5f60a0868803121561467a575f5ffd5b855167ffffffffffffffff811115614690575f5ffd5b8601601f810188136146a0575f5ffd5b80516146ae613d1582614556565b8082825260208201915060208360051b85010192508a8311156146cf575f5ffd5b6020840193505b828410156146fa5783516146e981613b13565b8252602093840193909101906146d6565b80985050505050602086015167ffffffffffffffff81111561471a575f5ffd5b61472688828901614579565b945050604086015167ffffffffffffffff811115614742575f5ffd5b61474e888289016145ef565b935050606086015167ffffffffffffffff81111561476a575f5ffd5b614776888289016145ef565b92505061478560808701614658565b90509295509295909350565b5f5f604083850312156147a2575f5ffd5b82516147ad81613b13565b6020939093015192949293505050565b805169ffffffffffffffffffff81168114614348575f5ffd5b5f5f5f5f5f60a086880312156147ea575f5ffd5b6147f3866147bd565b60208701516040880151606089015192975090955093509150614785608087016147bd565b5f61247d83836141ba56fea2646970667358221220037f21a80973fdf8348c26885e8cf653c708fd3345322f1694eb1bacf2ea1e5164736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561000f575f5ffd5b506004361061006f575f3560e01c8063b92567fa1161004d578063b92567fa146100be578063c10a6287146100d1578063d92c6cb2146100e4575f5ffd5b80633b6a1fe0146100735780634583aea6146100985780639525f3ab146100ab575b5f5ffd5b610086610081366004613b34565b6100f7565b60405190815260200160405180910390f35b6100866100a6366004613b97565b61018e565b6100866100b9366004613b97565b610233565b6100866100cc366004613b34565b6102d5565b6100866100df366004613c97565b610360565b6100866100f2366004613c97565b6103d8565b5f5f5f610105878786610450565b915091508161011e5761011986828b610628565b610128565b610128818a610707565b925087831015610164576040517fa1aabbe100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101828984898989878760405180602001604052805f8152506107de565b50509695505050505050565b5f7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7581806101bd868642610450565b915091508115610211576101d18188610707565b600184015490945061020c908290869070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff166110a5565b610229565b61021c858289610628565b935061022985828661113c565b5050509392505050565b5f7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c758180610262868642610450565b9150915081156102b85760018301546102a4908290899070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff166110a5565b6102ae81886112bd565b93505050506102ce565b6102c385828961113c565b6102ae858289611315565b9392505050565b5f5f5f6102e3878786610450565b91509150816102fc576102f786828b611315565b610306565b610306818a6112bd565b925087831115610342576040517fa2b0657400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610182838a898989878760405180602001604052805f8152506107de565b5f5f5f61036d8786611362565b9150915061037b818a6112bd565b9250878311156103b7576040517fa2b0657400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103c5838989888886611468565b9350610182838a89858a6001878b6107de565b5f5f5f6103e58786611362565b915091506103f3818a610707565b92508783101561042f576040517fa1aabbe100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61043d898a89888886611468565b9350610182898489858a6001878b6107de565b5f5f8242111561048c576040517fecdd1c2900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c75805473ffffffffffffffffffffffffffffffffffffffff9081169087168190036105455773ffffffffffffffffffffffffffffffffffffffff86165f9081526005830160205260408120805490945062010000900460ff16900361053d576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f935061061e565b8073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16036105ec5773ffffffffffffffffffffffffffffffffffffffff87165f90815260058301602052604081208054909450610100900460ff1690036105e3576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001935061061e565b6040517f672215de00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050935093915050565b5f5f5f6106bf8686600501805461063e90613d50565b80601f016020809104026020016040519081016040528092919081815260200182805461066a90613d50565b80156106b55780601f1061068c576101008083540402835291602001916106b5565b820191905f5260205f20905b81548152906001019060200180831161069857829003601f168201915b50505050506115f7565b915091506106cf85600286611833565b92506106fd816106df8486613dce565b6106e99190613e12565b86546012906301000000900460ff16612245565b9695505050505050565b5f5f61079c84600501805461071b90613d50565b80601f016020809104026020016040519081016040528092919081815260200182805461074790613d50565b80156107925780601f1061076957610100808354040283529160200191610792565b820191905f5260205f20905b81548152906001019060200180831161077557829003601f168201915b50505050506122ae565b90506107c96107ab8483613dce565b85546107c2906301000000900460ff166012613e25565b6012612245565b91506107d6845f84611833565b949350505050565b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c75805460ff7501000000000000000000000000000000000000000000909104167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01610876576040517f37ed32e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff16750200000000000000000000000000000000000000000017815588158015906108c257505f88115b1561105d577f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c758415610c96576001818101545f916109409161093b918d916b033b2e3c9fd0803ce8000000917001000000000000000000000000000000009091046fffffffffffffffffffffffffffffffff16906123c7565b612412565b8554909150610988906fffffffffffffffffffffffffffffffff8316906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16613e3e565b85547affffffffffffffffffffffffffffffffffffffffffffffffffffff91909116650100000000000264ffffffffff90911617855560018201546109f79086905f906fffffffffffffffffffffffffffffffff700100000000000000000000000000000000909104166110a5565b6001820154610a199082906fffffffffffffffffffffffffffffffff16613e71565b6001830180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055835115610a8257610a7c6e22d473030f116ddee9f6b43ac78ba385612470565b50610b6c565b845460ff1615610b4a57610b4533610b26876007016001018054610aa590613d50565b80601f0160208091040260200160405190810160405280929190818152602001828054610ad190613d50565b8015610b1c5780601f10610af357610100808354040283529160200191610b1c565b820191905f5260205f20905b815481529060010190602001808311610aff57829003601f168201915b5050505050612486565b73ffffffffffffffffffffffffffffffffffffffff8c1691908e6124ca565b610b6c565b610b6c73ffffffffffffffffffffffffffffffffffffffff8a1633308e6124ca565b845460ff1615610c0d57610c0d8b866007016001018054610b8c90613d50565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb890613d50565b8015610c035780601f10610bda57610100808354040283529160200191610c03565b820191905f5260205f20905b815481529060010190602001808311610be657829003601f168201915b5050505050612559565b6040517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602482018c90528916906340c10f19906044015f604051808303815f87803b158015610c7a575f5ffd5b505af1158015610c8c573d5f5f3e3d5ffd5b5050505050610ffb565b8354640100000000900460ff1615801590610d425750610d40846006018054610cbe90613d50565b80601f0160208091040260200160405190810160405280929190818152602001828054610cea90613d50565b8015610d355780601f10610d0c57610100808354040283529160200191610d35565b820191905f5260205f20905b815481529060010190602001808311610d1857829003601f168201915b5050505050876125ff565b155b15610d79576040517f584a793800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018101545f90610dca9070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16610dc06b033b2e3c9fd0803ce80000008e613dce565b61093b9190613e12565b8554909150610e12906fffffffffffffffffffffffffffffffff8316906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16613e99565b85547affffffffffffffffffffffffffffffffffffffffffffffffffffff91909116650100000000000264ffffffffff9091161785556001820154610e6a9082906fffffffffffffffffffffffffffffffff16613ecc565b6001830180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff929092169190911790556040517f2b471d8e000000000000000000000000000000000000000000000000000000008152600481018c905233602482015273ffffffffffffffffffffffffffffffffffffffff8a1690632b471d8e906044015f604051808303815f87803b158015610f18575f5ffd5b505af1158015610f2a573d5f5f3e3d5ffd5b5050865460ff16159150610fd8905057610fd388888c886007016001018054610f5290613d50565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7e90613d50565b8015610fc95780601f10610fa057610100808354040283529160200191610fc9565b820191905f5260205f20905b815481529060010190602001808311610fac57829003601f168201915b50505050506127b7565b610ff9565b610ff973ffffffffffffffffffffffffffffffffffffffff8916888c612886565b505b604080518b8152602081018b905273ffffffffffffffffffffffffffffffffffffffff88811682840152915133928a811692908c16917f73adcdbf2d8fee0c1221daefef436a92c3c640e97ff2941e744bf5eef1ab346f9181900360600190a4505b80547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675010000000000000000000000000000000000000000001790555050505050505050565b600983015483546b033b2e3c9fd0803ce8000000906110eb9084906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16613dce565b6110f59190613e12565b6110ff9084613ef4565b1115611137576040517f1115766700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b815460ff16158015906111e35750806111e183600701600101805461116090613d50565b80601f016020809104026020016040519081016040528092919081815260200182805461118c90613d50565b80156111d75780601f106111ae576101008083540402835291602001916111d7565b820191905f5260205f20905b8154815290600101906020018083116111ba57829003601f168201915b50505050506128c4565b105b806112865750815460ff1615801561128657506040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152819073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015611260573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112849190613f07565b105b15611137576040517f1115766700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5f6112d184600501805461071b90613d50565b90506112df84600185611833565b91506107d6816112f7670de0b6b3a764000085613dce565b6113019190613e12565b85546012906301000000900460ff16612245565b5f5f5f61132b8686600501805461063e90613d50565b865491935091506113549061134d9086906301000000900460ff166012612245565b828461296a565b92506106fd85600385611833565b5f5f8242111561139e576040517fecdd1c2900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff83165f9081527f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7a60205260408120805490917f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7591610100900460ff169003611448576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5473ffffffffffffffffffffffffffffffffffffffff1694909350915050565b60408051606081810183525f8083526020830152918101829052825460ff16156114be576114a1836007016001018054610aa590613d50565b73ffffffffffffffffffffffffffffffffffffffff1681526114c2565b3081525b838060200190518101906114d69190613f6b565b60408084019182526020808501938452815160a08101835273ffffffffffffffffffffffffffffffffffffffff808c1660608301908152608083018e905282529451818301528083018a905282518084018452865190951685529084018c9052915190517f30f28b7a000000000000000000000000000000000000000000000000000000009361156e93929091339190602401613fb0565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915298975050505050505050565b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c77805460408051602080840282018101909252828152670de0b6b3a7640000935f937f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c759385939291908301828280156116a457602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611679575b505083519394505f925050505b81811015611828575f670de0b6b3a764000090508873ffffffffffffffffffffffffffffffffffffffff168483815181106116ee576116ee614096565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614611804576117fb856005015f86858151811061172b5761172b614096565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600501805461177a90613d50565b80601f01602080910402602001604051908101604052809291908181526020018280546117a690613d50565b80156117f15780601f106117c8576101008083540402835291602001916117f1565b820191905f5260205f20905b8154815290600101906020018083116117d457829003601f168201915b5050505050612a1a565b91506118139050565b61180d88612a1a565b90965090505b8681101561181f578096505b506001016116b1565b505050509250929050565b5f61187e6040518061012001604052805f151581526020015f151581526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b61188784612ba6565b1515815261189484612bdd565b1515602082015280515f906118ad5760038601546118b3565b60018601545b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c76549091505f907f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c75906fffffffffffffffffffffffffffffffff1680158061191b5750836001145b156119895761197d8888875f0151611968578b6004015f8154811061194257611942614096565b905f5260205f2090600491828204019190066008029054906101000a900460070b612c00565b8b6002015f8154811061194257611942614096565b955050505050506102ce565b885481906119c690670de0b6b3a7640000906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16613dce565b6119d09190613e12565b60018301548a5467ffffffffffffffff92909216945070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16906b033b2e3c9fd0803ce800000090611a4c9083906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16613dce565b611a569190613e12565b60e087018190526b033b2e3c9fd0803ce8000000611a748484613dce565b611a7e9190613e12565b611a8891906140c3565b610100870152505083515f91508190611b399080611aa9578a600301611aae565b8a6001015b805480602002602001604051908101604052809291908181526020018280548015611b2957602002820191905f5260205f20905f905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411611ae45790505b5050505050633b9aca0086612c78565b90505b611b476001856140c3565b8110156121f357845115611cad57886001018181548110611b6a57611b6a614096565b5f918252602090912060048204015460039091166008026101000a900467ffffffffffffffff166040860152600189810190611ba7908390613ef4565b81548110611bb757611bb7614096565b5f918252602090912060048204015460039091166008026101000a900467ffffffffffffffff16606086015260028901805482908110611bf957611bf9614096565b5f918252602090912060048204015460039091166008026101000a900460070b608086015260028901611c2d826001613ef4565b81548110611c3d57611c3d614096565b5f918252602090912060048204015460039091166008026101000a900460070b60a086015260e08501516060860151611c7a90633b9aca006140c3565b8660600151876101000151611c8f9190613dce565b611c999190613e12565b611ca391906140c3565b60c0860152611e0d565b886003018181548110611cc257611cc2614096565b5f918252602090912060048204015460039182166008026101000a900467ffffffffffffffff1660408701528901611cfb826001613ef4565b81548110611d0b57611d0b614096565b905f5260205f2090600491828204019190066008029054906101000a900467ffffffffffffffff1667ffffffffffffffff16856060018181525050886004018181548110611d5b57611d5b614096565b5f918252602090912060048083049091015460039092166008026101000a90910460070b60808701528901611d91826001613ef4565b81548110611da157611da1614096565b5f918252602090912060048204015460039091166008026101000a900460070b60a08601526060850151611dd990633b9aca006140c3565b8560600151866101000151611dee9190613dce565b611df89190613e12565b8560e00151611e0791906140c3565b60c08601525b5f83633b9aca008760400151611e239190613dce565b03611e3357506080850151611f2a565b8560a00151866080015103611e4d57506080850151611f2a565b85515f90611e9b5760e08701516040880151611e6d90633b9aca006140c3565b8860400151896101000151611e829190613dce565b611e8c9190613e12565b611e9691906140c3565b611edc565b6040870151611eae90633b9aca006140c3565b8760400151886101000151611ec39190613dce565b611ecd9190613e12565b8760e00151611edc91906140c3565b9050808760c00151611eee9190613ef4565b8188608001518960a00151611f0391906140d6565b611f0d9190613dce565b611f179190613e12565b8760800151611f2691906140fc565b9150505b5f8660200151611f91578651611f6857611f638760c001516002848a60a00151611f5491906140fc565b611f5e9190614123565b612e18565b611f97565b611f638760c001516002848a60a00151611f8291906140fc565b611f8c9190614123565b612ec5565b8660c001515b905088811061212b575f876020015115611fe457611fd3838960a00151611fbe91906140d6565b611fc9846002613dce565b8c919060016123c7565b611fdd90846140fc565b9050612107565b5f612020848a60a00151611ff891906140d6565b6120038d6002613dce565b61200d9190613dce565b60c08b0151633b9aca00919060016123c7565b895190915015612081576002633b9aca008561205c848461204184866140fc565b61204b919061425a565b6120559190613ef4565b6001612f5d565b61206691906140fc565b61207091906140d6565b61207a9190614268565b9150612105565b5f600261209286633b9aca006140d6565b61209c919061425a565b9050818110156120c75760026120b6633b9aca00876140fc565b6120c09190614268565b9250612103565b6121006120dd6120d784846140c3565b5f612f5d565b6120eb633b9aca00886140fc565b6120f591906140d6565b6001600260016123c7565b92505b505b505b6121128b8b83612c00565b61211c9086613ef4565b985050505050505050506102ce565b612135818a6140c3565b9850866020015115612180578651612166576121618760c001516002848a60a00151611f5491906140fc565b612186565b6121618760c001516002848a60a00151611f8291906140fc565b8660c001515b6121909085613ef4565b9350633b9aca0087606001516121a69190613dce565b94506121b1836142b0565b87519093506121d3578660c001518760e001516121ce91906140c3565b6121e7565b8660c001518760e001516121e79190613ef4565b60e08801525050611b3c565b61222e8888875f015161221f5760048c0161220f6001896140c3565b8154811061194257611942614096565b60028c0161220f6001896140c3565b6122389083613ef4565b9998505050505050505050565b5f8160ff168360ff16111561227a5761225e82846142c8565b61226990600a61425a565b6122739085613e12565b90506102ce565b8160ff168360ff1610156122a75761229283836142c8565b61229d90600a61425a565b6122739085613dce565b50826102ce565b5f5f5f5f5f5f6122bd87612f8d565b93985091965094509250905060018560098111156122dd576122dd6142e1565b03612372575f838060200190518101906122f7919061430e565b90508073ffffffffffffffffffffffffffffffffffffffff16635ade93556040518163ffffffff1660e01b8152600401602060405180830381865afa158015612342573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123669190613f07565b98975050505050505050565b5f81806020019051810190612387919061434d565b5090505f6123aa87878787866fffffffffffffffffffffffffffffffff16612fba565b9098509050878110156123bb578097505b50505050505050919050565b5f6123f46123d483613057565b80156123ef57505f84806123ea576123ea613de5565b868809115b151590565b6123ff86868661296a565b6124099190613ef4565b95945050505050565b5f6fffffffffffffffffffffffffffffffff82111561246c576040517f6dfcc65000000000000000000000000000000000000000000000000000000000815260806004820152602481018390526044015b60405180910390fd5b5090565b606061247d83835f613083565b90505b92915050565b5f5f5f6124928461313f565b30945090925090505f8280156124aa576124aa6142e1565b036124c357808060200190518101906107d6919061430e565b5050919050565b60405173ffffffffffffffffffffffffffffffffffffffff84811660248301528381166044830152606482018390526125539186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613160565b50505050565b5f5f6125648361313f565b90925090505f828015612579576125796142e1565b036125535780806020019051810190612592919061430e565b73ffffffffffffffffffffffffffffffffffffffff16632afcf480856040518263ffffffff1660e01b81526004016125cc91815260200190565b5f604051808303815f87803b1580156125e3575f5ffd5b505af11580156125f5573d5f5f3e3d5ffd5b5050505050505050565b5f5f5f84806020019051810190612616919061438a565b915091505f6126427f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7590565b6008015f848015612655576126556142e1565b8015612663576126636142e1565b81526020019081526020015f205f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205411156126bd57600192505050612480565b8051156127ad575f8280156126d4576126d46142e1565b036127ad575f818060200190518101906126ee919061430e565b905073ffffffffffffffffffffffffffffffffffffffff8116156127ab576040517f65e4ad9e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff86811660248301528216906365e4ad9e906044016020604051808303815f875af115801561277d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906127a191906143c2565b9350505050612480565b505b505f949350505050565b5f5f6127c28361313f565b90925090505f8280156127d7576127d76142e1565b0361287e57808060200190518101906127f0919061430e565b6040517f8bfb07c900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301528781166024830152604482018790529190911690638bfb07c9906064015f604051808303815f87803b158015612867575f5ffd5b505af1158015612879573d5f5f3e3d5ffd5b505050505b505050505050565b60405173ffffffffffffffffffffffffffffffffffffffff83811660248301526044820183905261113791859182169063a9059cbb9060640161250c565b5f5f5f6128d08461313f565b90925090505f8280156128e5576128e56142e1565b036124c357808060200190518101906128fe919061430e565b73ffffffffffffffffffffffffffffffffffffffff1663e8c9bee56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612946573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107d69190613f07565b5f5f5f61297786866131ff565b91509150815f0361299b5783818161299157612991613de5565b04925050506102ce565b8184116129b2576129b2600385150260111861321b565b5f848688095f868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010185841190960395909502919093039390930492909217029150509392505050565b5f5f5f5f5f5f5f612a2a88612f8d565b9398509196509450925090506001856009811115612a4a57612a4a6142e1565b03612ae1575f83806020019051810190612a64919061430e565b90508073ffffffffffffffffffffffffffffffffffffffff16634cb44a766040518163ffffffff1660e01b81526004016040805180830381865afa158015612aae573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612ad291906143e1565b97509750505050505050915091565b5f5f82806020019051810190612af7919061434d565b915091505f612b1b88888888876fffffffffffffffffffffffffffffffff16612fba565b909a50670de0b6b3a764000099509050612b476fffffffffffffffffffffffffffffffff83168a6140c3565b612b519082613dce565b612b63670de0b6b3a76400008c613dce565b1015612b8d5780612b7c670de0b6b3a76400008c613dce565b612b869190613e12565b9850612b99565b808a1015612b99578099505b5050505050505050915091565b5f80826003811115612bba57612bba6142e1565b1480612480575060015b826003811115612bd657612bd66142e1565b1492915050565b5f6001826003811115612bf257612bf26142e1565b148061248057506002612bc4565b5f80846003811115612c1457612c146142e1565b14612c6e576001846003811115612c2d57612c2d6142e1565b14612c64576002846003811115612c4657612c466142e1565b14612c5a57612c55838361322c565b6107d6565b612c558383612e18565b612c558383612ec5565b6107d683836132c1565b5f83515f03612c8857505f6107d6565b8351600190868015612cdc575067ffffffffffffffff84168587612cad6001856140c3565b81518110612cbd57612cbd614096565b6020026020010151612ccf9190614403565b67ffffffffffffffff1611155b80612d32575086158015612d32575067ffffffffffffffff84168587612d036001856140c3565b81518110612d1357612d13614096565b6020026020010151612d259190614403565b67ffffffffffffffff1610155b15612d4b57612d426001826140c3565b925050506107d6565b80821015612e02575f612d5e8383613353565b905087612da5578467ffffffffffffffff1686888381518110612d8357612d83614096565b6020026020010151612d959190614403565b67ffffffffffffffff1610612de1565b8467ffffffffffffffff1686888381518110612dc357612dc3614096565b6020026020010151612dd59190614403565b67ffffffffffffffff16115b15612dee57809150612dfc565b612df9816001613ef4565b92505b50612d4b565b612e0d6001836140c3565b979650505050505050565b5f5f8260070b12612e9157600782900b633b8b87c08110612e65576040517f1115766700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b633b9aca0084612e7583836140c3565b612e7f9190613dce565b612e899190613e12565b915050612480565b633b9aca0083612ea084614426565b612eb19060070b633b9aca00613ef4565b612ebb9190613dce565b61247d9190613e12565b5f5f8260070b12612f3257600782900b64e8d4a510008110612f13576040517f1115766700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612e89612f2482633b9aca00613ef4565b8590633b9aca0060016123c7565b61247d612f3e83614426565b612f4f9060070b633b9aca006140c3565b8490633b9aca0060016123c7565b5f5f612f688461336d565b9050612f85612f7684613057565b80156123ef5750818002851190565b019392505050565b5f5f606080606085806020019051810190612fa89190614470565b939a9299509097509550909350915050565b5f5f612fcf86670de0b6b3a7640000866134d2565b9050612fdc8782876134d2565b9150612ff0670de0b6b3a764000083613dce565b61300284670de0b6b3a76400006140c3565b61300c9083613dce565b108015613044575061302683670de0b6b3a7640000613ef4565b6130309082613dce565b613042670de0b6b3a764000084613dce565b105b1561304d578091505b9550959350505050565b5f600282600381111561306c5761306c6142e1565b613076919061451f565b60ff166001149050919050565b6060814710156130c8576040517fcf47918100000000000000000000000000000000000000000000000000000000815247600482015260248101839052604401612463565b5f5f8573ffffffffffffffffffffffffffffffffffffffff1684866040516130f09190614540565b5f6040518083038185875af1925050503d805f811461312a576040519150601f19603f3d011682016040523d82523d5f602084013e61312f565b606091505b50915091506106fd8683836138fd565b5f606082806020019051810190613156919061438a565b9094909350915050565b5f5f60205f8451602086015f885af18061317f576040513d5f823e3d81fd5b50505f513d915081156131965780600114156131b0565b73ffffffffffffffffffffffffffffffffffffffff84163b155b15612553576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401612463565b5f805f1983850993909202808410938190039390930393915050565b634e487b715f52806020526024601cfd5b5f5f8260070b1261329557600782900b633b8b87c08110613279576040517f1115766700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612e89633b9aca0061328b83826140c3565b86919060016123c7565b61247d633b9aca006132a684614426565b6132b79060070b633b9aca00613ef4565b85919060016123c7565b5f5f8260070b1261332b57600782900b64e8d4a51000811061330f576040517f1115766700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61331d81633b9aca00613ef4565b612e7f633b9aca0086613dce565b61333482614426565b6133459060070b633b9aca006140c3565b612ebb633b9aca0085613dce565b5f6133616002848418613e12565b61247d90848416613ef4565b5f6001821161337a575090565b81600170010000000000000000000000000000000082106133a05760809190911c9060401b5b6801000000000000000082106133bb5760409190911c9060201b5b64010000000082106133d25760209190911c9060101b5b6201000082106133e75760109190911c9060081b5b61010082106133fb5760089190911c9060041b5b6010821061340e5760049190911c9060021b5b6004821061341a5760011b5b600302600190811c9081858161343257613432613de5565b048201901c9050600181858161344a5761344a613de5565b048201901c9050600181858161346257613462613de5565b048201901c9050600181858161347a5761347a613de5565b048201901c9050600181858161349257613492613de5565b048201901c905060018185816134aa576134aa613de5565b048201901c90506134c98185816134c3576134c3613de5565b04821190565b90039392505050565b5f808460098111156134e6576134e66142e1565b036135b6575f5f5f5f5f868060200190518101906135049190614666565b945094509450945094505f613519828a61398c565b86519091505f5b818110156135a65761359c8389838151811061353e5761353e614096565b602002602001015188848151811061355857613558614096565b602002602001015188858151811061357257613572614096565b602002602001015160ff168b868151811061358f5761358f614096565b60200260200101516139bb565b9250600101613520565b50819750505050505050506102ce565b60038460098111156135ca576135ca6142e1565b036135de5750670de0b6b3a76400006102ce565b60028460098111156135f2576135f26142e1565b036135fe5750816102ce565b6004846009811115613612576136126142e1565b036136a9576040517f7a28fb88000000000000000000000000000000000000000000000000000000008152670de0b6b3a7640000600482015273ae7ab96520de3a18e5e111b5eaab095312d7fe8490637a28fb8890602401602060405180830381865afa158015613685573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906122739190613f07565b60058460098111156136bd576136bd6142e1565b0361371f5773be9895146f7af43049ca1c1ae358b0541ea4970473ffffffffffffffffffffffffffffffffffffffff16633ba0b9a96040518163ffffffff1660e01b8152600401602060405180830381865afa158015613685573d5f5f3e3d5ffd5b6006846009811115613733576137336142e1565b036137955773ae78736cd615f374d3085123a210448e74fc639373ffffffffffffffffffffffffffffffffffffffff1663e6aa216c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613685573d5f5f3e3d5ffd5b60078460098111156137a9576137a96142e1565b0361380b5773ac3e018457b222d93114458476f3e3416abbe38f73ffffffffffffffffffffffffffffffffffffffff166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa158015613685573d5f5f3e3d5ffd5b600884600981111561381f5761381f6142e1565b03613842575f828060200190518101906138399190613f07565b91506102ce9050565b6009846009811115613856576138566142e1565b036138f6575f5f838060200190518101906138719190614791565b91509150808273ffffffffffffffffffffffffffffffffffffffff1663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156138bf573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906138e39190613f07565b6138ed9190613e12565b925050506102ce565b50816102ce565b6060826139125761390d82613acf565b6102ce565b8151158015613936575073ffffffffffffffffffffffffffffffffffffffff84163b155b15613985576040517f9996b31500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401612463565b50806102ce565b5f808360018111156139a0576139a06142e1565b036139b45750670de0b6b3a7640000612480565b5080612480565b5f5f5f8673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015613a07573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190613a2b91906147d6565b509350509250505f82131580613a4f575063ffffffff8416613a4d82426140c3565b115b15613a86576040517fae19356300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8560ff16600103613ab957613a9c85600a614818565b613aa6838a613dce565b613ab09190613e12565b92505050612409565b81613ac586600a614818565b613aa6908a613dce565b805115613ade57805160208201fd5b6040517fd6bda27500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b73ffffffffffffffffffffffffffffffffffffffff81168114613b10575f5ffd5b5f5f5f5f5f5f60c08789031215613b49575f5ffd5b86359550602087013594506040870135613b6281613b13565b93506060870135613b7281613b13565b92506080870135613b8281613b13565b9598949750929591949360a090920135925050565b5f5f5f60608486031215613ba9575f5ffd5b833592506020840135613bbb81613b13565b91506040840135613bcb81613b13565b809150509250925092565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613c4a57613c4a613bd6565b604052919050565b5f67ffffffffffffffff821115613c6b57613c6b613bd6565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b5f5f5f5f5f5f60c08789031215613cac575f5ffd5b86359550602087013594506040870135613cc581613b13565b93506060870135613cd581613b13565b92506080870135915060a087013567ffffffffffffffff811115613cf7575f5ffd5b8701601f81018913613d07575f5ffd5b8035613d1a613d1582613c52565b613c03565b8181528a6020838501011115613d2e575f5ffd5b816020840160208301375f602083830101528093505050509295509295509295565b600181811c90821680613d6457607f821691505b602082108103613d9b577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b808202811582820484141761248057612480613da1565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f82613e2057613e20613de5565b500490565b60ff818116838216019081111561248057612480613da1565b7affffffffffffffffffffffffffffffffffffffffffffffffffffff818116838216019081111561248057612480613da1565b6fffffffffffffffffffffffffffffffff818116838216019081111561248057612480613da1565b7affffffffffffffffffffffffffffffffffffffffffffffffffffff828116828216039081111561248057612480613da1565b6fffffffffffffffffffffffffffffffff828116828216039081111561248057612480613da1565b8082018082111561248057612480613da1565b5f60208284031215613f17575f5ffd5b5051919050565b5f82601f830112613f2d575f5ffd5b8151613f3b613d1582613c52565b818152846020838601011115613f4f575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b5f5f60408385031215613f7c575f5ffd5b8251602084015190925067ffffffffffffffff811115613f9a575f5ffd5b613fa685828601613f1e565b9150509250929050565b613fdb818651805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b602085015160408201526040850151606082015261401c6080820185805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b73ffffffffffffffffffffffffffffffffffffffff831660c082015261010060e08201525f825180610100840152806020850161012085015e5f61012082850101526101207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011684010191505095945050505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b8181038181111561248057612480613da1565b8181035f8312801583831316838312821617156140f5576140f5613da1565b5092915050565b8082018281125f83128015821682158216171561411b5761411b613da1565b505092915050565b5f8160070b8360070b8061413957614139613de5565b5f1981147fffffffffffffffffffffffffffffffffffffffffffffffff80000000000000008314161561416e5761416e613da1565b90059392505050565b6001815b60018411156141b25780850481111561419657614196613da1565b60018416156141a457908102905b60019390931c92800261417b565b935093915050565b5f826141c857506001612480565b816141d457505f612480565b81600181146141ea57600281146141f457614210565b6001915050612480565b60ff84111561420557614205613da1565b50506001821b612480565b5060208310610133831016604e8410600b8410161715614233575081810a612480565b61423f5f198484614177565b805f190482111561425257614252613da1565b029392505050565b5f61247d60ff8416836141ba565b5f8261427657614276613de5565b5f1983147f8000000000000000000000000000000000000000000000000000000000000000831416156142ab576142ab613da1565b500590565b5f5f1982036142c1576142c1613da1565b5060010190565b60ff828116828216039081111561248057612480613da1565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f6020828403121561431e575f5ffd5b81516102ce81613b13565b80516fffffffffffffffffffffffffffffffff81168114614348575f5ffd5b919050565b5f5f6040838503121561435e575f5ffd5b61436783614329565b915061437560208401614329565b90509250929050565b60018110613b10575f5ffd5b5f5f6040838503121561439b575f5ffd5b82516143a68161437e565b602084015190925067ffffffffffffffff811115613f9a575f5ffd5b5f602082840312156143d2575f5ffd5b815180151581146102ce575f5ffd5b5f5f604083850312156143f2575f5ffd5b505080516020909101519092909150565b67ffffffffffffffff81811683821602908116908181146140f5576140f5613da1565b5f8160070b7fffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000810361445a5761445a613da1565b5f0392915050565b8051600a8110614348575f5ffd5b5f5f5f5f5f60a08688031215614484575f5ffd5b61448d86614462565b945061449b60208701614462565b9350604086015167ffffffffffffffff8111156144b6575f5ffd5b6144c288828901613f1e565b935050606086015167ffffffffffffffff8111156144de575f5ffd5b6144ea88828901613f1e565b925050608086015167ffffffffffffffff811115614506575f5ffd5b61451288828901613f1e565b9150509295509295909350565b5f60ff83168061453157614531613de5565b8060ff84160691505092915050565b5f82518060208501845e5f920191825250919050565b5f67ffffffffffffffff82111561456f5761456f613bd6565b5060051b60200190565b5f82601f830112614588575f5ffd5b8151614596613d1582614556565b8082825260208201915060208360051b8601019250858311156145b7575f5ffd5b602085015b838110156145e557805163ffffffff811681146145d7575f5ffd5b8352602092830192016145bc565b5095945050505050565b5f82601f8301126145fe575f5ffd5b815161460c613d1582614556565b8082825260208201915060208360051b86010192508583111561462d575f5ffd5b602085015b838110156145e557805160ff8116811461464a575f5ffd5b835260209283019201614632565b805160028110614348575f5ffd5b5f5f5f5f5f60a0868803121561467a575f5ffd5b855167ffffffffffffffff811115614690575f5ffd5b8601601f810188136146a0575f5ffd5b80516146ae613d1582614556565b8082825260208201915060208360051b85010192508a8311156146cf575f5ffd5b6020840193505b828410156146fa5783516146e981613b13565b8252602093840193909101906146d6565b80985050505050602086015167ffffffffffffffff81111561471a575f5ffd5b61472688828901614579565b945050604086015167ffffffffffffffff811115614742575f5ffd5b61474e888289016145ef565b935050606086015167ffffffffffffffff81111561476a575f5ffd5b614776888289016145ef565b92505061478560808701614658565b90509295509295909350565b5f5f604083850312156147a2575f5ffd5b82516147ad81613b13565b6020939093015192949293505050565b805169ffffffffffffffffffff81168114614348575f5ffd5b5f5f5f5f5f60a086880312156147ea575f5ffd5b6147f3866147bd565b60208701516040880151606089015192975090955093509150614785608087016147bd565b5f61247d83836141ba56fea2646970667358221220037f21a80973fdf8348c26885e8cf653c708fd3345322f1694eb1bacf2ea1e5164736f6c634300081c0033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "immutableReferences": {},
  "inputSourceName": "project/contracts/monetizer/facets/Swapper.sol",
  "devdoc": {
    "author": "Cooper Labs",
    "custom:contact": "security@monet.cash",
    "details": "In all the functions of this contract, one of `tokenIn` or `tokenOut` must be the stablecoin, and one of `tokenOut` or `tokenIn` must be an accepted collateral. Depending on the `tokenIn` or `tokenOut` given, the functions will either handle a mint or a burn operationIn case of a burn, they will also revert if the system does not have enough of `amountOut` for `tokenOut`. This balance must be available either directly on the contract or, when applicable, through the underlying strategies that manage the collateralFunctions here may be paused for some collateral assets (for either mint or burn), in which case they'll revertIn case of a burn again, the swap functions will revert if the call concerns a collateral that requires a whitelist but the `to` address does not have it. The quote functions will not revert in this case.Calling one of the swap functions in a burn case does not require any prior token approvalThis contract is an authorized fork of Angle's `Swapper` contract https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/transmuter/facets/Swapper.sol",
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "FailedCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InsufficientBalance(uint256,uint256)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "swapExactInput(uint256,uint256,address,address,address,uint256)": {
        "details": "`msg.sender` must have approved this contract for at least `amountIn` for `tokenIn` for mint transactions",
        "params": {
          "amountIn": "Amount of `tokenIn` to bring",
          "amountOutMin": "Minimum amount of `tokenOut` to get: if `amountOut` is inferior to this amount, the function will revert",
          "deadline": "Timestamp before which the transaction must be executed",
          "to": "Address to which `tokenOut` must be sent",
          "tokenIn": "Token to bring for the swap",
          "tokenOut": "Token to get out of the swap"
        },
        "returns": {
          "amountOut": "Amount of `tokenOut` obtained through the swap"
        }
      },
      "swapExactInputWithPermit(uint256,uint256,address,address,uint256,bytes)": {
        "details": "Can only be used to mint, hence `tokenOut` is not needed"
      },
      "swapExactOutput(uint256,uint256,address,address,address,uint256)": {
        "details": "`msg.sender` must have approved this contract for an amount bigger than what `amountIn` will be before calling this function for a mint. Approving the contract for `tokenIn` with `amountInMax` will always be enough in this case",
        "params": {
          "amountInMax": "Maximum amount of `tokenIn` to bring in order to get `amountOut` of `tokenOut`",
          "amountOut": "Amount of `tokenOut` to obtain from the swap",
          "deadline": "Timestamp before which the transaction must be executed",
          "to": "Address to which `tokenOut` must be sent",
          "tokenIn": "Token to bring for the swap",
          "tokenOut": "Token to get out of the swap"
        },
        "returns": {
          "amountIn": "Amount of `tokenIn` used to perform the swap"
        }
      },
      "swapExactOutputWithPermit(uint256,uint256,address,address,uint256,bytes)": {
        "details": "Can only be used to mint, hence `tokenOut` is not needed"
      }
    },
    "title": "Swapper",
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "3704200",
        "executionCost": "4177",
        "totalCost": "3708377"
      },
      "external": {
        "quoteIn(uint256,address,address)": "infinite",
        "quoteOut(uint256,address,address)": "infinite",
        "swapExactInput(uint256,uint256,address,address,address,uint256)": "infinite",
        "swapExactInputWithPermit(uint256,uint256,address,address,uint256,bytes)": "infinite",
        "swapExactOutput(uint256,uint256,address,address,address,uint256)": "infinite",
        "swapExactOutputWithPermit(uint256,uint256,address,address,uint256,bytes)": "infinite"
      },
      "internal": {
        "_applyFeeBurn(uint256,int64)": "infinite",
        "_applyFeeMint(uint256,int64)": "infinite",
        "_buildPermitTransferPayload(uint256,uint256,address,uint256,bytes memory,struct Collateral storage pointer)": "infinite",
        "_checkAmounts(address,struct Collateral storage pointer,uint256)": "infinite",
        "_checkHardCaps(struct Collateral storage pointer,uint256,uint256)": "infinite",
        "_computeFee(enum QuoteType,uint256,int64)": "infinite",
        "_getMint(address,uint256)": "infinite",
        "_getMintBurn(address,address,uint256)": "infinite",
        "_invertFeeBurn(uint256,int64)": "infinite",
        "_invertFeeMint(uint256,int64)": "infinite",
        "_isExact(enum QuoteType)": "142",
        "_isMint(enum QuoteType)": "131",
        "_quoteBurnExactInput(address,struct Collateral storage pointer,uint256)": "infinite",
        "_quoteBurnExactOutput(address,struct Collateral storage pointer,uint256)": "infinite",
        "_quoteFees(struct Collateral storage pointer,enum QuoteType,uint256)": "infinite",
        "_quoteMintExactInput(struct Collateral storage pointer,uint256)": "infinite",
        "_quoteMintExactOutput(struct Collateral storage pointer,uint256)": "infinite",
        "_swap(uint256,uint256,address,address,address,bool,struct Collateral storage pointer,bytes memory)": "infinite"
      }
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidChainlinkRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSwap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooBigAmountIn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooLate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooSmallAmountOut\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"quoteIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"quoteOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permitData\",\"type\":\"bytes\"}],\"name\":\"swapExactInputWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permitData\",\"type\":\"bytes\"}],\"name\":\"swapExactOutputWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Cooper Labs\",\"custom:contact\":\"security@monet.cash\",\"details\":\"In all the functions of this contract, one of `tokenIn` or `tokenOut` must be the stablecoin, and one of `tokenOut` or `tokenIn` must be an accepted collateral. Depending on the `tokenIn` or `tokenOut` given, the functions will either handle a mint or a burn operationIn case of a burn, they will also revert if the system does not have enough of `amountOut` for `tokenOut`. This balance must be available either directly on the contract or, when applicable, through the underlying strategies that manage the collateralFunctions here may be paused for some collateral assets (for either mint or burn), in which case they'll revertIn case of a burn again, the swap functions will revert if the call concerns a collateral that requires a whitelist but the `to` address does not have it. The quote functions will not revert in this case.Calling one of the swap functions in a burn case does not require any prior token approvalThis contract is an authorized fork of Angle's `Swapper` contract https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/transmuter/facets/Swapper.sol\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"swapExactInput(uint256,uint256,address,address,address,uint256)\":{\"details\":\"`msg.sender` must have approved this contract for at least `amountIn` for `tokenIn` for mint transactions\",\"params\":{\"amountIn\":\"Amount of `tokenIn` to bring\",\"amountOutMin\":\"Minimum amount of `tokenOut` to get: if `amountOut` is inferior to this amount, the function will revert\",\"deadline\":\"Timestamp before which the transaction must be executed\",\"to\":\"Address to which `tokenOut` must be sent\",\"tokenIn\":\"Token to bring for the swap\",\"tokenOut\":\"Token to get out of the swap\"},\"returns\":{\"amountOut\":\"Amount of `tokenOut` obtained through the swap\"}},\"swapExactInputWithPermit(uint256,uint256,address,address,uint256,bytes)\":{\"details\":\"Can only be used to mint, hence `tokenOut` is not needed\"},\"swapExactOutput(uint256,uint256,address,address,address,uint256)\":{\"details\":\"`msg.sender` must have approved this contract for an amount bigger than what `amountIn` will be before calling this function for a mint. Approving the contract for `tokenIn` with `amountInMax` will always be enough in this case\",\"params\":{\"amountInMax\":\"Maximum amount of `tokenIn` to bring in order to get `amountOut` of `tokenOut`\",\"amountOut\":\"Amount of `tokenOut` to obtain from the swap\",\"deadline\":\"Timestamp before which the transaction must be executed\",\"to\":\"Address to which `tokenOut` must be sent\",\"tokenIn\":\"Token to bring for the swap\",\"tokenOut\":\"Token to get out of the swap\"},\"returns\":{\"amountIn\":\"Amount of `tokenIn` used to perform the swap\"}},\"swapExactOutputWithPermit(uint256,uint256,address,address,uint256,bytes)\":{\"details\":\"Can only be used to mint, hence `tokenOut` is not needed\"}},\"title\":\"Swapper\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"quoteIn(uint256,address,address)\":{\"notice\":\"Simulates what a call to `swapExactInput` with `amountIn` of `tokenIn` for `tokenOut` would give. If called right before and at the same block, the `amountOut` outputted by this function is exactly the amount that will be obtained with `swapExactInput`\"},\"quoteOut(uint256,address,address)\":{\"notice\":\"Simulates what a call to `swapExactOutput` for `amountOut` of `tokenOut` with `tokenIn` would give. If called right before and at the same block, the `amountIn` outputted by this function is exactly the amount that will be obtained with `swapExactOutput`\"},\"swapExactInput(uint256,uint256,address,address,address,uint256)\":{\"notice\":\"Swaps (that is to say mints or burns) an exact amount of `tokenIn` for an amount of `tokenOut`\"},\"swapExactInputWithPermit(uint256,uint256,address,address,uint256,bytes)\":{\"notice\":\"Same as `swapExactInput`, but using Permit2 signatures for `tokenIn`\"},\"swapExactOutput(uint256,uint256,address,address,address,uint256)\":{\"notice\":\"Swaps (that is to say mints or burns) an amount of `tokenIn` for an exact amount of `tokenOut`\"},\"swapExactOutputWithPermit(uint256,uint256,address,address,uint256,bytes)\":{\"notice\":\"Same as `swapExactOutput`, but using Permit2 signatures for `tokenIn`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project/contracts/monetizer/facets/Swapper.sol\":\"Swapper\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\"npm/@openzeppelin/contracts-upgradeable@5.4.0/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/\",\"project/:@helpers/=project/libs/helpers/\",\"project/:@openzeppelin/contracts-upgradeable/=npm/@openzeppelin/contracts-upgradeable@5.4.0/\",\"project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/\",\"project/:contracts/=project/contracts/\"]},\"sources\":{\"npm/@openzeppelin/contracts@5.4.0/access/manager/AuthorityUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/manager/AuthorityUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\n\\nlibrary AuthorityUtils {\\n    /**\\n     * @dev Since `AccessManager` implements an extended IAuthority interface, invoking `canCall` with backwards compatibility\\n     * for the preexisting `IAuthority` interface requires special care to avoid reverting on insufficient return data.\\n     * This helper function takes care of invoking `canCall` in a backwards compatible way without reverting.\\n     */\\n    function canCallWithDelay(\\n        address authority,\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) internal view returns (bool immediate, uint32 delay) {\\n        bytes memory data = abi.encodeCall(IAuthority.canCall, (caller, target, selector));\\n\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x00)\\n            mstore(0x20, 0x00)\\n\\n            if staticcall(gas(), authority, add(data, 0x20), mload(data), 0x00, 0x40) {\\n                immediate := mload(0x00)\\n                delay := mload(0x20)\\n\\n                // If delay does not fit in a uint32, return 0 (no delay)\\n                // equivalent to: if gt(delay, 0xFFFFFFFF) { delay := 0 }\\n                delay := mul(delay, iszero(shr(32, delay)))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05fd06ae5bca9dc7470fb2dfae764315c81a84f591e86be6fec0c115474edc6c\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/access/manager/IAccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/manager/IAccessManager.sol)\\n\\npragma solidity >=0.8.4;\\n\\ninterface IAccessManager {\\n    /**\\n     * @dev A delayed operation was scheduled.\\n     */\\n    event OperationScheduled(\\n        bytes32 indexed operationId,\\n        uint32 indexed nonce,\\n        uint48 schedule,\\n        address caller,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev A scheduled operation was executed.\\n     */\\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev A scheduled operation was canceled.\\n     */\\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev Informational labelling for a roleId.\\n     */\\n    event RoleLabel(uint64 indexed roleId, string label);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `roleId`.\\n     *\\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\\n     * otherwise it indicates the execution delay for this account and roleId is updated.\\n     */\\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\\n\\n    /**\\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\\n     */\\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\\n\\n    /**\\n     * @dev Role acting as admin over a given `roleId` is updated.\\n     */\\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\\n\\n    /**\\n     * @dev Role acting as guardian over a given `roleId` is updated.\\n     */\\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\\n\\n    /**\\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\\n     */\\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\\n\\n    /**\\n     * @dev Target mode is updated (true = closed, false = open).\\n     */\\n    event TargetClosed(address indexed target, bool closed);\\n\\n    /**\\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\\n     */\\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\\n\\n    /**\\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\\n     */\\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\\n\\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\\n    error AccessManagerNotScheduled(bytes32 operationId);\\n    error AccessManagerNotReady(bytes32 operationId);\\n    error AccessManagerExpired(bytes32 operationId);\\n    error AccessManagerLockedRole(uint64 roleId);\\n    error AccessManagerBadConfirmation();\\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\\n    error AccessManagerUnauthorizedConsume(address target);\\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\\n\\n    /**\\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\\n     * & {execute} workflow.\\n     *\\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\\n     * for future execution.\\n     *\\n     * If `allowed` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\\n     * the operation can be executed if and only if delay is greater than 0.\\n     *\\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\\n     *\\n     * NOTE: This function does not report the permissions of the admin functions in the manager itself. These are defined by the\\n     * {AccessManager} documentation.\\n     */\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) external view returns (bool allowed, uint32 delay);\\n\\n    /**\\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\\n     *\\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\\n     * disabling any scheduling usage.\\n     */\\n    function expiration() external view returns (uint32);\\n\\n    /**\\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\\n     * accidental increase). Defaults to 5 days.\\n     */\\n    function minSetback() external view returns (uint32);\\n\\n    /**\\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\\n     *\\n     * NOTE: When the manager itself is closed, admin functions are still accessible to avoid locking the contract.\\n     */\\n    function isTargetClosed(address target) external view returns (bool);\\n\\n    /**\\n     * @dev Get the role required to call a function.\\n     */\\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\\n     */\\n    function getTargetAdminDelay(address target) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the id of the role that acts as an admin for the given role.\\n     *\\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\\n     * an operation that is restricted to this role.\\n     */\\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role that acts as a guardian for a given role.\\n     *\\n     * The guardian permission allows canceling operations that have been scheduled under the role.\\n     */\\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role current grant delay.\\n     *\\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\\n     */\\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\\n     * level.\\n     *\\n     * Returns:\\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\\n     * [1] Current execution delay for the account.\\n     * [2] Pending execution delay for the account.\\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\\n     */\\n    function getAccess(\\n        uint64 roleId,\\n        address account\\n    ) external view returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect);\\n\\n    /**\\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\\n     */\\n    function hasRole(uint64 roleId, address account) external view returns (bool isMember, uint32 executionDelay);\\n\\n    /**\\n     * @dev Give a label to a role, for improved role discoverability by UIs.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleLabel} event.\\n     */\\n    function labelRole(uint64 roleId, string calldata label) external;\\n\\n    /**\\n     * @dev Add `account` to `roleId`, or change its execution delay.\\n     *\\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\\n     *\\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - granted role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\\n\\n    /**\\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\\n     * no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - revoked role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function revokeRole(uint64 roleId, address account) external;\\n\\n    /**\\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\\n     * the role this call has no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\\n\\n    /**\\n     * @dev Change admin role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleAdminChanged} event\\n     */\\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\\n\\n    /**\\n     * @dev Change guardian role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGuardianChanged} event\\n     */\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\\n\\n    /**\\n     * @dev Update the delay for granting a `roleId`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\\n     */\\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\\n\\n    /**\\n     * @dev Set the delay for changing the configuration of a given target contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the closed flag for a contract.\\n     *\\n     * Closing the manager itself won't disable access to admin methods to avoid locking the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function setTargetClosed(address target, bool closed) external;\\n\\n    /**\\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\\n     */\\n    function getSchedule(bytes32 id) external view returns (uint48);\\n\\n    /**\\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\\n     * been scheduled.\\n     */\\n    function getNonce(bytes32 id) external view returns (uint32);\\n\\n    /**\\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\\n     * required for the caller. The special value zero will automatically set the earliest possible time.\\n     *\\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\\n     *\\n     * Emits a {OperationScheduled} event.\\n     *\\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\\n     * contract if it is using standard Solidity ABI encoding.\\n     */\\n    function schedule(\\n        address target,\\n        bytes calldata data,\\n        uint48 when\\n    ) external returns (bytes32 operationId, uint32 nonce);\\n\\n    /**\\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\\n     * execution delay is 0.\\n     *\\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\\n     *\\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\\n     */\\n    function execute(address target, bytes calldata data) external payable returns (uint32);\\n\\n    /**\\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\\n     * operation that is cancelled.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\\n     *\\n     * Emits a {OperationCanceled} event.\\n     */\\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\\n\\n    /**\\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\\n     *\\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\\n     * with all the verifications that it implies.\\n     *\\n     * Emit a {OperationExecuted} event.\\n     */\\n    function consumeScheduledOp(address caller, bytes calldata data) external;\\n\\n    /**\\n     * @dev Hashing function for delayed operations.\\n     */\\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\\n\\n    /**\\n     * @dev Changes the authority of a target managed by this manager instance.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     */\\n    function updateAuthority(address target, address newAuthority) external;\\n}\\n\",\"keccak256\":\"0x640fe2b6e5201c47322d458f81078d6dcf23ccf9954f8995b1b7bfbec0eb1421\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/access/manager/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/manager/IAuthority.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Standard interface for permissioning originally defined in Dappsys.\\n */\\ninterface IAuthority {\\n    /**\\n     * @dev Returns true if the caller can invoke on a target the function identified by a function selector.\\n     */\\n    function canCall(address caller, address target, bytes4 selector) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x9c9a58dd831b9bb4a0ea47d96b53c13ab9a6e4270a518ea395b1424092fd74dc\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                revert(add(returndata, 0x20), mload(returndata))\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6d0ae6e206645341fd122d278c2cb643dea260c190531f2f3f6a0426e77b00c0\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"project/contracts/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.28;\\n\\n/// @title IManager\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This interface is an authorized fork of Angle's `IManager` interface\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/interfaces/IManager.sol\\ninterface IManager {\\n  /// @notice Returns the amount of collateral managed by the Manager\\n  /// @return balances Balances of all the subCollaterals handled by the manager\\n  /// @dev MUST NOT revert\\n  function totalAssets() external view returns (uint256[] memory balances, uint256 totalValue);\\n\\n  /// @notice Hook to invest `amount` of `collateral`\\n  /// @dev MUST revert if the manager cannot accept these funds\\n  /// @dev MUST have received the funds beforehand\\n  function invest(uint256 amount) external;\\n\\n  /// @notice Sends `amount` of `collateral` to the `to` address\\n  /// @dev Called when `tokenP` are burnt and during redemptions\\n  //  @dev MUST revert if there are not funds enough available\\n  /// @dev MUST be callable only by the monetizer\\n  function release(address asset, address to, uint256 amount) external;\\n\\n  /// @notice Gives the maximum amount of collateral immediately available for a transfer\\n  /// @dev Useful for integrators using `quoteIn` and `quoteOut`\\n  function maxAvailable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x32920e2bfb61211297125a9532e67e7cb09c50ed69bca82b07c6639126e7fba6\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/IMonetizerOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.28;\\n\\n/// @title IMonetizerOracle\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This interface is an authorized fork of Angle's `ITransmuterOracle` interface\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/interfaces/ITransmuterOracle.sol\\ninterface IMonetizerOracle {\\n  /// @notice Reads the oracle value for asset to use in a redemption to compute the collateral ratio\\n  function readRedemption() external view returns (uint256);\\n\\n  /// @notice Reads the oracle value for asset to use in a mint. It should be comprehensive of the\\n  /// deviation from the target price\\n  function readMint() external view returns (uint256);\\n\\n  /// @notice Reads the oracle value for asset to use in a burn transaction as well as the ratio\\n  /// between the current price and the target price for the asset\\n  function readBurn() external view returns (uint256 oracleValue, uint256 ratio);\\n\\n  /// @notice Reads the oracle value for asset\\n  function read() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbff2b1ec3e77553db6343868a223416828db8c3eafa317b4b915da4a3d8ff56a\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.28;\\n\\n/// @title ISwapper\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This interface is an authorized fork of Angle's `ISwapper` interface\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/interfaces/ISwapper.sol\\ninterface ISwapper {\\n  /// @notice Swaps (that is to say mints or burns) an exact amount of `tokenIn` for an amount of `tokenOut`\\n  /// @param amountIn Amount of `tokenIn` to bring\\n  /// @param amountOutMin Minimum amount of `tokenOut` to get: if `amountOut` is inferior to this amount, the\\n  /// function will revert\\n  /// @param tokenIn Token to bring for the swap\\n  /// @param tokenOut Token to get out of the swap\\n  /// @param to Address to which `tokenOut` must be sent\\n  /// @param deadline Timestamp before which the transaction must be executed\\n  /// @return amountOut Amount of `tokenOut` obtained through the swap\\n  function swapExactInput(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address tokenIn,\\n    address tokenOut,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (uint256 amountOut);\\n\\n  /// @notice Same as `swapExactInput`, but using Permit2 signatures for `tokenIn`\\n  /// @dev Can only be used to mint, hence `tokenOut` is not needed\\n  function swapExactInputWithPermit(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address tokenIn,\\n    address to,\\n    uint256 deadline,\\n    bytes calldata permitData\\n  )\\n    external\\n    returns (uint256 amountOut);\\n\\n  /// @notice Swaps (that is to say mints or burns) an amount of `tokenIn` for an exact amount of `tokenOut`\\n  /// @param amountOut Amount of `tokenOut` to obtain from the swap\\n  /// @param amountInMax Maximum amount of `tokenIn` to bring in order to get `amountOut` of `tokenOut`\\n  /// @param tokenIn Token to bring for the swap\\n  /// @param tokenOut Token to get out of the swap\\n  /// @param to Address to which `tokenOut` must be sent\\n  /// @param deadline Timestamp before which the transaction must be executed\\n  /// @return amountIn Amount of `tokenIn` used to perform the swap\\n  function swapExactOutput(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address tokenIn,\\n    address tokenOut,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (uint256 amountIn);\\n\\n  /// @notice Same as `swapExactOutput`, but using Permit2 signatures for `tokenIn`\\n  /// @dev Can only be used to mint, hence `tokenOut` is not needed\\n  function swapExactOutputWithPermit(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address tokenIn,\\n    address to,\\n    uint256 deadline,\\n    bytes calldata permitData\\n  )\\n    external\\n    returns (uint256 amountIn);\\n\\n  /// @notice Simulates what a call to `swapExactInput` with `amountIn` of `tokenIn` for `tokenOut` would give.\\n  /// If called right before and at the same block, the `amountOut` outputted by this function is exactly the\\n  /// amount that will be obtained with `swapExactInput`\\n  function quoteIn(uint256 amountIn, address tokenIn, address tokenOut) external view returns (uint256 amountOut);\\n\\n  /// @notice Simulates what a call to `swapExactOutput` for `amountOut` of `tokenOut` with `tokenIn` would give.\\n  /// If called right before and at the same block, the `amountIn` outputted by this function is exactly the\\n  /// amount that will be obtained with `swapExactOutput`\\n  function quoteOut(uint256 amountOut, address tokenIn, address tokenOut) external view returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0xfebb2f29fb7d5cd2c8e934b67b00eae0a76afc98282b6641c6fdf473d5dd5770\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/ITokenP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.28;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title ITokenP\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @notice Interface for the stablecoins `tokenP` contracts\\n/// @dev This interface is an authorized fork of Angle's `IAgToken` interface\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/interfaces/IAgToken.sol\\ninterface ITokenP is IERC20 {\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    MINTER ROLE ONLY FUNCTIONS                                            \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Lets a whitelisted contract mint tokenPs\\n  /// @param account Address to mint to\\n  /// @param amount Amount to mint\\n  function mint(address account, uint256 amount) external;\\n\\n  /// @notice Burns `amount` tokens from a `burner` address after being asked to by `sender`\\n  /// @param amount Amount of tokens to burn\\n  /// @param burner Address to burn from\\n  /// @param sender Address which requested the burn from `burner`\\n  /// @dev This method is to be called by a contract with the minter right after being requested\\n  /// to do so by a `sender` address willing to burn tokens from another `burner` address\\n  /// @dev The method checks the allowance between the `sender` and the `burner`\\n  function burnFrom(uint256 amount, address burner, address sender) external;\\n\\n  /// @notice Burns `amount` tokens from a `burner` address\\n  /// @param amount Amount of tokens to burn\\n  /// @param burner Address to burn from\\n  /// @dev This method is to be called by a contract with a minter right on the tokenP after being\\n  /// requested to do so by an address willing to burn tokens from its address\\n  function burnSelf(uint256 amount, address burner) external;\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    EXTERNAL FUNCTIONS                                                \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Amount of decimals of the stablecoin\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x89d9b377afd760292bc2b92cfa9ab66d44018a4c143eff3ad91ab53091d4fa22\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x94da577160ebb1bfeb7008676c8e7d43dda926d9c0beee29077e9ed774707373\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/coinbase/ICbETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title ICbETH\\n/// @notice Interface for the `cbETH` contract\\ninterface ICbETH {\\n  function exchangeRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb159341cb0e25c478912b274cdda2d50fa84692aeac87b6823d281aaea2aed04\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/frax/ISfrxETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title ISfrxETH\\n/// @notice Interface for the `sfrxETH` contract\\ninterface ISfrxETH {\\n  function pricePerShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x914cbea276f817c7db62bfca21e15bd8f7892faa9f39d86baaef574cf12b859f\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/keyring/IKeyringGuard.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title IKeyringGuard\\n/// @notice Interface for the `KeyringGuard` contract\\ninterface IKeyringGuard {\\n  function isAuthorized(address from, address to) external returns (bool passed);\\n}\\n\",\"keccak256\":\"0x30bdab602ba0a6e2571372803ae35f7bebcc354d69408be627c04c57f7071f90\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/lido/IStETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title IStETH\\n/// @notice Interface for the `StETH` contract\\ninterface IStETH {\\n  function getPooledEthByShares(uint256 _sharesAmount) external view returns (uint256);\\n\\n  function submit(address) external payable returns (uint256);\\n\\n  function getSharesByPooledEth(uint256 _ethAmount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf21e3d8bdadc236b34bf2122b0e0b939d2d6bb6e2889b508636cbb7b84f59680\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/morpho/IMorphoOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title IMorphoOracle\\n/// @notice Interface for the oracle contracts used within Morpho\\ninterface IMorphoOracle {\\n  function price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0d1849803b554763f1dce55eba5a6e8d7c5b12d4cc8dfe23637e827d2ee91d17\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/permit2/IPermit2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\n/// @notice The token and amount details for a transfer signed in the permit transfer signature\\nstruct TokenPermissions {\\n  // ERC20 token address\\n  address token;\\n  // the maximum amount that can be spent\\n  uint256 amount;\\n}\\n\\n/// @notice The signed permit message for a single token transfer\\nstruct PermitTransferFrom {\\n  TokenPermissions permitted;\\n  // a unique value for every token owner's signature to prevent signature replays\\n  uint256 nonce;\\n  // deadline on the permit signature\\n  uint256 deadline;\\n}\\n\\n/// @notice Specifies the recipient address and amount for batched transfers.\\n/// @dev Recipients and amounts correspond to the index of the signed token permissions array.\\n/// @dev Reverts if the requested amount is greater than the permitted signed amount.\\nstruct SignatureTransferDetails {\\n  // recipient address\\n  address to;\\n  // spender requested amount\\n  uint256 requestedAmount;\\n}\\n\\n/// @title SignatureTransfer\\n/// @notice Handles ERC20 token transfers through signature based actions\\n/// @dev Requires user's token approval on the Permit2 contract\\ninterface IPermit2 {\\n  /// @notice Transfers a token using a signed permit message\\n  /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n  /// @param permit The permit data signed over by the owner\\n  /// @param owner The owner of the tokens to transfer\\n  /// @param transferDetails The spender's requested transfer details for the permitted token\\n  /// @param signature The signature to verify\\n  function permitTransferFrom(\\n    PermitTransferFrom memory permit,\\n    SignatureTransferDetails calldata transferDetails,\\n    address owner,\\n    bytes calldata signature\\n  )\\n    external;\\n}\\n\",\"keccak256\":\"0x47665656f21c6e4998c747b4315b7196336bd529bdf1010ad06f3ba634242d1a\",\"license\":\"MIT\"},\"project/contracts/interfaces/external/rocketPool/IRETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title IRETH\\n/// @notice Interface for the `rETH` contract\\ninterface IRETH {\\n  function getExchangeRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x567a378e95d40160e297c1adb617ccaa69c03e49c4ad72a6ce651dd43cdbd5cd\",\"license\":\"GPL-3.0\"},\"project/contracts/monetizer/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IAccessManager } from \\\"@openzeppelin/contracts/access/manager/IAccessManager.sol\\\";\\nimport { ITokenP } from \\\"contracts/interfaces/ITokenP.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                        ENUMS                                                      \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\nenum FacetCutAction {\\n  Add,\\n  Replace,\\n  Remove\\n}\\n\\nenum ManagerType {\\n  EXTERNAL\\n}\\n\\nenum ActionType {\\n  Mint,\\n  Burn,\\n  Redeem\\n}\\n\\nenum TrustedType {\\n  Updater,\\n  Seller\\n}\\n\\nenum QuoteType {\\n  MintExactInput,\\n  MintExactOutput,\\n  BurnExactInput,\\n  BurnExactOutput\\n}\\n\\nenum OracleReadType {\\n  CHAINLINK_FEEDS,\\n  EXTERNAL,\\n  NO_ORACLE,\\n  STABLE,\\n  WSTETH,\\n  CBETH,\\n  RETH,\\n  SFRXETH,\\n  MAX,\\n  MORPHO_ORACLE\\n}\\n\\nenum OracleQuoteType {\\n  UNIT,\\n  TARGET\\n}\\n\\nenum WhitelistType {\\n  BACKED\\n}\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                    STRUCTS                                                     \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\nstruct Permit2Details {\\n  address to; // Address that will receive the funds\\n  uint256 nonce; // Nonce of the transaction\\n  bytes signature; // Permit signature of the user\\n}\\n\\nstruct FacetCut {\\n  address facetAddress; // Facet contract address\\n  FacetCutAction action; // Can be add, remove or replace\\n  bytes4[] functionSelectors; // Ex. bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n}\\n\\nstruct Facet {\\n  address facetAddress; // Facet contract address\\n  bytes4[] functionSelectors; // Ex. bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n}\\n\\nstruct FacetInfo {\\n  address facetAddress; // Facet contract address\\n  uint16 selectorPosition; // Position in the list of all selectors\\n}\\n\\nstruct DiamondStorage {\\n  bytes4[] selectors; // List of all available selectors\\n  mapping(bytes4 => FacetInfo) selectorInfo; // Selector to (address, position in list)\\n  IAccessManager accessManager; // Contract handling access management\\n}\\n\\nstruct ImplementationStorage {\\n  address implementation; // Dummy implementation address for Etherscan usability\\n}\\n\\nstruct ManagerStorage {\\n  IERC20[] subCollaterals; // Subtokens handled by the manager or strategies\\n  bytes config; // Additional configuration data\\n}\\n\\nstruct Collateral {\\n  uint8 isManaged; // If the collateral is managed through external strategies\\n  uint8 isMintLive; // If minting from this asset is unpaused\\n  uint8 isBurnLive; // If burning to this asset is unpaused\\n  uint8 decimals; // IERC20Metadata(collateral).decimals()\\n  uint8 onlyWhitelisted; // If only whitelisted addresses can burn or redeem for this token\\n  uint216 normalizedStables; // Normalized amount of stablecoins issued from this collateral\\n  uint64[] xFeeMint; // Increasing exposures in [0,BASE_9[\\n  int64[] yFeeMint; // Mint fees at the exposures specified in `xFeeMint`\\n  uint64[] xFeeBurn; // Decreasing exposures in ]0,BASE_9]\\n  int64[] yFeeBurn; // Burn fees at the exposures specified in `xFeeBurn`\\n  bytes oracleConfig; // Data about the oracle used for the collateral\\n  bytes whitelistData; // For whitelisted collateral, data used to verify whitelists\\n  ManagerStorage managerData; // For managed collateral, data used to handle the strategies\\n  uint256 stablecoinCap; // Cap on the amount of stablecoins that can be issued from this collateral\\n}\\n\\nstruct MonetizerStorage {\\n  ITokenP tokenP; // tokenP handled by the system\\n  uint8 isRedemptionLive; // If redemption is unpaused\\n  uint8 statusReentrant; // If call is reentrant or not\\n  bool consumingSchedule; // If the contract is consuming a scheduled operation\\n  uint128 normalizedStables; // Normalized amount of stablecoins issued by the system\\n  uint128 normalizer; // To reconcile `normalizedStables` values with the actual amount\\n  address[] collateralList; // List of collateral assets supported by the system\\n  uint64[] xRedemptionCurve; // Increasing collateral ratios > 0\\n  int64[] yRedemptionCurve; // Value of the redemption fees at `xRedemptionCurve`\\n  mapping(address => Collateral) collaterals; // Maps a collateral asset to its parameters\\n  mapping(address => uint256) isTrusted; // If an address is trusted to update the normalizer value\\n  mapping(address => uint256) isSellerTrusted; // If an address is trusted to sell accruing reward tokens or to run\\n    // keeper jobs on oracles\\n  mapping(WhitelistType => mapping(address => uint256)) isWhitelistedForType;\\n}\\n// Whether an address is whitelisted for a specific whitelist type\\n\",\"keccak256\":\"0xd9e3a4c1cff68115a684d79357d068f8a52b6d6416ae3ecc76795545fff22ea7\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/facets/AccessManagedModifiers.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { LibDiamond } from \\\"../libraries/LibDiamond.sol\\\";\\nimport { LibStorage as s, MonetizerStorage } from \\\"../libraries/LibStorage.sol\\\";\\nimport \\\"../../utils/Errors.sol\\\";\\nimport \\\"../../utils/Constants.sol\\\";\\n\\n/// @title AccessManagedModifiers\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This contract is an authorized fork of Angle's `AccessControlModifiers` contract\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/facets/AccessControlModifiers.sol\\n/// update access logic to use OpenZeppelin's `AccessManaged` logic\\ncontract AccessManagedModifiers {\\n  /// @notice Checks whether the `msg.sender` can call a function with a given selector\\n  modifier restricted() {\\n    if (!LibDiamond.checkCanCall(msg.sender, msg.data)) revert AccessManagedUnauthorized(msg.sender);\\n    _;\\n  }\\n\\n  /// @notice Prevents a contract from calling itself, directly or indirectly\\n  /// @dev This implementation is an adaptation of the OpenZepellin `ReentrancyGuard` for the purpose of this\\n  /// Diamond Proxy system. The base implementation can be found here\\n  /// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol\\n  modifier nonReentrant() {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    // Reentrant protection\\n    // On the first call, `ts.statusReentrant` will be `NOT_ENTERED`\\n    if (ts.statusReentrant == ENTERED) revert ReentrantCall();\\n    // Any calls to the `nonReentrant` modifier after this point will fail\\n    ts.statusReentrant = ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    ts.statusReentrant = NOT_ENTERED;\\n  }\\n}\\n\",\"keccak256\":\"0x14995f4b638c37aa8e93cf2fc64227b2bfa37276d49e66ffe6e64f35a0a8d93b\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/facets/Swapper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { ITokenP } from \\\"contracts/interfaces/ITokenP.sol\\\";\\nimport { ISwapper } from \\\"contracts/interfaces/ISwapper.sol\\\";\\nimport { IPermit2, PermitTransferFrom } from \\\"contracts/interfaces/external/permit2/IPermit2.sol\\\";\\nimport { SignatureTransferDetails, TokenPermissions } from \\\"contracts/interfaces/external/permit2/IPermit2.sol\\\";\\n\\nimport { AccessManagedModifiers } from \\\"./AccessManagedModifiers.sol\\\";\\nimport { LibHelpers } from \\\"../libraries/LibHelpers.sol\\\";\\nimport { LibManager } from \\\"../libraries/LibManager.sol\\\";\\nimport { LibOracle } from \\\"../libraries/LibOracle.sol\\\";\\nimport { LibStorage as s } from \\\"../libraries/LibStorage.sol\\\";\\nimport { LibWhitelist } from \\\"../libraries/LibWhitelist.sol\\\";\\n\\nimport \\\"../../utils/Constants.sol\\\";\\nimport \\\"../../utils/Errors.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\n// Struct to help storing local variables to avoid stack too deep issues\\nstruct LocalVariables {\\n  bool isMint;\\n  bool isExact;\\n  uint256 lowerExposure;\\n  uint256 upperExposure;\\n  int256 lowerFees;\\n  int256 upperFees;\\n  uint256 amountToNextBreakPoint;\\n  uint256 stablecoinsIssued;\\n  uint256 otherStablecoinSupply;\\n}\\n\\n/// @title Swapper\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev In all the functions of this contract, one of `tokenIn` or `tokenOut` must be the stablecoin, and\\n/// one of `tokenOut` or `tokenIn` must be an accepted collateral. Depending on the `tokenIn` or `tokenOut` given,\\n/// the functions will either handle a mint or a burn operation\\n/// @dev In case of a burn, they will also revert if the system does not have enough of `amountOut` for `tokenOut`.\\n/// This balance must be available either directly on the contract or, when applicable, through the underlying\\n/// strategies that manage the collateral\\n/// @dev Functions here may be paused for some collateral assets (for either mint or burn), in which case they'll\\n/// revert\\n/// @dev In case of a burn again, the swap functions will revert if the call concerns a collateral that requires a\\n/// whitelist but the `to` address does not have it. The quote functions will not revert in this case.\\n/// @dev Calling one of the swap functions in a burn case does not require any prior token approval\\n/// @dev This contract is an authorized fork of Angle's `Swapper` contract\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/transmuter/facets/Swapper.sol\\ncontract Swapper is ISwapper, AccessManagedModifiers {\\n  using SafeERC20 for IERC20;\\n  using SafeCast for uint256;\\n  using Address for address;\\n  using Math for uint256;\\n\\n  // The `to` address is not indexed as there cannot be 4 indexed addresses in an event.\\n  event Swap(\\n    address indexed tokenIn,\\n    address indexed tokenOut,\\n    uint256 amountIn,\\n    uint256 amountOut,\\n    address indexed from,\\n    address to\\n  );\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    EXTERNAL ACTION FUNCTIONS                                            \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  // For the four functions below, a value of `0` for the `deadline` parameters means that there will be no timestamp\\n  // check for when the swap is actually executed.\\n\\n  /// @inheritdoc ISwapper\\n  /// @dev `msg.sender` must have approved this contract for at least `amountIn` for `tokenIn` for mint transactions\\n  function swapExactInput(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address tokenIn,\\n    address tokenOut,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (uint256 amountOut)\\n  {\\n    (bool mint, Collateral storage collatInfo) = _getMintBurn(tokenIn, tokenOut, deadline);\\n    amountOut =\\n      mint ? _quoteMintExactInput(collatInfo, amountIn) : _quoteBurnExactInput(tokenOut, collatInfo, amountIn);\\n    if (amountOut < amountOutMin) revert TooSmallAmountOut();\\n    _swap(amountIn, amountOut, tokenIn, tokenOut, to, mint, collatInfo, \\\"\\\");\\n  }\\n\\n  /// @inheritdoc ISwapper\\n  function swapExactInputWithPermit(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address tokenIn,\\n    address to,\\n    uint256 deadline,\\n    bytes memory permitData\\n  )\\n    external\\n    returns (uint256 amountOut)\\n  {\\n    (address tokenOut, Collateral storage collatInfo) = _getMint(tokenIn, deadline);\\n    amountOut = _quoteMintExactInput(collatInfo, amountIn);\\n    if (amountOut < amountOutMin) revert TooSmallAmountOut();\\n    permitData = _buildPermitTransferPayload(amountIn, amountIn, tokenIn, deadline, permitData, collatInfo);\\n    _swap(amountIn, amountOut, tokenIn, tokenOut, to, true, collatInfo, permitData);\\n  }\\n\\n  /// @inheritdoc ISwapper\\n  /// @dev `msg.sender` must have approved this contract for an amount bigger than what `amountIn` will\\n  /// be before calling this function for a mint. Approving the contract for `tokenIn` with `amountInMax`\\n  /// will always be enough in this case\\n  function swapExactOutput(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address tokenIn,\\n    address tokenOut,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (uint256 amountIn)\\n  {\\n    (bool mint, Collateral storage collatInfo) = _getMintBurn(tokenIn, tokenOut, deadline);\\n    amountIn =\\n      mint ? _quoteMintExactOutput(collatInfo, amountOut) : _quoteBurnExactOutput(tokenOut, collatInfo, amountOut);\\n    if (amountIn > amountInMax) revert TooBigAmountIn();\\n    _swap(amountIn, amountOut, tokenIn, tokenOut, to, mint, collatInfo, \\\"\\\");\\n  }\\n\\n  /// @inheritdoc ISwapper\\n  function swapExactOutputWithPermit(\\n    uint256 amountOut,\\n    uint256 amountInMax,\\n    address tokenIn,\\n    address to,\\n    uint256 deadline,\\n    bytes memory permitData\\n  )\\n    public\\n    returns (uint256 amountIn)\\n  {\\n    (address tokenOut, Collateral storage collatInfo) = _getMint(tokenIn, deadline);\\n    amountIn = _quoteMintExactOutput(collatInfo, amountOut);\\n    if (amountIn > amountInMax) revert TooBigAmountIn();\\n    permitData = _buildPermitTransferPayload(amountIn, amountInMax, tokenIn, deadline, permitData, collatInfo);\\n    _swap(amountIn, amountOut, tokenIn, tokenOut, to, true, collatInfo, permitData);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    VIEW HELPERS                                                   \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  // If these functions return a 0 `amountOut` or `amountIn` value, then calling one of the swap functions above\\n  // will not do anything.\\n\\n  /// @inheritdoc ISwapper\\n  function quoteIn(uint256 amountIn, address tokenIn, address tokenOut) external view returns (uint256 amountOut) {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    (bool mint, Collateral storage collatInfo) = _getMintBurn(tokenIn, tokenOut, block.timestamp);\\n    if (mint) {\\n      amountOut = _quoteMintExactInput(collatInfo, amountIn);\\n      _checkHardCaps(collatInfo, amountOut, ts.normalizer);\\n    } else {\\n      amountOut = _quoteBurnExactInput(tokenOut, collatInfo, amountIn);\\n      _checkAmounts(tokenOut, collatInfo, amountOut);\\n    }\\n  }\\n\\n  /// @inheritdoc ISwapper\\n  function quoteOut(uint256 amountOut, address tokenIn, address tokenOut) external view returns (uint256 amountIn) {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    (bool mint, Collateral storage collatInfo) = _getMintBurn(tokenIn, tokenOut, block.timestamp);\\n    if (mint) {\\n      _checkHardCaps(collatInfo, amountOut, ts.normalizer);\\n      return _quoteMintExactOutput(collatInfo, amountOut);\\n    } else {\\n      _checkAmounts(tokenOut, collatInfo, amountOut);\\n      return _quoteBurnExactOutput(tokenOut, collatInfo, amountOut);\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    INTERNAL ACTIONS                                                 \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Processes the internal metric updates and the transfers following mint or burn operations\\n  function _swap(\\n    uint256 amountIn,\\n    uint256 amountOut,\\n    address tokenIn,\\n    address tokenOut,\\n    address to,\\n    bool mint,\\n    Collateral storage collatInfo,\\n    bytes memory permitData\\n  )\\n    internal\\n    nonReentrant\\n  {\\n    if (amountIn > 0 && amountOut > 0) {\\n      MonetizerStorage storage ts = s.transmuterStorage();\\n      if (mint) {\\n        uint128 changeAmount = (amountOut.mulDiv(BASE_27, ts.normalizer, Math.Rounding.Ceil)).toUint128();\\n        // The amount of stablecoins issued from a collateral are not stored as absolute variables, but\\n        // as variables normalized by a `normalizer`\\n        collatInfo.normalizedStables = collatInfo.normalizedStables + uint216(changeAmount);\\n        _checkHardCaps(collatInfo, 0, ts.normalizer);\\n        ts.normalizedStables = ts.normalizedStables + changeAmount;\\n        if (permitData.length > 0) {\\n          PERMIT_2.functionCall(permitData);\\n        } else if (collatInfo.isManaged > 0) {\\n          IERC20(tokenIn).safeTransferFrom(\\n            msg.sender, LibManager.transferRecipient(collatInfo.managerData.config), amountIn\\n          );\\n        } else {\\n          IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);\\n        }\\n        if (collatInfo.isManaged > 0) {\\n          LibManager.invest(amountIn, collatInfo.managerData.config);\\n        }\\n        ITokenP(tokenOut).mint(to, amountOut);\\n      } else {\\n        if (collatInfo.onlyWhitelisted > 0 && !LibWhitelist.checkWhitelist(collatInfo.whitelistData, to)) {\\n          revert NotWhitelisted();\\n        }\\n        uint128 changeAmount = ((amountIn * BASE_27) / ts.normalizer).toUint128();\\n        // This will underflow when the system is trying to burn more stablecoins than what has been issued\\n        // from this collateral\\n        collatInfo.normalizedStables = collatInfo.normalizedStables - uint216(changeAmount);\\n        ts.normalizedStables = ts.normalizedStables - changeAmount;\\n        ITokenP(tokenIn).burnSelf(amountIn, msg.sender);\\n        if (collatInfo.isManaged > 0) {\\n          LibManager.release(tokenOut, to, amountOut, collatInfo.managerData.config);\\n        } else {\\n          IERC20(tokenOut).safeTransfer(to, amountOut);\\n        }\\n      }\\n      emit Swap(tokenIn, tokenOut, amountIn, amountOut, msg.sender, to);\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    INTERNAL VIEW                                                  \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Computes the `amountOut` of stablecoins to mint from `tokenIn` of a collateral with data `collatInfo`\\n  function _quoteMintExactInput(\\n    Collateral storage collatInfo,\\n    uint256 amountIn\\n  )\\n    internal\\n    view\\n    returns (uint256 amountOut)\\n  {\\n    uint256 oracleValue = LibOracle.readMint(collatInfo.oracleConfig);\\n    amountOut = LibHelpers.convertDecimalTo(oracleValue * amountIn, 18 + collatInfo.decimals, 18);\\n    amountOut = _quoteFees(collatInfo, QuoteType.MintExactInput, amountOut);\\n  }\\n\\n  /// @notice Computes the `amountIn` of collateral to get during a mint of `amountOut` of stablecoins\\n  function _quoteMintExactOutput(\\n    Collateral storage collatInfo,\\n    uint256 amountOut\\n  )\\n    internal\\n    view\\n    returns (uint256 amountIn)\\n  {\\n    uint256 oracleValue = LibOracle.readMint(collatInfo.oracleConfig);\\n    amountIn = _quoteFees(collatInfo, QuoteType.MintExactOutput, amountOut);\\n    amountIn = LibHelpers.convertDecimalTo((amountIn * BASE_18) / oracleValue, 18, collatInfo.decimals);\\n  }\\n\\n  /// @notice Computes the `amountIn` of stablecoins to burn to release `amountOut` of `collateral`\\n  function _quoteBurnExactOutput(\\n    address collateral,\\n    Collateral storage collatInfo,\\n    uint256 amountOut\\n  )\\n    internal\\n    view\\n    returns (uint256 amountIn)\\n  {\\n    (uint256 ratio, uint256 oracleValue) = LibOracle.getBurnOracle(collateral, collatInfo.oracleConfig);\\n    amountIn = Math.mulDiv(LibHelpers.convertDecimalTo(amountOut, collatInfo.decimals, 18), oracleValue, ratio);\\n    amountIn = _quoteFees(collatInfo, QuoteType.BurnExactOutput, amountIn);\\n  }\\n\\n  /// @notice Computes the `amountOut` of `collateral` to give during a burn operation of `amountIn` of stablecoins\\n  function _quoteBurnExactInput(\\n    address collateral,\\n    Collateral storage collatInfo,\\n    uint256 amountIn\\n  )\\n    internal\\n    view\\n    returns (uint256 amountOut)\\n  {\\n    (uint256 ratio, uint256 oracleValue) = LibOracle.getBurnOracle(collateral, collatInfo.oracleConfig);\\n    amountOut = _quoteFees(collatInfo, QuoteType.BurnExactInput, amountIn);\\n    amountOut = LibHelpers.convertDecimalTo((amountOut * ratio) / oracleValue, 18, collatInfo.decimals);\\n  }\\n\\n  /// @notice Computes the fees to apply during a mint or burn operation\\n  /// @dev This function leverages the mathematical computations of the appendix of the Monetizer whitepaper\\n  /// @dev Cost of the function is linear in the length of the `xFeeMint` or `xFeeBurn` array\\n  function _quoteFees(\\n    Collateral storage collatInfo,\\n    QuoteType quoteType,\\n    uint256 amountStable\\n  )\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    LocalVariables memory v;\\n    v.isMint = _isMint(quoteType);\\n    v.isExact = _isExact(quoteType);\\n    uint256 n = v.isMint ? collatInfo.xFeeMint.length : collatInfo.xFeeBurn.length;\\n\\n    uint256 currentExposure;\\n    {\\n      MonetizerStorage storage ts = s.transmuterStorage();\\n      uint256 normalizedStablesMem = ts.normalizedStables;\\n      // Handling the initialisation and constant fees\\n      if (normalizedStablesMem == 0 || n == 1) {\\n        return _computeFee(quoteType, amountStable, v.isMint ? collatInfo.yFeeMint[0] : collatInfo.yFeeBurn[0]);\\n      }\\n      // Increasing precision for `currentExposure` because otherwise if there is a factor 1e9 between total\\n      // stablecoin supply and one specific collateral, exposure can be null\\n      currentExposure = uint64((collatInfo.normalizedStables * BASE_18) / normalizedStablesMem);\\n\\n      uint256 normalizerMem = ts.normalizer;\\n      // Store the current amount of stablecoins issued from this collateral\\n      v.stablecoinsIssued = (uint256(collatInfo.normalizedStables) * normalizerMem) / BASE_27;\\n      v.otherStablecoinSupply = (normalizerMem * normalizedStablesMem) / BASE_27 - v.stablecoinsIssued;\\n    }\\n\\n    uint256 amount;\\n    // Finding in which segment the current exposure to the collateral is\\n    uint256 i = LibHelpers.findLowerBound(\\n      v.isMint, v.isMint ? collatInfo.xFeeMint : collatInfo.xFeeBurn, uint64(BASE_9), uint64(currentExposure)\\n    );\\n\\n    while (i < n - 1) {\\n      // We compute a linear by part function on the amount swapped\\n      // The `amountToNextBreakPoint` variable is the `b_{i+1}` value from the whitepaper\\n      if (v.isMint) {\\n        v.lowerExposure = collatInfo.xFeeMint[i];\\n        v.upperExposure = collatInfo.xFeeMint[i + 1];\\n        v.lowerFees = collatInfo.yFeeMint[i];\\n        v.upperFees = collatInfo.yFeeMint[i + 1];\\n        v.amountToNextBreakPoint =\\n          (v.otherStablecoinSupply * v.upperExposure) / (BASE_9 - v.upperExposure) - v.stablecoinsIssued;\\n      } else {\\n        // The exposures in the burn case are decreasing\\n        v.lowerExposure = collatInfo.xFeeBurn[i];\\n        v.upperExposure = collatInfo.xFeeBurn[i + 1];\\n        v.lowerFees = collatInfo.yFeeBurn[i];\\n        v.upperFees = collatInfo.yFeeBurn[i + 1];\\n        // The `b_{i+1}` value in the burn case is the opposite value of the mint case\\n        v.amountToNextBreakPoint =\\n          v.stablecoinsIssued - (v.otherStablecoinSupply * v.upperExposure) / (BASE_9 - v.upperExposure);\\n      }\\n      // Computing the `g_i(0)` value from the whitepaper\\n      int256 currentFees;\\n      // We can only enter the else in the first iteration of the loop as otherwise we will\\n      // always be at the beginning of the new segment\\n      if (v.lowerExposure * BASE_9 == currentExposure) {\\n        currentFees = v.lowerFees;\\n      } else if (v.lowerFees == v.upperFees) {\\n        currentFees = v.lowerFees;\\n      } else {\\n        // This is the opposite of the `b_i` value from the whitepaper.\\n        uint256 amountFromPrevBreakPoint = v.isMint\\n          ? v.stablecoinsIssued - (v.otherStablecoinSupply * v.lowerExposure) / (BASE_9 - v.lowerExposure)\\n          : (v.otherStablecoinSupply * v.lowerExposure) / (BASE_9 - v.lowerExposure) - v.stablecoinsIssued;\\n\\n        //  slope = (upperFees - lowerFees) / (amountToNextBreakPoint + amountFromPrevBreakPoint)\\n        // `currentFees` is the `g(0)` value from the whitepaper\\n        currentFees = v.lowerFees\\n          + int256(\\n            (uint256(v.upperFees - v.lowerFees) * amountFromPrevBreakPoint)\\n              / (v.amountToNextBreakPoint + amountFromPrevBreakPoint)\\n          );\\n      }\\n      {\\n        // In the mint case, when `!v.isExact`: = `b_{i+1} * (1+(g_i(0)+f_{i+1})/2)`\\n        uint256 amountToNextBreakPointNormalizer = v.isExact\\n          ? v.amountToNextBreakPoint\\n          : v.isMint\\n            ? _invertFeeMint(v.amountToNextBreakPoint, int64(v.upperFees + currentFees) / 2)\\n            : _applyFeeBurn(v.amountToNextBreakPoint, int64(v.upperFees + currentFees) / 2);\\n\\n        if (amountToNextBreakPointNormalizer >= amountStable) {\\n          int64 midFee;\\n          if (v.isExact) {\\n            // `(g_i(0) + g_i(M)) / 2 = g(0) + (f_{i+1} - g(0)) * M / (2 * b_{i+1})`\\n            midFee = int64(\\n              currentFees\\n                + int256(\\n                  amountStable.mulDiv(\\n                    uint256((v.upperFees - currentFees)), 2 * amountToNextBreakPointNormalizer, Math.Rounding.Ceil\\n                  )\\n                )\\n            );\\n          } else {\\n            // Here instead of computing the closed form expression for `m_t` derived in the whitepaper,\\n            // we are computing: `(g(0)+g_i(m_t))/2 = g(0)+(f_{i+1}-f_i)/(b_{i+1}-b_i)m_t/2\\n\\n            // ac4 is the value of `2M(f_{i+1}-f_i)/(b_{i+1}-b_i) = 2M(f_{i+1}-g(0))/b_{i+1}` used\\n            // in the computation of `m_t` in both the mint and burn case\\n            uint256 ac4 = BASE_9.mulDiv(\\n              2 * amountStable * uint256(v.upperFees - currentFees), v.amountToNextBreakPoint, Math.Rounding.Ceil\\n            );\\n\\n            if (v.isMint) {\\n              // In the mint case:\\n              // `m_t = (-1-g(0)+sqrt[(1+g(0))**2+2M(f_{i+1}-g(0))/b_{i+1}])/((f_{i+1}-g(0))/b_{i+1})`\\n              // And so: g(0)+(f_{i+1}-f_i)/(b_{i+1}-b_i)m_t/2\\n              //                      = (g(0)-1+sqrt[(1+g(0))**2+2M(f_{i+1}-g(0))/b_{i+1}]) / 2\\n              midFee = int64(\\n                (\\n                  int256(Math.sqrt((uint256(int256(BASE_9) + currentFees)) ** 2 + ac4, Math.Rounding.Ceil))\\n                    + currentFees - int256(BASE_9)\\n                ) / 2\\n              );\\n            } else {\\n              // In the burn case:\\n              // `m_t = (1-g(0)+sqrt[(1-g(0))**2-2M(f_{i+1}-g(0))/b_{i+1}])/((f_{i+1}-g(0))/b_{i+1})`\\n              // And so: g(0)+(f_{i+1}-f_i)/(b_{i+1}-b_i)m_t/2\\n              //                      = (g(0)+1-sqrt[(1-g(0))**2-2M(f_{i+1}-g(0))/b_{i+1}]) / 2\\n\\n              uint256 baseMinusCurrentSquared = (uint256(int256(BASE_9) - currentFees)) ** 2;\\n              // Mathematically, this condition is always verified, but rounding errors may make this\\n              // mathematical invariant break, in which case we consider that the square root is null\\n              if (baseMinusCurrentSquared < ac4) {\\n                midFee = int64((currentFees + int256(BASE_9)) / 2);\\n              } else {\\n                midFee = int64(\\n                  int256(\\n                    Math.mulDiv(\\n                      uint256(\\n                        currentFees + int256(BASE_9)\\n                          - int256(Math.sqrt(baseMinusCurrentSquared - ac4, Math.Rounding.Floor))\\n                      ),\\n                      1,\\n                      2,\\n                      Math.Rounding.Ceil\\n                    )\\n                  )\\n                );\\n              }\\n            }\\n          }\\n          return amount + _computeFee(quoteType, amountStable, midFee);\\n        } else {\\n          amountStable -= amountToNextBreakPointNormalizer;\\n          amount += !v.isExact\\n            ? v.amountToNextBreakPoint\\n            : v.isMint\\n              ? _invertFeeMint(v.amountToNextBreakPoint, int64(v.upperFees + currentFees) / 2)\\n              : _applyFeeBurn(v.amountToNextBreakPoint, int64(v.upperFees + currentFees) / 2);\\n          currentExposure = v.upperExposure * BASE_9;\\n          ++i;\\n          // Update for the rest of the swaps the stablecoins issued from the asset\\n          v.stablecoinsIssued =\\n            v.isMint ? v.stablecoinsIssued + v.amountToNextBreakPoint : v.stablecoinsIssued - v.amountToNextBreakPoint;\\n        }\\n      }\\n    }\\n    // If `i == n-1`, we are in an area where fees are constant\\n    return\\n      amount + _computeFee(quoteType, amountStable, v.isMint ? collatInfo.yFeeMint[n - 1] : collatInfo.yFeeBurn[n - 1]);\\n  }\\n\\n  /// @notice Checks whether there is still enough of the collateral to process the transfer\\n  function _checkAmounts(address collateral, Collateral storage collatInfo, uint256 amountOut) internal view {\\n    if (\\n      (collatInfo.isManaged > 0 && LibManager.maxAvailable(collatInfo.managerData.config) < amountOut)\\n        || (collatInfo.isManaged == 0 && IERC20(collateral).balanceOf(address(this)) < amountOut)\\n    ) revert InvalidSwap();\\n  }\\n\\n  /// @notice Checks whether there is enough space left to mint from this collateral\\n  function _checkHardCaps(Collateral storage collatInfo, uint256 amount, uint256 normalizer) internal view {\\n    if (amount + (collatInfo.normalizedStables * normalizer) / BASE_27 > collatInfo.stablecoinCap) {\\n      revert InvalidSwap();\\n    }\\n  }\\n\\n  /// @notice Checks whether a swap from `tokenIn` to `tokenOut` is a mint or a burn, whether the\\n  /// collateral provided is paused or not and in case of whether the swap is not occuring too late\\n  /// @dev The function reverts if the `tokenIn` and `tokenOut` given do not correspond to the stablecoin\\n  /// and to an accepted collateral asset of the system\\n  function _getMintBurn(\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 deadline\\n  )\\n    internal\\n    view\\n    returns (bool mint, Collateral storage collatInfo)\\n  {\\n    if (block.timestamp > deadline) revert TooLate();\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    address _tokenP = address(ts.tokenP);\\n    if (tokenIn == _tokenP) {\\n      collatInfo = ts.collaterals[tokenOut];\\n      if (collatInfo.isBurnLive == 0) revert Paused();\\n      mint = false;\\n    } else if (tokenOut == _tokenP) {\\n      collatInfo = ts.collaterals[tokenIn];\\n      if (collatInfo.isMintLive == 0) revert Paused();\\n      mint = true;\\n    } else {\\n      revert InvalidTokens();\\n    }\\n  }\\n\\n  /// @notice Checks whether `tokenIn` is a valid unpaused collateral and the deadline\\n  function _getMint(\\n    address tokenIn,\\n    uint256 deadline\\n  )\\n    internal\\n    view\\n    returns (address tokenOut, Collateral storage collatInfo)\\n  {\\n    if (block.timestamp > deadline) revert TooLate();\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    collatInfo = ts.collaterals[tokenIn];\\n    if (collatInfo.isMintLive == 0) revert Paused();\\n    tokenOut = address(ts.tokenP);\\n  }\\n\\n  /// @notice Builds a permit2 `permitTransferFrom` payload for a `tokenIn` transfer\\n  /// @dev The transfer should be from `msg.sender` to this contract or a manager\\n  function _buildPermitTransferPayload(\\n    uint256 amountIn,\\n    uint256 approvedAmount,\\n    address tokenIn,\\n    uint256 deadline,\\n    bytes memory permitData,\\n    Collateral storage collatInfo\\n  )\\n    internal\\n    view\\n    returns (bytes memory payload)\\n  {\\n    Permit2Details memory details;\\n    if (collatInfo.isManaged > 0) details.to = LibManager.transferRecipient(collatInfo.managerData.config);\\n    else details.to = address(this);\\n    (details.nonce, details.signature) = abi.decode(permitData, (uint256, bytes));\\n    payload = abi.encodeWithSelector(\\n      IPermit2.permitTransferFrom.selector,\\n      PermitTransferFrom({\\n        permitted: TokenPermissions({ token: tokenIn, amount: approvedAmount }),\\n        nonce: details.nonce,\\n        deadline: deadline\\n      }),\\n      SignatureTransferDetails({ to: details.to, requestedAmount: amountIn }),\\n      msg.sender,\\n      details.signature\\n    );\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    INTERNAL PURE                                                  \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Applies or inverts `fees` to an `amount` based on the type of operation\\n  function _computeFee(QuoteType quoteType, uint256 amount, int64 fees) internal pure returns (uint256) {\\n    return quoteType == QuoteType.MintExactInput\\n      ? _applyFeeMint(amount, fees)\\n      : quoteType == QuoteType.MintExactOutput\\n        ? _invertFeeMint(amount, fees)\\n        : quoteType == QuoteType.BurnExactInput ? _applyFeeBurn(amount, fees) : _invertFeeBurn(amount, fees);\\n  }\\n\\n  /// @notice Checks whether an operation is a mint operation or not\\n  function _isMint(QuoteType quoteType) internal pure returns (bool) {\\n    return quoteType == QuoteType.MintExactInput || quoteType == QuoteType.MintExactOutput;\\n  }\\n\\n  /// @notice Checks whether a swap involves an amount of stablecoins that is known in exact in advance or not\\n  function _isExact(QuoteType quoteType) internal pure returns (bool) {\\n    return quoteType == QuoteType.MintExactOutput || quoteType == QuoteType.BurnExactInput;\\n  }\\n\\n  /// @notice Applies `fees` to an `amountIn` of assets to get an `amountOut` of stablecoins\\n  function _applyFeeMint(uint256 amountIn, int64 fees) internal pure returns (uint256 amountOut) {\\n    if (fees >= 0) {\\n      uint256 castedFees = uint256(int256(fees));\\n      // Consider that if fees are above `BASE_12` this is equivalent to infinite fees\\n      if (castedFees >= BASE_12) revert InvalidSwap();\\n      amountOut = (amountIn * BASE_9) / (BASE_9 + castedFees);\\n    } else {\\n      amountOut = (amountIn * BASE_9) / (BASE_9 - uint256(int256(-fees)));\\n    }\\n  }\\n\\n  /// @notice Gets from an `amountOut` of stablecoins and with `fees`, the `amountIn` of assets\\n  /// that need to be brought during a mint\\n  function _invertFeeMint(uint256 amountOut, int64 fees) internal pure returns (uint256 amountIn) {\\n    if (fees >= 0) {\\n      uint256 castedFees = uint256(int256(fees));\\n      // Consider that if fees are above `BASE_12` this is equivalent to infinite fees\\n      if (castedFees >= BASE_12) revert InvalidSwap();\\n      amountIn = amountOut.mulDiv(BASE_9 + castedFees, BASE_9, Math.Rounding.Ceil);\\n    } else {\\n      amountIn = amountOut.mulDiv(BASE_9 - uint256(int256(-fees)), BASE_9, Math.Rounding.Ceil);\\n    }\\n  }\\n\\n  /// @notice Applies `fees` to an `amountIn` of stablecoins to get an `amountOut` of assets\\n  function _applyFeeBurn(uint256 amountIn, int64 fees) internal pure returns (uint256 amountOut) {\\n    if (fees >= 0) {\\n      uint256 castedFees = uint256(int256(fees));\\n      if (castedFees >= MAX_BURN_FEE) revert InvalidSwap();\\n      amountOut = ((BASE_9 - castedFees) * amountIn) / BASE_9;\\n    } else {\\n      amountOut = ((BASE_9 + uint256(int256(-fees))) * amountIn) / BASE_9;\\n    }\\n  }\\n\\n  /// @notice Gets from an `amountOut` of assets and with `fees` the `amountIn` of stablecoins that need\\n  /// to be brought during a burn\\n  function _invertFeeBurn(uint256 amountOut, int64 fees) internal pure returns (uint256 amountIn) {\\n    if (fees >= 0) {\\n      uint256 castedFees = uint256(int256(fees));\\n      if (castedFees >= MAX_BURN_FEE) revert InvalidSwap();\\n      amountIn = amountOut.mulDiv(BASE_9, BASE_9 - castedFees, Math.Rounding.Ceil);\\n    } else {\\n      amountIn = amountOut.mulDiv(BASE_9, BASE_9 + uint256(int256(-fees)), Math.Rounding.Ceil);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x14573ea1908024b902d2b549c905edc53310d75b87836f7a294e2faa6e05853a\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport { LibStorage as s } from \\\"./LibStorage.sol\\\";\\nimport { IAccessManager } from \\\"@openzeppelin/contracts/access/manager/IAccessManager.sol\\\";\\nimport { AuthorityUtils } from \\\"@openzeppelin/contracts/access/manager/AuthorityUtils.sol\\\";\\n\\nimport \\\"../../utils/Errors.sol\\\";\\nimport \\\"../../utils/Constants.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\n/// @title LibDiamond\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @notice Helper library to deal with diamond proxies.\\n/// @dev Reference: EIP-2535 Diamonds\\n/// @dev Forked from https://github.com/mudgen/diamond-3/blob/master/contracts/libraries/LibDiamond.sol by mudgen\\nlibrary LibDiamond {\\n  event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    INTERNAL FUNCTIONS                                                \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  function isGovernor(address caller) internal view returns (bool) {\\n    (bool isMember,) = s.diamondStorage().accessManager.hasRole(GOVERNOR_ROLE, caller);\\n    return isMember;\\n  }\\n\\n  /// @notice Checks whether `caller` can call `data` on `this`\\n  function checkCanCall(address caller, bytes calldata data) internal returns (bool) {\\n    IAccessManager accessManager = s.diamondStorage().accessManager;\\n    (bool immediate, uint32 delay) =\\n      AuthorityUtils.canCallWithDelay(address(accessManager), caller, address(this), bytes4(data[0:4]));\\n    if (!immediate) {\\n      if (delay > 0) {\\n        MonetizerStorage storage ts = s.transmuterStorage();\\n        ts.consumingSchedule = true;\\n        accessManager.consumeScheduledOp(caller, data);\\n        ts.consumingSchedule = false;\\n      } else {\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  /// @notice Internal function version of `diamondCut`\\n  function diamondCut(FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n    uint256 diamondCutLength = _diamondCut.length;\\n    for (uint256 facetIndex; facetIndex < diamondCutLength; facetIndex++) {\\n      bytes4[] memory functionSelectors = _diamondCut[facetIndex].functionSelectors;\\n      address facetAddress = _diamondCut[facetIndex].facetAddress;\\n\\n      if (functionSelectors.length == 0) {\\n        revert NoSelectorsProvidedForFacetForCut(facetAddress);\\n      }\\n\\n      FacetCutAction action = _diamondCut[facetIndex].action;\\n      if (action == FacetCutAction.Add) {\\n        _addFunctions(facetAddress, functionSelectors);\\n      } else if (action == FacetCutAction.Replace) {\\n        _replaceFunctions(facetAddress, functionSelectors);\\n      } else if (action == FacetCutAction.Remove) {\\n        _removeFunctions(facetAddress, functionSelectors);\\n      }\\n    }\\n\\n    emit DiamondCut(_diamondCut, _init, _calldata);\\n    _initializeDiamondCut(_init, _calldata);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    PRIVATE FUNCTIONS                                                \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Does a delegate call on `_init` with `_calldata`\\n  function _initializeDiamondCut(address _init, bytes memory _calldata) private {\\n    if (_init == address(0)) {\\n      return;\\n    }\\n    _enforceHasContractCode(_init);\\n    (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n    if (!success) {\\n      if (error.length > 0) {\\n        assembly (\\\"memory-safe\\\") {\\n          let returndata_size := mload(error)\\n          revert(add(32, error), returndata_size)\\n        }\\n      } else {\\n        revert InitializationFunctionReverted(_init, _calldata);\\n      }\\n    }\\n  }\\n\\n  /// @notice Adds a new function to the diamond proxy\\n  /// @dev Reverts if selectors are already existing\\n  function _addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) private {\\n    if (_facetAddress == address(0)) {\\n      revert CannotAddSelectorsToZeroAddress(_functionSelectors);\\n    }\\n    DiamondStorage storage ds = s.diamondStorage();\\n    uint16 selectorCount = uint16(ds.selectors.length);\\n    _enforceHasContractCode(_facetAddress);\\n    uint256 functionSelectorsLength = _functionSelectors.length;\\n    for (uint256 selectorIndex; selectorIndex < functionSelectorsLength; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorInfo[selector].facetAddress;\\n      if (oldFacetAddress != address(0)) {\\n        revert CannotAddFunctionToDiamondThatAlreadyExists(selector);\\n      }\\n      ds.selectorInfo[selector] = FacetInfo(_facetAddress, selectorCount);\\n      ds.selectors.push(selector);\\n      selectorCount++;\\n    }\\n  }\\n\\n  /// @notice Upgrades a function in the diamond proxy\\n  /// @dev Reverts if selectors do not already exist\\n  function _replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) private {\\n    DiamondStorage storage ds = s.diamondStorage();\\n    if (_facetAddress == address(0)) {\\n      revert CannotReplaceFunctionsFromFacetWithZeroAddress(_functionSelectors);\\n    }\\n    _enforceHasContractCode(_facetAddress);\\n    uint256 functionSelectorsLength = _functionSelectors.length;\\n    for (uint256 selectorIndex; selectorIndex < functionSelectorsLength; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorInfo[selector].facetAddress;\\n      // Can't replace immutable functions -- functions defined directly in the diamond in this case\\n      if (oldFacetAddress == address(this)) {\\n        revert CannotReplaceImmutableFunction(selector);\\n      }\\n      if (oldFacetAddress == _facetAddress) {\\n        revert CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet(selector);\\n      }\\n      if (oldFacetAddress == address(0)) {\\n        revert CannotReplaceFunctionThatDoesNotExists(selector);\\n      }\\n      // Replace old facet address\\n      ds.selectorInfo[selector].facetAddress = _facetAddress;\\n    }\\n  }\\n\\n  /// @notice Removes a function in the diamond proxy\\n  /// @dev Reverts if selectors do not already exist\\n  function _removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) private {\\n    DiamondStorage storage ds = s.diamondStorage();\\n    uint256 selectorCount = ds.selectors.length;\\n    if (_facetAddress != address(0)) {\\n      revert RemoveFacetAddressMustBeZeroAddress(_facetAddress);\\n    }\\n    uint256 functionSelectorsLength = _functionSelectors.length;\\n    for (uint256 selectorIndex; selectorIndex < functionSelectorsLength; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      FacetInfo memory oldFacetAddressAndSelectorPosition = ds.selectorInfo[selector];\\n      if (oldFacetAddressAndSelectorPosition.facetAddress == address(0)) {\\n        revert CannotRemoveFunctionThatDoesNotExist(selector);\\n      }\\n\\n      // Can't remove immutable functions -- functions defined directly in the diamond\\n      if (oldFacetAddressAndSelectorPosition.facetAddress == address(this)) {\\n        revert CannotRemoveImmutableFunction(selector);\\n      }\\n      // Replace selector with last selector\\n      selectorCount--;\\n      if (oldFacetAddressAndSelectorPosition.selectorPosition != selectorCount) {\\n        bytes4 lastSelector = ds.selectors[selectorCount];\\n        ds.selectors[oldFacetAddressAndSelectorPosition.selectorPosition] = lastSelector;\\n        ds.selectorInfo[lastSelector].selectorPosition = oldFacetAddressAndSelectorPosition.selectorPosition;\\n      }\\n      // Delete last selector\\n      ds.selectors.pop();\\n      delete ds.selectorInfo[selector];\\n    }\\n  }\\n\\n  /// @notice Checks that an address has a non void bytecode\\n  function _enforceHasContractCode(address _contract) private view {\\n    uint256 contractSize;\\n    assembly (\\\"memory-safe\\\") {\\n      contractSize := extcodesize(_contract)\\n    }\\n    if (contractSize == 0) {\\n      revert ContractHasNoCode();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7cac6c4cee194f464b080e04b8c323197419970d76576ae8e7b8d1b11ca33242\",\"license\":\"MIT\"},\"project/contracts/monetizer/libraries/LibHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.28;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../Storage.sol\\\";\\n\\n/// @title LibHelpers\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This library is an authorized fork of Angle's `LibHelpers` library\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/libraries/LibHelpers.sol\\nlibrary LibHelpers {\\n  /// @notice Rebases the units of `amount` from `fromDecimals` to `toDecimals`\\n  function convertDecimalTo(uint256 amount, uint8 fromDecimals, uint8 toDecimals) internal pure returns (uint256) {\\n    if (fromDecimals > toDecimals) return amount / 10 ** (fromDecimals - toDecimals);\\n    else if (fromDecimals < toDecimals) return amount * 10 ** (toDecimals - fromDecimals);\\n    else return amount;\\n  }\\n\\n  /// @notice Checks whether a `token` is in a list `tokens` and returns the index of the token in the list\\n  /// or -1 in the other case\\n  function checkList(address token, address[] memory tokens) internal pure returns (int256) {\\n    uint256 tokensLength = tokens.length;\\n    for (uint256 i; i < tokensLength; ++i) {\\n      if (token == tokens[i]) return int256(i);\\n    }\\n    return -1;\\n  }\\n\\n  /// @notice Searches a sorted `array` and returns the first index that contains a value strictly greater\\n  /// (or lower if increasingArray is false) to `element` minus 1\\n  /// @dev If no such index exists (i.e. all values in the array are strictly lesser/greater than `element`),\\n  /// either array length minus 1, or 0 are returned\\n  /// @dev The time complexity of the search is O(log n).\\n  /// @dev Inspired from OpenZeppelin Contracts v4.4.1:\\n  /// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Arrays.sol\\n  /// @dev Modified by Angle Labs to support `uint64`, monotonous arrays and exclusive upper bounds\\n  function findLowerBound(\\n    bool increasingArray,\\n    uint64[] memory array,\\n    uint64 normalizerArray,\\n    uint64 element\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    if (array.length == 0) {\\n      return 0;\\n    }\\n    uint256 low = 1;\\n    uint256 high = array.length;\\n\\n    if (\\n      (increasingArray && array[high - 1] * normalizerArray <= element)\\n        || (!increasingArray && array[high - 1] * normalizerArray >= element)\\n    ) return high - 1;\\n\\n    while (low < high) {\\n      uint256 mid = Math.average(low, high);\\n\\n      // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n      // because Math.average rounds down (it does integer division with truncation).\\n      if (increasingArray ? array[mid] * normalizerArray > element : array[mid] * normalizerArray < element) {\\n        high = mid;\\n      } else {\\n        low = mid + 1;\\n      }\\n    }\\n\\n    // At this point `low` is the exclusive upper bound.\\n    // `low - 1` is the inclusive lower bound.\\n    return low - 1;\\n  }\\n\\n  /// @notice Evaluates for `x` a piecewise linear function defined with the breaking points in the arrays\\n  /// `xArray` and `yArray`\\n  /// @dev The values in the `xArray` must be increasing\\n  function piecewiseLinear(uint64 x, uint64[] memory xArray, int64[] memory yArray) internal pure returns (int64) {\\n    uint256 indexLowerBound = findLowerBound(true, xArray, 1, x);\\n    if (indexLowerBound == 0 && x < xArray[0]) return yArray[0];\\n    else if (indexLowerBound == xArray.length - 1) return yArray[xArray.length - 1];\\n    return yArray[indexLowerBound]\\n      + ((yArray[indexLowerBound + 1] - yArray[indexLowerBound]) * int64(x - xArray[indexLowerBound]))\\n        / int64(xArray[indexLowerBound + 1] - xArray[indexLowerBound]);\\n  }\\n}\\n\",\"keccak256\":\"0x4aadede7bb8882aa0f4e29948691f604ef406169fc31d8dcc66b3588ffaa9555\",\"license\":\"GPL-3.0\"},\"project/contracts/monetizer/libraries/LibManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { IManager } from \\\"contracts/interfaces/IManager.sol\\\";\\n\\nimport \\\"../Storage.sol\\\";\\n\\n/// @title LibManager\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev Managed collateral assets may be handled through external smart contracts or directly through this library\\n/// @dev There is no implementation at this point for a managed collateral handled through this library, and\\n/// a new specific `ManagerType` would need to be added in this case\\n/// @dev This library is an authorized fork of Angle's `LibManager` library\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/libraries/LibManager.sol\\nlibrary LibManager {\\n  /// @notice Checks to which address managed funds must be transferred\\n  function transferRecipient(bytes memory config) internal view returns (address recipient) {\\n    (ManagerType managerType, bytes memory data) = parseManagerConfig(config);\\n    recipient = address(this);\\n    if (managerType == ManagerType.EXTERNAL) return abi.decode(data, (address));\\n  }\\n\\n  /// @notice Performs a transfer of `token` for a collateral that is managed to a `to` address\\n  /// @dev `token` may not be the actual collateral itself, as some collaterals have subcollaterals associated\\n  /// with it\\n  /// @dev Eventually pulls funds from strategies\\n  function release(address token, address to, uint256 amount, bytes memory config) internal {\\n    (ManagerType managerType, bytes memory data) = parseManagerConfig(config);\\n    if (managerType == ManagerType.EXTERNAL) abi.decode(data, (IManager)).release(token, to, amount);\\n  }\\n\\n  /// @notice Gets the balances of all the tokens controlled through `managerData`\\n  /// @return balances An array of size `subCollaterals` with current balances of all subCollaterals\\n  /// including the one corresponding to the `managerData` given\\n  /// @return totalValue The value of all the `subCollaterals` in `collateral`\\n  /// @dev `subCollaterals` must always have as first token (index 0) the collateral itself\\n  function totalAssets(bytes memory config) internal view returns (uint256[] memory balances, uint256 totalValue) {\\n    (ManagerType managerType, bytes memory data) = parseManagerConfig(config);\\n    if (managerType == ManagerType.EXTERNAL) return abi.decode(data, (IManager)).totalAssets();\\n  }\\n\\n  /// @notice Calls a hook if needed after new funds have been transfered to a manager\\n  function invest(uint256 amount, bytes memory config) internal {\\n    (ManagerType managerType, bytes memory data) = parseManagerConfig(config);\\n    if (managerType == ManagerType.EXTERNAL) abi.decode(data, (IManager)).invest(amount);\\n  }\\n\\n  /// @notice Returns available underlying tokens, for instance if liquidity is fully used and\\n  /// not withdrawable the function will return 0\\n  function maxAvailable(bytes memory config) internal view returns (uint256 available) {\\n    (ManagerType managerType, bytes memory data) = parseManagerConfig(config);\\n    if (managerType == ManagerType.EXTERNAL) return abi.decode(data, (IManager)).maxAvailable();\\n  }\\n\\n  /// @notice Decodes the `managerData` associated to a collateral\\n  function parseManagerConfig(bytes memory config) internal pure returns (ManagerType managerType, bytes memory data) {\\n    (managerType, data) = abi.decode(config, (ManagerType, bytes));\\n  }\\n}\\n\",\"keccak256\":\"0xe619f87b2dd001441852e45f473d0c0d443b7f6373a8c2fbccc0c5a23c676f50\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/libraries/LibOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { IMonetizerOracle } from \\\"contracts/interfaces/IMonetizerOracle.sol\\\";\\nimport { AggregatorV3Interface } from \\\"contracts/interfaces/external/chainlink/AggregatorV3Interface.sol\\\";\\nimport { IMorphoOracle } from \\\"contracts/interfaces/external/morpho/IMorphoOracle.sol\\\";\\n\\nimport { LibStorage as s } from \\\"./LibStorage.sol\\\";\\n\\nimport \\\"../../utils/Constants.sol\\\";\\nimport \\\"../../utils/Errors.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\n/// @title LibOracle\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This library is an authorized fork of Angle's `LibOracle` library\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/libraries/LibOracle.sol\\nlibrary LibOracle {\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    ACTIONS SPECIFIC ORACLES                                             \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Reads the oracle value used during a redemption to compute collateral ratio for `oracleConfig`\\n  /// @dev This value is only sensitive to compute the collateral ratio and deduce a penalty factor\\n  function readRedemption(bytes memory oracleConfig) internal view returns (uint256 oracleValue) {\\n    (OracleReadType oracleType, OracleReadType targetType, bytes memory oracleData, bytes memory targetData,) =\\n      _parseOracleConfig(oracleConfig);\\n    if (oracleType == OracleReadType.EXTERNAL) {\\n      IMonetizerOracle externalOracle = abi.decode(oracleData, (IMonetizerOracle));\\n      return externalOracle.readRedemption();\\n    } else {\\n      (oracleValue,) = readSpotAndTarget(oracleType, targetType, oracleData, targetData, 0);\\n      return oracleValue;\\n    }\\n  }\\n\\n  /// @notice Reads the oracle value used during mint operations for an asset with `oracleConfig`\\n  /// @dev For assets which do not rely on external oracles, this value is the minimum between the processed oracle\\n  /// value for the asset and its target price\\n  function readMint(bytes memory oracleConfig) internal view returns (uint256 oracleValue) {\\n    (\\n      OracleReadType oracleType,\\n      OracleReadType targetType,\\n      bytes memory oracleData,\\n      bytes memory targetData,\\n      bytes memory hyperparameters\\n    ) = _parseOracleConfig(oracleConfig);\\n    if (oracleType == OracleReadType.EXTERNAL) {\\n      IMonetizerOracle externalOracle = abi.decode(oracleData, (IMonetizerOracle));\\n      return externalOracle.readMint();\\n    }\\n\\n    (uint128 userDeviation,) = abi.decode(hyperparameters, (uint128, uint128));\\n    uint256 targetPrice;\\n    (oracleValue, targetPrice) = readSpotAndTarget(oracleType, targetType, oracleData, targetData, userDeviation);\\n    if (targetPrice < oracleValue) oracleValue = targetPrice;\\n  }\\n\\n  /// @notice Reads the oracle value used for a burn operation for an asset with `oracleConfig`\\n  /// @return oracleValue The actual oracle value obtained\\n  /// @return ratio If `oracle value < target price`, the ratio between the oracle value and the target\\n  /// price, otherwise `BASE_18`\\n  function readBurn(bytes memory oracleConfig) internal view returns (uint256 oracleValue, uint256 ratio) {\\n    (\\n      OracleReadType oracleType,\\n      OracleReadType targetType,\\n      bytes memory oracleData,\\n      bytes memory targetData,\\n      bytes memory hyperparameters\\n    ) = _parseOracleConfig(oracleConfig);\\n    if (oracleType == OracleReadType.EXTERNAL) {\\n      IMonetizerOracle externalOracle = abi.decode(oracleData, (IMonetizerOracle));\\n      return externalOracle.readBurn();\\n    }\\n    (uint128 userDeviation, uint128 burnRatioDeviation) = abi.decode(hyperparameters, (uint128, uint128));\\n    uint256 targetPrice;\\n    (oracleValue, targetPrice) = readSpotAndTarget(oracleType, targetType, oracleData, targetData, userDeviation);\\n    // Firewall in case the oracle value reported is low compared to the target\\n    // If the oracle value is slightly below its target, then no deviation is reported for the oracle and\\n    // the price of burning the stablecoin for other assets is not impacted. Also, the oracle value of this asset\\n    // is set to the target price, to not be open to direct arbitrage\\n    ratio = BASE_18;\\n    if (oracleValue * BASE_18 < targetPrice * (BASE_18 - burnRatioDeviation)) {\\n      ratio = (oracleValue * BASE_18) / targetPrice;\\n    } else if (oracleValue < targetPrice) {\\n      oracleValue = targetPrice;\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    VIEW FUNCTIONS                                                  \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Internal version of the `getOracle` function\\n  function getOracle(address collateral)\\n    internal\\n    view\\n    returns (OracleReadType, OracleReadType, bytes memory, bytes memory, bytes memory)\\n  {\\n    return _parseOracleConfig(s.transmuterStorage().collaterals[collateral].oracleConfig);\\n  }\\n\\n  /// @notice Gets the oracle value and the ratio with respect to the target price when it comes to\\n  /// burning for `collateral`\\n  function getBurnOracle(\\n    address collateral,\\n    bytes memory oracleConfig\\n  )\\n    internal\\n    view\\n    returns (uint256 minRatio, uint256 oracleValue)\\n  {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    minRatio = BASE_18;\\n    address[] memory collateralList = ts.collateralList;\\n    uint256 length = collateralList.length;\\n    for (uint256 i; i < length; ++i) {\\n      uint256 ratioObserved = BASE_18;\\n      if (collateralList[i] != collateral) {\\n        (, ratioObserved) = readBurn(ts.collaterals[collateralList[i]].oracleConfig);\\n      } else {\\n        (oracleValue, ratioObserved) = readBurn(oracleConfig);\\n      }\\n      if (ratioObserved < minRatio) minRatio = ratioObserved;\\n    }\\n  }\\n\\n  /// @notice Computes the `quoteAmount` (for Chainlink oracles) depending on a `quoteType` and a base value\\n  /// (e.g the target price of the asset)\\n  /// @dev For cases where the Chainlink feed directly looks into the value of the asset, `quoteAmount` is `BASE_18`.\\n  /// For others, like wstETH for which Chainlink only has an oracle for stETH, `quoteAmount` is the target price\\n  function quoteAmount(OracleQuoteType quoteType, uint256 baseValue) internal pure returns (uint256) {\\n    if (quoteType == OracleQuoteType.UNIT) return BASE_18;\\n    else return baseValue;\\n  }\\n\\n  function readSpotAndTarget(\\n    OracleReadType oracleType,\\n    OracleReadType targetType,\\n    bytes memory oracleData,\\n    bytes memory targetData,\\n    uint256 deviation\\n  )\\n    internal\\n    view\\n    returns (uint256 oracleValue, uint256 targetPrice)\\n  {\\n    targetPrice = read(targetType, BASE_18, targetData);\\n    oracleValue = read(oracleType, targetPrice, oracleData);\\n    // System may tolerate small deviations from target\\n    // If the oracle value reported is reasonably close to the target\\n    // --> disregard the oracle value and return the target price\\n    if (\\n      targetPrice * (BASE_18 - deviation) < oracleValue * BASE_18\\n        && oracleValue * BASE_18 < targetPrice * (BASE_18 + deviation)\\n    ) oracleValue = targetPrice;\\n  }\\n\\n  /// @notice Reads an oracle value (or a target oracle value) for an asset based on its data parsed `oracleConfig`\\n  function read(OracleReadType readType, uint256 baseValue, bytes memory data) internal view returns (uint256) {\\n    if (readType == OracleReadType.CHAINLINK_FEEDS) {\\n      (\\n        AggregatorV3Interface[] memory circuitChainlink,\\n        uint32[] memory stalePeriods,\\n        uint8[] memory circuitChainIsMultiplied,\\n        uint8[] memory chainlinkDecimals,\\n        OracleQuoteType quoteType\\n      ) = abi.decode(data, (AggregatorV3Interface[], uint32[], uint8[], uint8[], OracleQuoteType));\\n      uint256 quotePrice = quoteAmount(quoteType, baseValue);\\n      uint256 listLength = circuitChainlink.length;\\n      for (uint256 i; i < listLength; ++i) {\\n        quotePrice = readChainlinkFeed(\\n          quotePrice, circuitChainlink[i], circuitChainIsMultiplied[i], chainlinkDecimals[i], stalePeriods[i]\\n        );\\n      }\\n      return quotePrice;\\n    } else if (readType == OracleReadType.STABLE) {\\n      return BASE_18;\\n    } else if (readType == OracleReadType.NO_ORACLE) {\\n      return baseValue;\\n    } else if (readType == OracleReadType.WSTETH) {\\n      return STETH.getPooledEthByShares(1 ether);\\n    } else if (readType == OracleReadType.CBETH) {\\n      return CBETH.exchangeRate();\\n    } else if (readType == OracleReadType.RETH) {\\n      return RETH.getExchangeRate();\\n    } else if (readType == OracleReadType.SFRXETH) {\\n      return SFRXETH.pricePerShare();\\n    } else if (readType == OracleReadType.MAX) {\\n      uint256 maxValue = abi.decode(data, (uint256));\\n      return maxValue;\\n    } else if (readType == OracleReadType.MORPHO_ORACLE) {\\n      (address contractAddress, uint256 normalizationFactor) = abi.decode(data, (address, uint256));\\n      return IMorphoOracle(contractAddress).price() / normalizationFactor;\\n    }\\n    // If the `OracleReadType` is `EXTERNAL`, it means that this function is called to compute a\\n    // `targetPrice` in which case the `baseValue` is returned here\\n    else {\\n      return baseValue;\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    SPECIFIC HELPERS                                                 \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Reads a Chainlink feed using a quote amount and converts the quote amount to the out-currency\\n  /// @param _quoteAmount The amount for which to compute the price expressed in `BASE_18`\\n  /// @param feed Chainlink feed to query\\n  /// @param multiplied Whether the ratio outputted by Chainlink should be multiplied or divided to the `quoteAmount`\\n  /// @param decimals Number of decimals of the corresponding Chainlink pair\\n  /// @return The `quoteAmount` converted in out-currency\\n  function readChainlinkFeed(\\n    uint256 _quoteAmount,\\n    AggregatorV3Interface feed,\\n    uint8 multiplied,\\n    uint256 decimals,\\n    uint32 stalePeriod\\n  )\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    (, int256 ratio,, uint256 updatedAt,) = feed.latestRoundData();\\n    if (ratio <= 0 || block.timestamp - updatedAt > stalePeriod) revert InvalidChainlinkRate();\\n    // Checking whether we should multiply or divide by the ratio computed\\n    if (multiplied == 1) return (_quoteAmount * uint256(ratio)) / (10 ** decimals);\\n    else return (_quoteAmount * (10 ** decimals)) / uint256(ratio);\\n  }\\n\\n  /// @notice Parses an `oracleConfig` into several sub fields\\n  function _parseOracleConfig(bytes memory oracleConfig)\\n    private\\n    pure\\n    returns (OracleReadType, OracleReadType, bytes memory, bytes memory, bytes memory)\\n  {\\n    return abi.decode(oracleConfig, (OracleReadType, OracleReadType, bytes, bytes, bytes));\\n  }\\n\\n  function updateOracle(address collateral) internal {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    if (ts.collaterals[collateral].decimals == 0) revert NotCollateral();\\n\\n    (\\n      OracleReadType oracleType,\\n      OracleReadType targetType,\\n      bytes memory oracleData,\\n      bytes memory targetData,\\n      bytes memory hyperparameters\\n    ) = _parseOracleConfig(ts.collaterals[collateral].oracleConfig);\\n\\n    if (targetType != OracleReadType.MAX) revert OracleUpdateFailed();\\n    uint256 oracleValue = read(oracleType, BASE_18, oracleData);\\n\\n    uint256 maxValue = abi.decode(targetData, (uint256));\\n    if (oracleValue > maxValue) {\\n      ts.collaterals[collateral].oracleConfig = abi.encode(\\n        oracleType,\\n        targetType,\\n        oracleData,\\n        // There are no checks whether the value increased or not\\n        abi.encode(oracleValue),\\n        hyperparameters\\n      );\\n    } else {\\n      revert OracleUpdateFailed();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1834c434aec56eb8d3c0d9467a28f9afde87216fe3b6662d220ef60fdbb419af\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/libraries/LibStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport \\\"../../utils/Constants.sol\\\";\\nimport { DiamondStorage, ImplementationStorage, MonetizerStorage } from \\\"../Storage.sol\\\";\\n\\n/// @title LibStorage\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This library is an authorized fork of Angle's `LibStorage` library\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/libraries/LibStorage.sol\\nlibrary LibStorage {\\n  /// @notice Returns the storage struct stored at the `DIAMOND_STORAGE_POSITION` slot\\n  /// @dev This struct handles the logic of the different facets used in the diamond proxy\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly (\\\"memory-safe\\\") {\\n      ds.slot := position\\n    }\\n  }\\n\\n  /// @notice Returns the storage struct stored at the `TRANSMUTER_STORAGE_POSITION` slot\\n  /// @dev This struct handles the particular logic of the Monetizer system\\n  function transmuterStorage() internal pure returns (MonetizerStorage storage ts) {\\n    bytes32 position = TRANSMUTER_STORAGE_POSITION;\\n    assembly (\\\"memory-safe\\\") {\\n      ts.slot := position\\n    }\\n  }\\n\\n  /// @notice Returns the storage struct stored at the `IMPLEMENTATION_STORAGE_POSITION` slot\\n  /// @dev This struct handles the logic for making the contract easily usable on Etherscan\\n  function implementationStorage() internal pure returns (ImplementationStorage storage ims) {\\n    bytes32 position = IMPLEMENTATION_STORAGE_POSITION;\\n    assembly (\\\"memory-safe\\\") {\\n      ims.slot := position\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xd990014177f2d92cb44d736faf7acff994e48b551910c7c7ba36c1faa2aa6169\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/libraries/LibWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { IKeyringGuard } from \\\"contracts/interfaces/external/keyring/IKeyringGuard.sol\\\";\\n\\nimport { LibStorage as s } from \\\"./LibStorage.sol\\\";\\n\\nimport \\\"../../utils/Errors.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\n/// @title LibWhitelist\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This library is an authorized fork of Angle's `LibWhitelist` library\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/libraries/LibWhitelist.sol\\nlibrary LibWhitelist {\\n  /// @notice Checks whether `sender` is whitelisted for a collateral with `whitelistData`\\n  function checkWhitelist(bytes memory whitelistData, address sender) internal returns (bool) {\\n    (WhitelistType whitelistType, bytes memory data) = abi.decode(whitelistData, (WhitelistType, bytes));\\n    if (s.transmuterStorage().isWhitelistedForType[whitelistType][sender] > 0) return true;\\n    if (data.length != 0) {\\n      if (whitelistType == WhitelistType.BACKED) {\\n        address keyringGuard = abi.decode(data, (address));\\n        if (keyringGuard != address(0)) return IKeyringGuard(keyringGuard).isAuthorized(address(this), sender);\\n      }\\n    }\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0xf28239fb3e44223d0ca09d1d0603e3d5b42b4c031c207db6a84df85141cf8f80\",\"license\":\"BUSL-1.1\"},\"project/contracts/utils/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { ICbETH } from \\\"contracts/interfaces/external/coinbase/ICbETH.sol\\\";\\nimport { ISfrxETH } from \\\"contracts/interfaces/external/frax/ISfrxETH.sol\\\";\\nimport { IStETH } from \\\"contracts/interfaces/external/lido/IStETH.sol\\\";\\nimport { IRETH } from \\\"contracts/interfaces/external/rocketPool/IRETH.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                 STORAGE SLOTS                                                  \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev Storage position of `DiamondStorage` structure\\n/// @dev Equals `keccak256(\\\"diamond.standard.diamond.storage\\\") - 1`\\nbytes32 constant DIAMOND_STORAGE_POSITION = 0xc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131b;\\n\\n/// @dev Storage position of `MonetizerStorage` structure\\n/// @dev Equals `keccak256(\\\"diamond.standard.monetizer.storage\\\") - 1`\\nbytes32 constant TRANSMUTER_STORAGE_POSITION = 0x4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c75;\\n\\n/// @dev Storage position of `ImplementationStorage` structure\\n/// @dev Equals `keccak256(\\\"eip1967.proxy.implementation\\\") - 1`\\nbytes32 constant IMPLEMENTATION_STORAGE_POSITION = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                     MATHS                                                      \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\nuint256 constant BASE_6 = 1e6;\\nuint256 constant BASE_8 = 1e8;\\nuint256 constant BASE_9 = 1e9;\\nuint256 constant BASE_12 = 1e12;\\nuint256 constant BPS = 1e14;\\nuint256 constant BASE_18 = 1e18;\\nuint256 constant HALF_BASE_27 = 1e27 / 2;\\nuint256 constant BASE_27 = 1e27;\\nuint256 constant BASE_36 = 1e36;\\nuint256 constant MAX_BURN_FEE = 999_000_000;\\nuint256 constant MAX_MINT_FEE = BASE_12 - 1;\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                     REENTRANT                                                      \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n// The values being non-zero value makes deployment a bit more expensive,\\n// but in exchange the refund on every call to nonReentrant will be lower in\\n// amount. Since refunds are capped to a percentage of the total\\n// transaction's gas, it is best to keep them low in cases like this one, to\\n// increase the likelihood of the full refund coming into effect.\\nuint8 constant NOT_ENTERED = 1;\\nuint8 constant ENTERED = 2;\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                     REENTRANT                                                      \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n// Role IDs for the AccessManager\\nuint64 constant GOVERNOR_ROLE = 10;\\nuint64 constant GUARDIAN_ROLE = 20;\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                               COMMON ADDRESSES                                                 \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\naddress constant PERMIT_2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\\naddress constant ODOS_ROUTER = 0xCf5540fFFCdC3d510B18bFcA6d2b9987b0772559;\\nICbETH constant CBETH = ICbETH(0xBe9895146f7AF43049ca1c1AE358B0541Ea49704);\\nIRETH constant RETH = IRETH(0xae78736Cd615f374D3085123A210448E74Fc6393);\\nIStETH constant STETH = IStETH(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);\\nISfrxETH constant SFRXETH = ISfrxETH(0xac3E018457B222d93114458476f3E3416Abbe38F);\\naddress constant XEVT = 0x3Ee320c9F73a84D1717557af00695A34b26d1F1d;\\naddress constant USDM = 0x59D9356E565Ab3A36dD77763Fc0d87fEaf85508C;\\naddress constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\naddress constant EURC = 0x1aBaEA1f7C830bD89Acc67eC4af516284b1bC33c;\\n\",\"keccak256\":\"0x386d47583c6deb04a0a42883fa8fb12b7def1461b6d6232cf09cd5899db666fd\",\"license\":\"BUSL-1.1\"},\"project/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nerror AccessManagedUnauthorized(address caller);\\nerror AlreadyAdded();\\nerror CannotAddFunctionToDiamondThatAlreadyExists(bytes4 _selector);\\nerror CannotAddSelectorsToZeroAddress(bytes4[] _selectors);\\nerror CannotRemoveFunctionThatDoesNotExist(bytes4 _selector);\\nerror CannotRemoveImmutableFunction(bytes4 _selector);\\nerror CannotReplaceFunctionsFromFacetWithZeroAddress(bytes4[] _selectors);\\nerror CannotReplaceFunctionThatDoesNotExists(bytes4 _selector);\\nerror CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet(bytes4 _selector);\\nerror CannotReplaceImmutableFunction(bytes4 _selector);\\nerror ContractHasNoCode();\\nerror CollateralBacked();\\nerror FunctionNotFound(bytes4 _functionSelector);\\nerror IncorrectFacetCutAction(uint8 _action);\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\nerror InvalidChainlinkRate();\\nerror InvalidLengths();\\nerror InvalidNegativeFees();\\nerror InvalidOracleType();\\nerror InvalidParam();\\nerror InvalidParams();\\nerror InvalidRate();\\nerror InvalidSwap();\\nerror InvalidTokens();\\nerror InvalidAccessManager();\\nerror ManagerHasAssets();\\nerror NoSelectorsProvidedForFacetForCut(address _facetAddress);\\nerror NotAllowed();\\nerror NotCollateral();\\nerror NotGovernor();\\nerror NotGuardian();\\nerror NotTrusted();\\nerror NotTrustedOrGuardian();\\nerror NotWhitelisted();\\nerror OdosSwapFailed();\\nerror OracleUpdateFailed();\\nerror Paused();\\nerror ReentrantCall();\\nerror RemoveFacetAddressMustBeZeroAddress(address _facetAddress);\\nerror TooBigAmountIn();\\nerror TooLate();\\nerror TooSmallAmountOut();\\nerror ZeroAddress();\\nerror ZeroAmount();\\nerror SwapError();\\nerror SlippageTooHigh();\\nerror InsufficientFunds();\\n\",\"keccak256\":\"0x1e2f6812ef78e948e5155d32213b52afff8c0ba5463d18bee10694efbf886130\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "quoteIn(uint256,address,address)": {
        "notice": "Simulates what a call to `swapExactInput` with `amountIn` of `tokenIn` for `tokenOut` would give. If called right before and at the same block, the `amountOut` outputted by this function is exactly the amount that will be obtained with `swapExactInput`"
      },
      "quoteOut(uint256,address,address)": {
        "notice": "Simulates what a call to `swapExactOutput` for `amountOut` of `tokenOut` with `tokenIn` would give. If called right before and at the same block, the `amountIn` outputted by this function is exactly the amount that will be obtained with `swapExactOutput`"
      },
      "swapExactInput(uint256,uint256,address,address,address,uint256)": {
        "notice": "Swaps (that is to say mints or burns) an exact amount of `tokenIn` for an amount of `tokenOut`"
      },
      "swapExactInputWithPermit(uint256,uint256,address,address,uint256,bytes)": {
        "notice": "Same as `swapExactInput`, but using Permit2 signatures for `tokenIn`"
      },
      "swapExactOutput(uint256,uint256,address,address,address,uint256)": {
        "notice": "Swaps (that is to say mints or burns) an amount of `tokenIn` for an exact amount of `tokenOut`"
      },
      "swapExactOutputWithPermit(uint256,uint256,address,address,uint256,bytes)": {
        "notice": "Same as `swapExactOutput`, but using Permit2 signatures for `tokenIn`"
      }
    },
    "version": 1
  },
  "argsData": "0x",
  "transaction": {
    "hash": "0xf8a3a07212d24898632003150741df2eedf3dec3fc87d41dd26556b6388de9d9",
    "nonce": "0x3c",
    "origin": "0x10a852971d242a04829b541c32f09ad9ec1b227d"
  },
  "receipt": {
    "blockHash": "0x2442887c7c8f98b11d4e6fa5264787b49ed1aac9e8385f64fe3e2fd5ec557785",
    "blockNumber": "0x1ad187",
    "transactionIndex": "0x0"
  }
}