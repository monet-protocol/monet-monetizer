{
  "address": "0xbf90085684976b84fdaa18ac42c0e8e4b277a115",
  "abi": [
    {
      "inputs": [],
      "name": "AlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAccessManager",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidChainlinkRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidNegativeFees",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotCollateral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OracleUpdateFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        }
      ],
      "name": "CollateralAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "xFee",
          "type": "uint64[]"
        },
        {
          "indexed": false,
          "internalType": "int64[]",
          "name": "yFee",
          "type": "int64[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "mint",
          "type": "bool"
        }
      ],
      "name": "FeesSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "oracleConfig",
          "type": "bytes"
        }
      ],
      "name": "OracleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pausedType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPaused",
          "type": "bool"
        }
      ],
      "name": "PauseToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64[]",
          "name": "xFee",
          "type": "uint64[]"
        },
        {
          "indexed": false,
          "internalType": "int64[]",
          "name": "yFee",
          "type": "int64[]"
        }
      ],
      "name": "RedemptionCurveParamsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stablecoinCap",
          "type": "uint256"
        }
      ],
      "name": "StablecoinCapSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAccessManager",
          "name": "_accessManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenP",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "targetMax",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "oracleConfig",
              "type": "bytes"
            },
            {
              "internalType": "uint64[]",
              "name": "xMintFee",
              "type": "uint64[]"
            },
            {
              "internalType": "int64[]",
              "name": "yMintFee",
              "type": "int64[]"
            },
            {
              "internalType": "uint64[]",
              "name": "xBurnFee",
              "type": "uint64[]"
            },
            {
              "internalType": "int64[]",
              "name": "yBurnFee",
              "type": "int64[]"
            }
          ],
          "internalType": "struct CollateralSetup[]",
          "name": "_collaterals",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint64[]",
              "name": "xRedeemFee",
              "type": "uint64[]"
            },
            {
              "internalType": "int64[]",
              "name": "yRedeemFee",
              "type": "int64[]"
            }
          ],
          "internalType": "struct RedemptionSetup",
          "name": "_redemptionSetup",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "contractName": "DiamondInitializer",
  "sourceName": "contracts/monetizer/configs/DiamondInitializer.sol",
  "bytecode": "0x6080604052348015600e575f5ffd5b50612f9a8061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063f2238ad41461002d575b5f5ffd5b61004061003b36600461239d565b610042565b005b61004b84610209565b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7580547f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7680546fffffffffffffffffffffffffffffffff167b033b2e3c9fd0803ce80000000000000000000000000000000000000017905575010000000000000000000000000000000000000000007fffffffffffffffffffff00ff000000000000000000000000000000000000000090911673ffffffffffffffffffffffffffffffffffffffff86161717815582515f5b818110156101dc575f858281518110610138576101386125b0565b6020026020010151905061014e815f0151610312565b61015f815f015182604001516104e1565b610177815f01518260600151836080015160016105d7565b61018e815f01518260a001518360c001515f6105d7565b805161019a905f610756565b80516101a7906001610756565b80516101be906a52b7d2dcc80cd2e40000006109b8565b8060200151156101d35780516101d390610a91565b5060010161011d565b5082515115610201576101f05f6002610756565b610201835f01518460200151610d59565b505050505050565b8073ffffffffffffffffffffffffffffffffffffffff163b5f03610259576040517fa98154e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d80547fffffffffffffffffffffffff0000000000000000000000000000000000000000811673ffffffffffffffffffffffffffffffffffffffff8481169182179093556040517fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131b939092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b73ffffffffffffffffffffffffffffffffffffffff81165f9081527f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7a6020526040902080547f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7591906301000000900460ff16156103bb576040517ff411c32700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610404573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061042891906125ed565b815460ff919091166301000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff9091161781556002820180546001810182555f9182526020822001805473ffffffffffffffffffffffffffffffffffffffff86167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915560405190917f7db05e63d635a68c62fd7fd8f3107ae8ab584a383e102d1bd8a40f4c977e465f91a2505050565b73ffffffffffffffffffffffffffffffffffffffff82165f9081527f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7a6020526040812080549091630100000090910460ff16900361056b576040517f373f15fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61057482610df0565b506005810161058383826126a3565b508273ffffffffffffffffffffffffffffffffffffffff167fba11329c0b0f98b91c254755aa8d698feac3b46fab65b65fe5ab7570de2ff928836040516105ca919061278c565b60405180910390a2505050565b73ffffffffffffffffffffffffffffffffffffffff84165f9081527f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7a6020526040812080547f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7592630100000090910460ff169003610681576040517f373f15fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610698858585610692576001610f09565b5f610f09565b82156106cf5784516106b39060018301906020880190611f7a565b5083516106c99060028301906020870190612032565b506106fc565b84516106e49060038301906020880190611f7a565b5083516106fa9060048301906020870190612032565b505b8573ffffffffffffffffffffffffffffffffffffffff167f8abfb482e6f6ae87066f0006f10aff1738f4182d4f66b7a084685e4a6c51cfad86868660405161074693929190612815565b60405180910390a2505050505050565b5f8082600281111561076a5761076a61284c565b1480610787575060018260028111156107855761078561284c565b145b156108c85773ffffffffffffffffffffffffffffffffffffffff83165f9081527f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7a6020526040812080549091630100000090910460ff169003610816576040517f373f15fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8360028111156108295761082961284c565b0361087957805461084390610100900460ff1660016128a6565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010060ff83160217825591506108c2565b805461088f9062010000900460ff1660016128a6565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff166201000060ff83160217825591505b50610957565b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7580546109119074010000000000000000000000000000000000000000900460ff1660016128a6565b81547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000060ff8316021790915590505b8273ffffffffffffffffffffffffffffffffffffffff167f3da495aea17ab24773f3161f4707961a797e39147ce4f8a8fbac0309a4a2d2e48360028111156109a1576109a161284c565b6040805191825260ff8516156020830152016105ca565b73ffffffffffffffffffffffffffffffffffffffff82165f9081527f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7a6020526040812080549091630100000090910460ff169003610a42576040517f373f15fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6009810182905560405182815273ffffffffffffffffffffffffffffffffffffffff8416907feb6fe4a9f159360e971932dac27da07532267236a5423eaa27ea9f1cc641354e906020016105ca565b73ffffffffffffffffffffffffffffffffffffffff81165f9081527f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7a60205260408120547f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7591630100000090910460ff169003610b3a576040517f373f15fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5f5f5f5f610c10866005015f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206005018054610b8f90612606565b80601f0160208091040260200160405190810160405280929190818152602001828054610bbb90612606565b8015610c065780601f10610bdd57610100808354040283529160200191610c06565b820191905f5260205f20905b815481529060010190602001808311610be957829003601f168201915b5050505050611869565b9398509196509450925090506008846009811115610c3057610c3061284c565b14610c67576040517faa2d4fb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610c7b86670de0b6b3a764000086611896565b90505f83806020019051810190610c9291906128bf565b905080821115610d1c5786868684604051602001610cb291815260200190565b60408051601f1981840301815290829052610cd494939291889060200161290f565b60408051601f1981840301815291815273ffffffffffffffffffffffffffffffffffffffff8b165f9081526005808c016020529190200190610d1690826126a3565b50610d4e565b6040517faa2d4fb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050505050565b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c75610d8683836002610f09565b8251610d9b9060038301906020860190611f7a565b508151610db19060048301906020850190612032565b507fdd1690e851f57f138700d42b0a081b3b1b9a97dd2cb2aabc25c92658736290648383604051610de3929190612961565b60405180910390a1505050565b5f5f5f5f5f5f610dff87611869565b9398509196509450925090506001856009811115610e1f57610e1f61284c565b03610eb4575f83806020019051810190610e399190612985565b90508073ffffffffffffffffffffffffffffffffffffffff16635ade93556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e84573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ea891906128bf565b98975050505050505050565b5f81806020019051810190610ec991906129bf565b5090505f610eec87878787866fffffffffffffffffffffffffffffffff16611ccb565b909850905087811015610efd578097505b50505050505050919050565b8251825181141580610f19575080155b15610f50576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f826002811115610f6357610f6361284c565b1480156110035750633b9aca0084610f7c6001846129f0565b81518110610f8c57610f8c6125b0565b602002602001015167ffffffffffffffff16101580610fce5750835f81518110610fb857610fb86125b0565b602002602001015167ffffffffffffffff165f14155b80611003575064e8d4a5100083610fe66001846129f0565b81518110610ff657610ff66125b0565b602002602001015160070b135b806110d35750600182600281111561101d5761101d61284c565b1480156110d35750633b9aca00845f8151811061103c5761103c6125b0565b602002602001015167ffffffffffffffff161415806110845750633b9aca00836110676001846129f0565b81518110611077576110776125b0565b602002602001015160070b135b806110d357506001811180156110d35750826001815181106110a8576110a86125b0565b602002602001015160070b835f815181106110c5576110c56125b0565b602002602001015160070b14155b8061118d575060028260028111156110ed576110ed61284c565b14801561118d5750633b9aca00846111066001846129f0565b81518110611116576111166125b0565b602002602001015167ffffffffffffffff16118061115957505f8361113c6001846129f0565b8151811061114c5761114c6125b0565b602002602001015160070b125b8061118d5750633b9aca00836111706001846129f0565b81518110611180576111806125b0565b602002602001015160070b135b156111c4576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b6111d16001836129f0565b81101561145e575f8360028111156111eb576111eb61284c565b1480156112955750846111ff826001612a03565b8151811061120f5761120f6125b0565b602002602001015167ffffffffffffffff16858281518110611233576112336125b0565b602002602001015167ffffffffffffffff16101580611295575083818151811061125f5761125f6125b0565b602002602001015160070b848260016112789190612a03565b81518110611288576112886125b0565b602002602001015160070b125b80611359575060018360028111156112af576112af61284c565b1480156113595750846112c3826001612a03565b815181106112d3576112d36125b0565b602002602001015167ffffffffffffffff168582815181106112f7576112f76125b0565b602002602001015167ffffffffffffffff161115806113595750838181518110611323576113236125b0565b602002602001015160070b8482600161133c9190612a03565b8151811061134c5761134c6125b0565b602002602001015160070b125b8061141f575060028360028111156113735761137361284c565b14801561141f575084611387826001612a03565b81518110611397576113976125b0565b602002602001015167ffffffffffffffff168582815181106113bb576113bb6125b0565b602002602001015167ffffffffffffffff161015806113f557505f8482815181106113e8576113e86125b0565b602002602001015160070b125b8061141f5750633b9aca00848281518110611412576114126125b0565b602002602001015160070b135b15611456576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001016111c6565b505f835f81518110611472576114726125b0565b602002602001015160070b12156118635761148c33611d68565b6114c2576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c778054604080516020808402820181019092528281527f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c75935f93919290919083018282801561156557602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161153a575b505083519394505f9250611577915050565b8560028111156115895761158961284c565b036116ea575f5b818110156116e8575f846005015f8584815181106115b0576115b06125b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060040180548060200260200160405190810160405280929190818152602001828054801561165e57602002820191905f5260205f20905f905b825461010083900a900460070b81526020600f830181900493840193600103600890930192909202910180841161162a5790505b505050505090505f885f81518110611678576116786125b0565b6020026020010151825f81518110611692576116926125b0565b60200260200101516116a49190612a16565b60070b12156116df576040517f1133612100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600101611590565b505b60018560028111156116fe576116fe61284c565b0361185f575f5b8181101561185d575f846005015f858481518110611725576117256125b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002018054806020026020016040519081016040528092919081815260200182805480156117d357602002820191905f5260205f20905f905b825461010083900a900460070b81526020600f830181900493840193600103600890930192909202910180841161179f5790505b505050505090505f815f815181106117ed576117ed6125b0565b6020026020010151895f81518110611807576118076125b0565b60200260200101516118199190612a16565b60070b1215611854576040517f1133612100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600101611705565b505b5050505b50505050565b5f5f6060806060858060200190518101906118849190612ab7565b939a9299509097509550909350915050565b5f808460098111156118aa576118aa61284c565b0361197a575f5f5f5f5f868060200190518101906118c89190612c4b565b945094509450945094505f6118dd828a611e2c565b86519091505f5b8181101561196a5761196083898381518110611902576119026125b0565b602002602001015188848151811061191c5761191c6125b0565b6020026020010151888581518110611936576119366125b0565b602002602001015160ff168b8681518110611953576119536125b0565b6020026020010151611e5d565b92506001016118e4565b5081975050505050505050611cc4565b600384600981111561198e5761198e61284c565b036119a25750670de0b6b3a7640000611cc4565b60028460098111156119b6576119b661284c565b036119c2575081611cc4565b60048460098111156119d6576119d661284c565b03611a74576040517f7a28fb88000000000000000000000000000000000000000000000000000000008152670de0b6b3a7640000600482015273ae7ab96520de3a18e5e111b5eaab095312d7fe8490637a28fb8890602401602060405180830381865afa158015611a49573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a6d91906128bf565b9050611cc4565b6005846009811115611a8857611a8861284c565b03611aea5773be9895146f7af43049ca1c1ae358b0541ea4970473ffffffffffffffffffffffffffffffffffffffff16633ba0b9a96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a49573d5f5f3e3d5ffd5b6006846009811115611afe57611afe61284c565b03611b605773ae78736cd615f374d3085123a210448e74fc639373ffffffffffffffffffffffffffffffffffffffff1663e6aa216c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a49573d5f5f3e3d5ffd5b6007846009811115611b7457611b7461284c565b03611bd65773ac3e018457b222d93114458476f3e3416abbe38f73ffffffffffffffffffffffffffffffffffffffff166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a49573d5f5f3e3d5ffd5b6008846009811115611bea57611bea61284c565b03611c0d575f82806020019051810190611c0491906128bf565b9150611cc49050565b6009846009811115611c2157611c2161284c565b03611cc1575f5f83806020019051810190611c3c9190612d76565b91509150808273ffffffffffffffffffffffffffffffffffffffff1663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c8a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cae91906128bf565b611cb89190612da2565b92505050611cc4565b50815b9392505050565b5f5f611ce086670de0b6b3a764000086611896565b9050611ced878287611896565b9150611d01670de0b6b3a764000083612dda565b611d1384670de0b6b3a76400006129f0565b611d1d9083612dda565b108015611d555750611d3783670de0b6b3a7640000612a03565b611d419082612dda565b611d53670de0b6b3a764000084612dda565b105b15611d5e578091505b9550959350505050565b5f807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131b600201546040517fd1f856ee000000000000000000000000000000000000000000000000000000008152600a600482015273ffffffffffffffffffffffffffffffffffffffff85811660248301529091169063d1f856ee906044016040805180830381865afa158015611e00573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e249190612df1565b509392505050565b5f80836001811115611e4057611e4061284c565b03611e545750670de0b6b3a7640000611e57565b50805b92915050565b5f5f5f8673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611ea9573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ecd9190612e34565b509350509250505f82131580611ef1575063ffffffff8416611eef82426129f0565b115b15611f28576040517fae19356300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8560ff16600103611f5b57611f3e85600a612f59565b611f48838a612dda565b611f529190612da2565b92505050611f71565b81611f6786600a612f59565b611f48908a612dda565b95945050505050565b828054828255905f5260205f2090600301600490048101928215612022579160200282015f5b83821115611fec57835183826101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509260200192600801602081600701049283019260010302611fa0565b80156120205782816101000a81549067ffffffffffffffff0219169055600801602081600701049283019260010302611fec565b505b5061202e9291506120a7565b5090565b828054828255905f5260205f2090600301600490048101928215612022579160200282015f5b83821115611fec57835183826101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff1602179055509260200192600801602081600701049283019260010302612058565b5b8082111561202e575f81556001016120a8565b73ffffffffffffffffffffffffffffffffffffffff811681146120dc575f5ffd5b50565b80356120ea816120bb565b919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b60405160e0810167ffffffffffffffff8111828210171561213f5761213f6120ef565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561216e5761216e6120ef565b604052919050565b5f67ffffffffffffffff82111561218f5761218f6120ef565b5060051b60200190565b80151581146120dc575f5ffd5b80356120ea81612199565b5f67ffffffffffffffff8211156121ca576121ca6120ef565b50601f01601f191660200190565b5f82601f8301126121e7575f5ffd5b81356121fa6121f5826121b1565b612145565b81815284602083860101111561220e575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f82601f830112612239575f5ffd5b81356122476121f582612176565b8082825260208201915060208360051b860101925085831115612268575f5ffd5b602085015b8381101561229a57803567ffffffffffffffff8116811461228c575f5ffd5b83526020928301920161226d565b5095945050505050565b5f82601f8301126122b3575f5ffd5b81356122c16121f582612176565b8082825260208201915060208360051b8601019250858311156122e2575f5ffd5b602085015b8381101561229a5780358060070b81146122ff575f5ffd5b8352602092830192016122e7565b5f6040828403121561231d575f5ffd5b6040805190810167ffffffffffffffff81118282101715612340576123406120ef565b604052905080823567ffffffffffffffff81111561235c575f5ffd5b6123688582860161222a565b825250602083013567ffffffffffffffff811115612384575f5ffd5b612390858286016122a4565b6020830152505092915050565b5f5f5f5f608085870312156123b0575f5ffd5b84356123bb816120bb565b935060208501356123cb816120bb565b9250604085013567ffffffffffffffff8111156123e6575f5ffd5b8501601f810187136123f6575f5ffd5b80356124046121f582612176565b8082825260208201915060208360051b850101925089831115612425575f5ffd5b602084015b8381101561257957803567ffffffffffffffff811115612448575f5ffd5b850160e0818d03601f1901121561245d575f5ffd5b61246561211c565b612471602083016120df565b815261247f604083016121a6565b6020820152606082013567ffffffffffffffff81111561249d575f5ffd5b6124ac8e6020838601016121d8565b604083015250608082013567ffffffffffffffff8111156124cb575f5ffd5b6124da8e60208386010161222a565b60608301525060a082013567ffffffffffffffff8111156124f9575f5ffd5b6125088e6020838601016122a4565b60808301525060c082013567ffffffffffffffff811115612527575f5ffd5b6125368e60208386010161222a565b60a08301525060e082013567ffffffffffffffff811115612555575f5ffd5b6125648e6020838601016122a4565b60c0830152508452506020928301920161242a565b509450505050606085013567ffffffffffffffff811115612598575f5ffd5b6125a48782880161230d565b91505092959194509250565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b805160ff811681146120ea575f5ffd5b5f602082840312156125fd575f5ffd5b611cc4826125dd565b600181811c9082168061261a57607f821691505b602082108103612651577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b601f82111561269e57805f5260205f20601f840160051c8101602085101561267c5750805b601f840160051c820191505b8181101561269b575f8155600101612688565b50505b505050565b815167ffffffffffffffff8111156126bd576126bd6120ef565b6126d1816126cb8454612606565b84612657565b6020601f821160018114612703575f83156126ec5750848201515b5f19600385901b1c1916600184901b17845561269b565b5f84815260208120601f198516915b828110156127325787850151825560209485019460019092019101612712565b508482101561274f57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f611cc4602083018461275e565b5f8151808452602084019350602083015f5b828110156127d857815167ffffffffffffffff168652602095860195909101906001016127b0565b5093949350505050565b5f8151808452602084019350602083015f5b828110156127d857815160070b8652602095860195909101906001016127f4565b606081525f612827606083018661279e565b828103602084015261283981866127e2565b9150508215156040830152949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b60ff8281168282160390811115611e5757611e57612879565b5f602082840312156128cf575f5ffd5b5051919050565b600a811061290b577f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b9052565b61291981876128d6565b61292660208201866128d6565b60a060408201525f61293b60a083018661275e565b828103606084015261294d818661275e565b90508281036080840152610ea8818561275e565b604081525f612973604083018561279e565b8281036020840152611f7181856127e2565b5f60208284031215612995575f5ffd5b8151611cc4816120bb565b80516fffffffffffffffffffffffffffffffff811681146120ea575f5ffd5b5f5f604083850312156129d0575f5ffd5b6129d9836129a0565b91506129e7602084016129a0565b90509250929050565b81810381811115611e5757611e57612879565b80820180821115611e5757611e57612879565b600781810b9083900b01677fffffffffffffff81137fffffffffffffffffffffffffffffffffffffffffffffffff800000000000000082121715611e5757611e57612879565b8051600a81106120ea575f5ffd5b5f82601f830112612a79575f5ffd5b8151612a876121f5826121b1565b818152846020838601011115612a9b575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b5f5f5f5f5f60a08688031215612acb575f5ffd5b612ad486612a5c565b9450612ae260208701612a5c565b9350604086015167ffffffffffffffff811115612afd575f5ffd5b612b0988828901612a6a565b935050606086015167ffffffffffffffff811115612b25575f5ffd5b612b3188828901612a6a565b925050608086015167ffffffffffffffff811115612b4d575f5ffd5b612b5988828901612a6a565b9150509295509295909350565b805163ffffffff811681146120ea575f5ffd5b5f82601f830112612b88575f5ffd5b8151612b966121f582612176565b8082825260208201915060208360051b860101925085831115612bb7575f5ffd5b602085015b8381101561229a57612bcd81612b66565b835260209283019201612bbc565b5f82601f830112612bea575f5ffd5b8151612bf86121f582612176565b8082825260208201915060208360051b860101925085831115612c19575f5ffd5b602085015b8381101561229a57612c2f816125dd565b835260209283019201612c1e565b8051600281106120ea575f5ffd5b5f5f5f5f5f60a08688031215612c5f575f5ffd5b855167ffffffffffffffff811115612c75575f5ffd5b8601601f81018813612c85575f5ffd5b8051612c936121f582612176565b8082825260208201915060208360051b85010192508a831115612cb4575f5ffd5b6020840193505b82841015612cdf578351612cce816120bb565b825260209384019390910190612cbb565b80985050505050602086015167ffffffffffffffff811115612cff575f5ffd5b612d0b88828901612b79565b945050604086015167ffffffffffffffff811115612d27575f5ffd5b612d3388828901612bdb565b935050606086015167ffffffffffffffff811115612d4f575f5ffd5b612d5b88828901612bdb565b925050612d6a60808701612c3d565b90509295509295909350565b5f5f60408385031215612d87575f5ffd5b8251612d92816120bb565b6020939093015192949293505050565b5f82612dd5577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b8082028115828204841417611e5757611e57612879565b5f5f60408385031215612e02575f5ffd5b8251612e0d81612199565b91506129e760208401612b66565b805169ffffffffffffffffffff811681146120ea575f5ffd5b5f5f5f5f5f60a08688031215612e48575f5ffd5b612e5186612e1b565b60208701516040880151606089015192975090955093509150612d6a60808701612e1b565b6001815b6001841115612eb157808504811115612e9557612e95612879565b6001841615612ea357908102905b60019390931c928002612e7a565b935093915050565b5f82612ec757506001611e57565b81612ed357505f611e57565b8160018114612ee95760028114612ef357612f0f565b6001915050611e57565b60ff841115612f0457612f04612879565b50506001821b611e57565b5060208310610133831016604e8410600b8410161715612f32575081810a611e57565b612f3e5f198484612e76565b805f1904821115612f5157612f51612879565b029392505050565b5f611cc48383612eb956fea264697066735822122090eab4e7f42cb438f0c3f5fa06ef62c449dc823ae12a4ec50c0c4edd05f2382d64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561000f575f5ffd5b5060043610610029575f3560e01c8063f2238ad41461002d575b5f5ffd5b61004061003b36600461239d565b610042565b005b61004b84610209565b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7580547f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7680546fffffffffffffffffffffffffffffffff167b033b2e3c9fd0803ce80000000000000000000000000000000000000017905575010000000000000000000000000000000000000000007fffffffffffffffffffff00ff000000000000000000000000000000000000000090911673ffffffffffffffffffffffffffffffffffffffff86161717815582515f5b818110156101dc575f858281518110610138576101386125b0565b6020026020010151905061014e815f0151610312565b61015f815f015182604001516104e1565b610177815f01518260600151836080015160016105d7565b61018e815f01518260a001518360c001515f6105d7565b805161019a905f610756565b80516101a7906001610756565b80516101be906a52b7d2dcc80cd2e40000006109b8565b8060200151156101d35780516101d390610a91565b5060010161011d565b5082515115610201576101f05f6002610756565b610201835f01518460200151610d59565b505050505050565b8073ffffffffffffffffffffffffffffffffffffffff163b5f03610259576040517fa98154e200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d80547fffffffffffffffffffffffff0000000000000000000000000000000000000000811673ffffffffffffffffffffffffffffffffffffffff8481169182179093556040517fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131b939092169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b73ffffffffffffffffffffffffffffffffffffffff81165f9081527f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7a6020526040902080547f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7591906301000000900460ff16156103bb576040517ff411c32700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610404573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061042891906125ed565b815460ff919091166301000000027fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffff9091161781556002820180546001810182555f9182526020822001805473ffffffffffffffffffffffffffffffffffffffff86167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116811790915560405190917f7db05e63d635a68c62fd7fd8f3107ae8ab584a383e102d1bd8a40f4c977e465f91a2505050565b73ffffffffffffffffffffffffffffffffffffffff82165f9081527f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7a6020526040812080549091630100000090910460ff16900361056b576040517f373f15fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61057482610df0565b506005810161058383826126a3565b508273ffffffffffffffffffffffffffffffffffffffff167fba11329c0b0f98b91c254755aa8d698feac3b46fab65b65fe5ab7570de2ff928836040516105ca919061278c565b60405180910390a2505050565b73ffffffffffffffffffffffffffffffffffffffff84165f9081527f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7a6020526040812080547f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7592630100000090910460ff169003610681576040517f373f15fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610698858585610692576001610f09565b5f610f09565b82156106cf5784516106b39060018301906020880190611f7a565b5083516106c99060028301906020870190612032565b506106fc565b84516106e49060038301906020880190611f7a565b5083516106fa9060048301906020870190612032565b505b8573ffffffffffffffffffffffffffffffffffffffff167f8abfb482e6f6ae87066f0006f10aff1738f4182d4f66b7a084685e4a6c51cfad86868660405161074693929190612815565b60405180910390a2505050505050565b5f8082600281111561076a5761076a61284c565b1480610787575060018260028111156107855761078561284c565b145b156108c85773ffffffffffffffffffffffffffffffffffffffff83165f9081527f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7a6020526040812080549091630100000090910460ff169003610816576040517f373f15fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8360028111156108295761082961284c565b0361087957805461084390610100900460ff1660016128a6565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010060ff83160217825591506108c2565b805461088f9062010000900460ff1660016128a6565b81547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffff166201000060ff83160217825591505b50610957565b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7580546109119074010000000000000000000000000000000000000000900460ff1660016128a6565b81547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000060ff8316021790915590505b8273ffffffffffffffffffffffffffffffffffffffff167f3da495aea17ab24773f3161f4707961a797e39147ce4f8a8fbac0309a4a2d2e48360028111156109a1576109a161284c565b6040805191825260ff8516156020830152016105ca565b73ffffffffffffffffffffffffffffffffffffffff82165f9081527f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7a6020526040812080549091630100000090910460ff169003610a42576040517f373f15fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6009810182905560405182815273ffffffffffffffffffffffffffffffffffffffff8416907feb6fe4a9f159360e971932dac27da07532267236a5423eaa27ea9f1cc641354e906020016105ca565b73ffffffffffffffffffffffffffffffffffffffff81165f9081527f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7a60205260408120547f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7591630100000090910460ff169003610b3a576040517f373f15fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5f5f5f5f610c10866005015f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206005018054610b8f90612606565b80601f0160208091040260200160405190810160405280929190818152602001828054610bbb90612606565b8015610c065780601f10610bdd57610100808354040283529160200191610c06565b820191905f5260205f20905b815481529060010190602001808311610be957829003601f168201915b5050505050611869565b9398509196509450925090506008846009811115610c3057610c3061284c565b14610c67576040517faa2d4fb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610c7b86670de0b6b3a764000086611896565b90505f83806020019051810190610c9291906128bf565b905080821115610d1c5786868684604051602001610cb291815260200190565b60408051601f1981840301815290829052610cd494939291889060200161290f565b60408051601f1981840301815291815273ffffffffffffffffffffffffffffffffffffffff8b165f9081526005808c016020529190200190610d1690826126a3565b50610d4e565b6040517faa2d4fb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050505050565b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c75610d8683836002610f09565b8251610d9b9060038301906020860190611f7a565b508151610db19060048301906020850190612032565b507fdd1690e851f57f138700d42b0a081b3b1b9a97dd2cb2aabc25c92658736290648383604051610de3929190612961565b60405180910390a1505050565b5f5f5f5f5f5f610dff87611869565b9398509196509450925090506001856009811115610e1f57610e1f61284c565b03610eb4575f83806020019051810190610e399190612985565b90508073ffffffffffffffffffffffffffffffffffffffff16635ade93556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e84573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ea891906128bf565b98975050505050505050565b5f81806020019051810190610ec991906129bf565b5090505f610eec87878787866fffffffffffffffffffffffffffffffff16611ccb565b909850905087811015610efd578097505b50505050505050919050565b8251825181141580610f19575080155b15610f50576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f826002811115610f6357610f6361284c565b1480156110035750633b9aca0084610f7c6001846129f0565b81518110610f8c57610f8c6125b0565b602002602001015167ffffffffffffffff16101580610fce5750835f81518110610fb857610fb86125b0565b602002602001015167ffffffffffffffff165f14155b80611003575064e8d4a5100083610fe66001846129f0565b81518110610ff657610ff66125b0565b602002602001015160070b135b806110d35750600182600281111561101d5761101d61284c565b1480156110d35750633b9aca00845f8151811061103c5761103c6125b0565b602002602001015167ffffffffffffffff161415806110845750633b9aca00836110676001846129f0565b81518110611077576110776125b0565b602002602001015160070b135b806110d357506001811180156110d35750826001815181106110a8576110a86125b0565b602002602001015160070b835f815181106110c5576110c56125b0565b602002602001015160070b14155b8061118d575060028260028111156110ed576110ed61284c565b14801561118d5750633b9aca00846111066001846129f0565b81518110611116576111166125b0565b602002602001015167ffffffffffffffff16118061115957505f8361113c6001846129f0565b8151811061114c5761114c6125b0565b602002602001015160070b125b8061118d5750633b9aca00836111706001846129f0565b81518110611180576111806125b0565b602002602001015160070b135b156111c4576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b6111d16001836129f0565b81101561145e575f8360028111156111eb576111eb61284c565b1480156112955750846111ff826001612a03565b8151811061120f5761120f6125b0565b602002602001015167ffffffffffffffff16858281518110611233576112336125b0565b602002602001015167ffffffffffffffff16101580611295575083818151811061125f5761125f6125b0565b602002602001015160070b848260016112789190612a03565b81518110611288576112886125b0565b602002602001015160070b125b80611359575060018360028111156112af576112af61284c565b1480156113595750846112c3826001612a03565b815181106112d3576112d36125b0565b602002602001015167ffffffffffffffff168582815181106112f7576112f76125b0565b602002602001015167ffffffffffffffff161115806113595750838181518110611323576113236125b0565b602002602001015160070b8482600161133c9190612a03565b8151811061134c5761134c6125b0565b602002602001015160070b125b8061141f575060028360028111156113735761137361284c565b14801561141f575084611387826001612a03565b81518110611397576113976125b0565b602002602001015167ffffffffffffffff168582815181106113bb576113bb6125b0565b602002602001015167ffffffffffffffff161015806113f557505f8482815181106113e8576113e86125b0565b602002602001015160070b125b8061141f5750633b9aca00848281518110611412576114126125b0565b602002602001015160070b135b15611456576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001016111c6565b505f835f81518110611472576114726125b0565b602002602001015160070b12156118635761148c33611d68565b6114c2576040517fee3675d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c778054604080516020808402820181019092528281527f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c75935f93919290919083018282801561156557602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161153a575b505083519394505f9250611577915050565b8560028111156115895761158961284c565b036116ea575f5b818110156116e8575f846005015f8584815181106115b0576115b06125b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060040180548060200260200160405190810160405280929190818152602001828054801561165e57602002820191905f5260205f20905f905b825461010083900a900460070b81526020600f830181900493840193600103600890930192909202910180841161162a5790505b505050505090505f885f81518110611678576116786125b0565b6020026020010151825f81518110611692576116926125b0565b60200260200101516116a49190612a16565b60070b12156116df576040517f1133612100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600101611590565b505b60018560028111156116fe576116fe61284c565b0361185f575f5b8181101561185d575f846005015f858481518110611725576117256125b0565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002018054806020026020016040519081016040528092919081815260200182805480156117d357602002820191905f5260205f20905f905b825461010083900a900460070b81526020600f830181900493840193600103600890930192909202910180841161179f5790505b505050505090505f815f815181106117ed576117ed6125b0565b6020026020010151895f81518110611807576118076125b0565b60200260200101516118199190612a16565b60070b1215611854576040517f1133612100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600101611705565b505b5050505b50505050565b5f5f6060806060858060200190518101906118849190612ab7565b939a9299509097509550909350915050565b5f808460098111156118aa576118aa61284c565b0361197a575f5f5f5f5f868060200190518101906118c89190612c4b565b945094509450945094505f6118dd828a611e2c565b86519091505f5b8181101561196a5761196083898381518110611902576119026125b0565b602002602001015188848151811061191c5761191c6125b0565b6020026020010151888581518110611936576119366125b0565b602002602001015160ff168b8681518110611953576119536125b0565b6020026020010151611e5d565b92506001016118e4565b5081975050505050505050611cc4565b600384600981111561198e5761198e61284c565b036119a25750670de0b6b3a7640000611cc4565b60028460098111156119b6576119b661284c565b036119c2575081611cc4565b60048460098111156119d6576119d661284c565b03611a74576040517f7a28fb88000000000000000000000000000000000000000000000000000000008152670de0b6b3a7640000600482015273ae7ab96520de3a18e5e111b5eaab095312d7fe8490637a28fb8890602401602060405180830381865afa158015611a49573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a6d91906128bf565b9050611cc4565b6005846009811115611a8857611a8861284c565b03611aea5773be9895146f7af43049ca1c1ae358b0541ea4970473ffffffffffffffffffffffffffffffffffffffff16633ba0b9a96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a49573d5f5f3e3d5ffd5b6006846009811115611afe57611afe61284c565b03611b605773ae78736cd615f374d3085123a210448e74fc639373ffffffffffffffffffffffffffffffffffffffff1663e6aa216c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a49573d5f5f3e3d5ffd5b6007846009811115611b7457611b7461284c565b03611bd65773ac3e018457b222d93114458476f3e3416abbe38f73ffffffffffffffffffffffffffffffffffffffff166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a49573d5f5f3e3d5ffd5b6008846009811115611bea57611bea61284c565b03611c0d575f82806020019051810190611c0491906128bf565b9150611cc49050565b6009846009811115611c2157611c2161284c565b03611cc1575f5f83806020019051810190611c3c9190612d76565b91509150808273ffffffffffffffffffffffffffffffffffffffff1663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c8a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cae91906128bf565b611cb89190612da2565b92505050611cc4565b50815b9392505050565b5f5f611ce086670de0b6b3a764000086611896565b9050611ced878287611896565b9150611d01670de0b6b3a764000083612dda565b611d1384670de0b6b3a76400006129f0565b611d1d9083612dda565b108015611d555750611d3783670de0b6b3a7640000612a03565b611d419082612dda565b611d53670de0b6b3a764000084612dda565b105b15611d5e578091505b9550959350505050565b5f807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131b600201546040517fd1f856ee000000000000000000000000000000000000000000000000000000008152600a600482015273ffffffffffffffffffffffffffffffffffffffff85811660248301529091169063d1f856ee906044016040805180830381865afa158015611e00573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e249190612df1565b509392505050565b5f80836001811115611e4057611e4061284c565b03611e545750670de0b6b3a7640000611e57565b50805b92915050565b5f5f5f8673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611ea9573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ecd9190612e34565b509350509250505f82131580611ef1575063ffffffff8416611eef82426129f0565b115b15611f28576040517fae19356300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8560ff16600103611f5b57611f3e85600a612f59565b611f48838a612dda565b611f529190612da2565b92505050611f71565b81611f6786600a612f59565b611f48908a612dda565b95945050505050565b828054828255905f5260205f2090600301600490048101928215612022579160200282015f5b83821115611fec57835183826101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509260200192600801602081600701049283019260010302611fa0565b80156120205782816101000a81549067ffffffffffffffff0219169055600801602081600701049283019260010302611fec565b505b5061202e9291506120a7565b5090565b828054828255905f5260205f2090600301600490048101928215612022579160200282015f5b83821115611fec57835183826101000a81548167ffffffffffffffff021916908360070b67ffffffffffffffff1602179055509260200192600801602081600701049283019260010302612058565b5b8082111561202e575f81556001016120a8565b73ffffffffffffffffffffffffffffffffffffffff811681146120dc575f5ffd5b50565b80356120ea816120bb565b919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b60405160e0810167ffffffffffffffff8111828210171561213f5761213f6120ef565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561216e5761216e6120ef565b604052919050565b5f67ffffffffffffffff82111561218f5761218f6120ef565b5060051b60200190565b80151581146120dc575f5ffd5b80356120ea81612199565b5f67ffffffffffffffff8211156121ca576121ca6120ef565b50601f01601f191660200190565b5f82601f8301126121e7575f5ffd5b81356121fa6121f5826121b1565b612145565b81815284602083860101111561220e575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f82601f830112612239575f5ffd5b81356122476121f582612176565b8082825260208201915060208360051b860101925085831115612268575f5ffd5b602085015b8381101561229a57803567ffffffffffffffff8116811461228c575f5ffd5b83526020928301920161226d565b5095945050505050565b5f82601f8301126122b3575f5ffd5b81356122c16121f582612176565b8082825260208201915060208360051b8601019250858311156122e2575f5ffd5b602085015b8381101561229a5780358060070b81146122ff575f5ffd5b8352602092830192016122e7565b5f6040828403121561231d575f5ffd5b6040805190810167ffffffffffffffff81118282101715612340576123406120ef565b604052905080823567ffffffffffffffff81111561235c575f5ffd5b6123688582860161222a565b825250602083013567ffffffffffffffff811115612384575f5ffd5b612390858286016122a4565b6020830152505092915050565b5f5f5f5f608085870312156123b0575f5ffd5b84356123bb816120bb565b935060208501356123cb816120bb565b9250604085013567ffffffffffffffff8111156123e6575f5ffd5b8501601f810187136123f6575f5ffd5b80356124046121f582612176565b8082825260208201915060208360051b850101925089831115612425575f5ffd5b602084015b8381101561257957803567ffffffffffffffff811115612448575f5ffd5b850160e0818d03601f1901121561245d575f5ffd5b61246561211c565b612471602083016120df565b815261247f604083016121a6565b6020820152606082013567ffffffffffffffff81111561249d575f5ffd5b6124ac8e6020838601016121d8565b604083015250608082013567ffffffffffffffff8111156124cb575f5ffd5b6124da8e60208386010161222a565b60608301525060a082013567ffffffffffffffff8111156124f9575f5ffd5b6125088e6020838601016122a4565b60808301525060c082013567ffffffffffffffff811115612527575f5ffd5b6125368e60208386010161222a565b60a08301525060e082013567ffffffffffffffff811115612555575f5ffd5b6125648e6020838601016122a4565b60c0830152508452506020928301920161242a565b509450505050606085013567ffffffffffffffff811115612598575f5ffd5b6125a48782880161230d565b91505092959194509250565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b805160ff811681146120ea575f5ffd5b5f602082840312156125fd575f5ffd5b611cc4826125dd565b600181811c9082168061261a57607f821691505b602082108103612651577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b601f82111561269e57805f5260205f20601f840160051c8101602085101561267c5750805b601f840160051c820191505b8181101561269b575f8155600101612688565b50505b505050565b815167ffffffffffffffff8111156126bd576126bd6120ef565b6126d1816126cb8454612606565b84612657565b6020601f821160018114612703575f83156126ec5750848201515b5f19600385901b1c1916600184901b17845561269b565b5f84815260208120601f198516915b828110156127325787850151825560209485019460019092019101612712565b508482101561274f57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f611cc4602083018461275e565b5f8151808452602084019350602083015f5b828110156127d857815167ffffffffffffffff168652602095860195909101906001016127b0565b5093949350505050565b5f8151808452602084019350602083015f5b828110156127d857815160070b8652602095860195909101906001016127f4565b606081525f612827606083018661279e565b828103602084015261283981866127e2565b9150508215156040830152949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b60ff8281168282160390811115611e5757611e57612879565b5f602082840312156128cf575f5ffd5b5051919050565b600a811061290b577f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b9052565b61291981876128d6565b61292660208201866128d6565b60a060408201525f61293b60a083018661275e565b828103606084015261294d818661275e565b90508281036080840152610ea8818561275e565b604081525f612973604083018561279e565b8281036020840152611f7181856127e2565b5f60208284031215612995575f5ffd5b8151611cc4816120bb565b80516fffffffffffffffffffffffffffffffff811681146120ea575f5ffd5b5f5f604083850312156129d0575f5ffd5b6129d9836129a0565b91506129e7602084016129a0565b90509250929050565b81810381811115611e5757611e57612879565b80820180821115611e5757611e57612879565b600781810b9083900b01677fffffffffffffff81137fffffffffffffffffffffffffffffffffffffffffffffffff800000000000000082121715611e5757611e57612879565b8051600a81106120ea575f5ffd5b5f82601f830112612a79575f5ffd5b8151612a876121f5826121b1565b818152846020838601011115612a9b575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b5f5f5f5f5f60a08688031215612acb575f5ffd5b612ad486612a5c565b9450612ae260208701612a5c565b9350604086015167ffffffffffffffff811115612afd575f5ffd5b612b0988828901612a6a565b935050606086015167ffffffffffffffff811115612b25575f5ffd5b612b3188828901612a6a565b925050608086015167ffffffffffffffff811115612b4d575f5ffd5b612b5988828901612a6a565b9150509295509295909350565b805163ffffffff811681146120ea575f5ffd5b5f82601f830112612b88575f5ffd5b8151612b966121f582612176565b8082825260208201915060208360051b860101925085831115612bb7575f5ffd5b602085015b8381101561229a57612bcd81612b66565b835260209283019201612bbc565b5f82601f830112612bea575f5ffd5b8151612bf86121f582612176565b8082825260208201915060208360051b860101925085831115612c19575f5ffd5b602085015b8381101561229a57612c2f816125dd565b835260209283019201612c1e565b8051600281106120ea575f5ffd5b5f5f5f5f5f60a08688031215612c5f575f5ffd5b855167ffffffffffffffff811115612c75575f5ffd5b8601601f81018813612c85575f5ffd5b8051612c936121f582612176565b8082825260208201915060208360051b85010192508a831115612cb4575f5ffd5b6020840193505b82841015612cdf578351612cce816120bb565b825260209384019390910190612cbb565b80985050505050602086015167ffffffffffffffff811115612cff575f5ffd5b612d0b88828901612b79565b945050604086015167ffffffffffffffff811115612d27575f5ffd5b612d3388828901612bdb565b935050606086015167ffffffffffffffff811115612d4f575f5ffd5b612d5b88828901612bdb565b925050612d6a60808701612c3d565b90509295509295909350565b5f5f60408385031215612d87575f5ffd5b8251612d92816120bb565b6020939093015192949293505050565b5f82612dd5577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b8082028115828204841417611e5757611e57612879565b5f5f60408385031215612e02575f5ffd5b8251612e0d81612199565b91506129e760208401612b66565b805169ffffffffffffffffffff811681146120ea575f5ffd5b5f5f5f5f5f60a08688031215612e48575f5ffd5b612e5186612e1b565b60208701516040880151606089015192975090955093509150612d6a60808701612e1b565b6001815b6001841115612eb157808504811115612e9557612e95612879565b6001841615612ea357908102905b60019390931c928002612e7a565b935093915050565b5f82612ec757506001611e57565b81612ed357505f611e57565b8160018114612ee95760028114612ef357612f0f565b6001915050611e57565b60ff841115612f0457612f04612879565b50506001821b611e57565b5060208310610133831016604e8410600b8410161715612f32575081810a611e57565b612f3e5f198484612e76565b805f1904821115612f5157612f51612879565b029392505050565b5f611cc48383612eb956fea264697066735822122090eab4e7f42cb438f0c3f5fa06ef62c449dc823ae12a4ec50c0c4edd05f2382d64736f6c634300081c0033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "immutableReferences": {},
  "inputSourceName": "project/contracts/monetizer/configs/DiamondInitializer.sol",
  "devdoc": {
    "details": "This contract is used only once to initialize the diamond proxy.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "2437200",
        "executionCost": "2618",
        "totalCost": "2439818"
      },
      "external": {
        "initialize(address,address,(address,bool,bytes,uint64[],int64[],uint64[],int64[])[],(uint64[],int64[]))": "infinite"
      }
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAccessManager\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidChainlinkRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNegativeFees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotCollateral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleUpdateFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"}],\"name\":\"CollateralAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"xFee\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"int64[]\",\"name\":\"yFee\",\"type\":\"int64[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mint\",\"type\":\"bool\"}],\"name\":\"FeesSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"oracleConfig\",\"type\":\"bytes\"}],\"name\":\"OracleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pausedType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPaused\",\"type\":\"bool\"}],\"name\":\"PauseToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"xFee\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"int64[]\",\"name\":\"yFee\",\"type\":\"int64[]\"}],\"name\":\"RedemptionCurveParamsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stablecoinCap\",\"type\":\"uint256\"}],\"name\":\"StablecoinCapSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract IAccessManager\",\"name\":\"_accessManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenP\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"targetMax\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"oracleConfig\",\"type\":\"bytes\"},{\"internalType\":\"uint64[]\",\"name\":\"xMintFee\",\"type\":\"uint64[]\"},{\"internalType\":\"int64[]\",\"name\":\"yMintFee\",\"type\":\"int64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"xBurnFee\",\"type\":\"uint64[]\"},{\"internalType\":\"int64[]\",\"name\":\"yBurnFee\",\"type\":\"int64[]\"}],\"internalType\":\"struct CollateralSetup[]\",\"name\":\"_collaterals\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64[]\",\"name\":\"xRedeemFee\",\"type\":\"uint64[]\"},{\"internalType\":\"int64[]\",\"name\":\"yRedeemFee\",\"type\":\"int64[]\"}],\"internalType\":\"struct RedemptionSetup\",\"name\":\"_redemptionSetup\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is used only once to initialize the diamond proxy.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project/contracts/monetizer/configs/DiamondInitializer.sol\":\"DiamondInitializer\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\"npm/@openzeppelin/contracts-upgradeable@5.4.0/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/\",\"project/:@helpers/=project/libs/helpers/\",\"project/:@openzeppelin/contracts-upgradeable/=npm/@openzeppelin/contracts-upgradeable@5.4.0/\",\"project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/\",\"project/:contracts/=project/contracts/\"]},\"sources\":{\"npm/@openzeppelin/contracts@5.4.0/access/manager/AuthorityUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/manager/AuthorityUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\n\\nlibrary AuthorityUtils {\\n    /**\\n     * @dev Since `AccessManager` implements an extended IAuthority interface, invoking `canCall` with backwards compatibility\\n     * for the preexisting `IAuthority` interface requires special care to avoid reverting on insufficient return data.\\n     * This helper function takes care of invoking `canCall` in a backwards compatible way without reverting.\\n     */\\n    function canCallWithDelay(\\n        address authority,\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) internal view returns (bool immediate, uint32 delay) {\\n        bytes memory data = abi.encodeCall(IAuthority.canCall, (caller, target, selector));\\n\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x00)\\n            mstore(0x20, 0x00)\\n\\n            if staticcall(gas(), authority, add(data, 0x20), mload(data), 0x00, 0x40) {\\n                immediate := mload(0x00)\\n                delay := mload(0x20)\\n\\n                // If delay does not fit in a uint32, return 0 (no delay)\\n                // equivalent to: if gt(delay, 0xFFFFFFFF) { delay := 0 }\\n                delay := mul(delay, iszero(shr(32, delay)))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05fd06ae5bca9dc7470fb2dfae764315c81a84f591e86be6fec0c115474edc6c\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/access/manager/IAccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/manager/IAccessManager.sol)\\n\\npragma solidity >=0.8.4;\\n\\ninterface IAccessManager {\\n    /**\\n     * @dev A delayed operation was scheduled.\\n     */\\n    event OperationScheduled(\\n        bytes32 indexed operationId,\\n        uint32 indexed nonce,\\n        uint48 schedule,\\n        address caller,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev A scheduled operation was executed.\\n     */\\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev A scheduled operation was canceled.\\n     */\\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev Informational labelling for a roleId.\\n     */\\n    event RoleLabel(uint64 indexed roleId, string label);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `roleId`.\\n     *\\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\\n     * otherwise it indicates the execution delay for this account and roleId is updated.\\n     */\\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\\n\\n    /**\\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\\n     */\\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\\n\\n    /**\\n     * @dev Role acting as admin over a given `roleId` is updated.\\n     */\\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\\n\\n    /**\\n     * @dev Role acting as guardian over a given `roleId` is updated.\\n     */\\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\\n\\n    /**\\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\\n     */\\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\\n\\n    /**\\n     * @dev Target mode is updated (true = closed, false = open).\\n     */\\n    event TargetClosed(address indexed target, bool closed);\\n\\n    /**\\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\\n     */\\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\\n\\n    /**\\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\\n     */\\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\\n\\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\\n    error AccessManagerNotScheduled(bytes32 operationId);\\n    error AccessManagerNotReady(bytes32 operationId);\\n    error AccessManagerExpired(bytes32 operationId);\\n    error AccessManagerLockedRole(uint64 roleId);\\n    error AccessManagerBadConfirmation();\\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\\n    error AccessManagerUnauthorizedConsume(address target);\\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\\n\\n    /**\\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\\n     * & {execute} workflow.\\n     *\\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\\n     * for future execution.\\n     *\\n     * If `allowed` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\\n     * the operation can be executed if and only if delay is greater than 0.\\n     *\\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\\n     *\\n     * NOTE: This function does not report the permissions of the admin functions in the manager itself. These are defined by the\\n     * {AccessManager} documentation.\\n     */\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) external view returns (bool allowed, uint32 delay);\\n\\n    /**\\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\\n     *\\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\\n     * disabling any scheduling usage.\\n     */\\n    function expiration() external view returns (uint32);\\n\\n    /**\\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\\n     * accidental increase). Defaults to 5 days.\\n     */\\n    function minSetback() external view returns (uint32);\\n\\n    /**\\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\\n     *\\n     * NOTE: When the manager itself is closed, admin functions are still accessible to avoid locking the contract.\\n     */\\n    function isTargetClosed(address target) external view returns (bool);\\n\\n    /**\\n     * @dev Get the role required to call a function.\\n     */\\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\\n     */\\n    function getTargetAdminDelay(address target) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the id of the role that acts as an admin for the given role.\\n     *\\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\\n     * an operation that is restricted to this role.\\n     */\\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role that acts as a guardian for a given role.\\n     *\\n     * The guardian permission allows canceling operations that have been scheduled under the role.\\n     */\\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role current grant delay.\\n     *\\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\\n     */\\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\\n     * level.\\n     *\\n     * Returns:\\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\\n     * [1] Current execution delay for the account.\\n     * [2] Pending execution delay for the account.\\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\\n     */\\n    function getAccess(\\n        uint64 roleId,\\n        address account\\n    ) external view returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect);\\n\\n    /**\\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\\n     */\\n    function hasRole(uint64 roleId, address account) external view returns (bool isMember, uint32 executionDelay);\\n\\n    /**\\n     * @dev Give a label to a role, for improved role discoverability by UIs.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleLabel} event.\\n     */\\n    function labelRole(uint64 roleId, string calldata label) external;\\n\\n    /**\\n     * @dev Add `account` to `roleId`, or change its execution delay.\\n     *\\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\\n     *\\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - granted role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\\n\\n    /**\\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\\n     * no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - revoked role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function revokeRole(uint64 roleId, address account) external;\\n\\n    /**\\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\\n     * the role this call has no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\\n\\n    /**\\n     * @dev Change admin role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleAdminChanged} event\\n     */\\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\\n\\n    /**\\n     * @dev Change guardian role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGuardianChanged} event\\n     */\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\\n\\n    /**\\n     * @dev Update the delay for granting a `roleId`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\\n     */\\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\\n\\n    /**\\n     * @dev Set the delay for changing the configuration of a given target contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the closed flag for a contract.\\n     *\\n     * Closing the manager itself won't disable access to admin methods to avoid locking the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function setTargetClosed(address target, bool closed) external;\\n\\n    /**\\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\\n     */\\n    function getSchedule(bytes32 id) external view returns (uint48);\\n\\n    /**\\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\\n     * been scheduled.\\n     */\\n    function getNonce(bytes32 id) external view returns (uint32);\\n\\n    /**\\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\\n     * required for the caller. The special value zero will automatically set the earliest possible time.\\n     *\\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\\n     *\\n     * Emits a {OperationScheduled} event.\\n     *\\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\\n     * contract if it is using standard Solidity ABI encoding.\\n     */\\n    function schedule(\\n        address target,\\n        bytes calldata data,\\n        uint48 when\\n    ) external returns (bytes32 operationId, uint32 nonce);\\n\\n    /**\\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\\n     * execution delay is 0.\\n     *\\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\\n     *\\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\\n     */\\n    function execute(address target, bytes calldata data) external payable returns (uint32);\\n\\n    /**\\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\\n     * operation that is cancelled.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\\n     *\\n     * Emits a {OperationCanceled} event.\\n     */\\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\\n\\n    /**\\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\\n     *\\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\\n     * with all the verifications that it implies.\\n     *\\n     * Emit a {OperationExecuted} event.\\n     */\\n    function consumeScheduledOp(address caller, bytes calldata data) external;\\n\\n    /**\\n     * @dev Hashing function for delayed operations.\\n     */\\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\\n\\n    /**\\n     * @dev Changes the authority of a target managed by this manager instance.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     */\\n    function updateAuthority(address target, address newAuthority) external;\\n}\\n\",\"keccak256\":\"0x640fe2b6e5201c47322d458f81078d6dcf23ccf9954f8995b1b7bfbec0eb1421\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/access/manager/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/manager/IAuthority.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Standard interface for permissioning originally defined in Dappsys.\\n */\\ninterface IAuthority {\\n    /**\\n     * @dev Returns true if the caller can invoke on a target the function identified by a function selector.\\n     */\\n    function canCall(address caller, address target, bytes4 selector) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x9c9a58dd831b9bb4a0ea47d96b53c13ab9a6e4270a518ea395b1424092fd74dc\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"project/contracts/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.28;\\n\\n/// @title IManager\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This interface is an authorized fork of Angle's `IManager` interface\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/interfaces/IManager.sol\\ninterface IManager {\\n  /// @notice Returns the amount of collateral managed by the Manager\\n  /// @return balances Balances of all the subCollaterals handled by the manager\\n  /// @dev MUST NOT revert\\n  function totalAssets() external view returns (uint256[] memory balances, uint256 totalValue);\\n\\n  /// @notice Hook to invest `amount` of `collateral`\\n  /// @dev MUST revert if the manager cannot accept these funds\\n  /// @dev MUST have received the funds beforehand\\n  function invest(uint256 amount) external;\\n\\n  /// @notice Sends `amount` of `collateral` to the `to` address\\n  /// @dev Called when `tokenP` are burnt and during redemptions\\n  //  @dev MUST revert if there are not funds enough available\\n  /// @dev MUST be callable only by the monetizer\\n  function release(address asset, address to, uint256 amount) external;\\n\\n  /// @notice Gives the maximum amount of collateral immediately available for a transfer\\n  /// @dev Useful for integrators using `quoteIn` and `quoteOut`\\n  function maxAvailable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x32920e2bfb61211297125a9532e67e7cb09c50ed69bca82b07c6639126e7fba6\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/IMonetizerOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.28;\\n\\n/// @title IMonetizerOracle\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This interface is an authorized fork of Angle's `ITransmuterOracle` interface\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/interfaces/ITransmuterOracle.sol\\ninterface IMonetizerOracle {\\n  /// @notice Reads the oracle value for asset to use in a redemption to compute the collateral ratio\\n  function readRedemption() external view returns (uint256);\\n\\n  /// @notice Reads the oracle value for asset to use in a mint. It should be comprehensive of the\\n  /// deviation from the target price\\n  function readMint() external view returns (uint256);\\n\\n  /// @notice Reads the oracle value for asset to use in a burn transaction as well as the ratio\\n  /// between the current price and the target price for the asset\\n  function readBurn() external view returns (uint256 oracleValue, uint256 ratio);\\n\\n  /// @notice Reads the oracle value for asset\\n  function read() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbff2b1ec3e77553db6343868a223416828db8c3eafa317b4b915da4a3d8ff56a\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/ITokenP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.28;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title ITokenP\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @notice Interface for the stablecoins `tokenP` contracts\\n/// @dev This interface is an authorized fork of Angle's `IAgToken` interface\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/interfaces/IAgToken.sol\\ninterface ITokenP is IERC20 {\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    MINTER ROLE ONLY FUNCTIONS                                            \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Lets a whitelisted contract mint tokenPs\\n  /// @param account Address to mint to\\n  /// @param amount Amount to mint\\n  function mint(address account, uint256 amount) external;\\n\\n  /// @notice Burns `amount` tokens from a `burner` address after being asked to by `sender`\\n  /// @param amount Amount of tokens to burn\\n  /// @param burner Address to burn from\\n  /// @param sender Address which requested the burn from `burner`\\n  /// @dev This method is to be called by a contract with the minter right after being requested\\n  /// to do so by a `sender` address willing to burn tokens from another `burner` address\\n  /// @dev The method checks the allowance between the `sender` and the `burner`\\n  function burnFrom(uint256 amount, address burner, address sender) external;\\n\\n  /// @notice Burns `amount` tokens from a `burner` address\\n  /// @param amount Amount of tokens to burn\\n  /// @param burner Address to burn from\\n  /// @dev This method is to be called by a contract with a minter right on the tokenP after being\\n  /// requested to do so by an address willing to burn tokens from its address\\n  function burnSelf(uint256 amount, address burner) external;\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    EXTERNAL FUNCTIONS                                                \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Amount of decimals of the stablecoin\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x89d9b377afd760292bc2b92cfa9ab66d44018a4c143eff3ad91ab53091d4fa22\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x94da577160ebb1bfeb7008676c8e7d43dda926d9c0beee29077e9ed774707373\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/coinbase/ICbETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title ICbETH\\n/// @notice Interface for the `cbETH` contract\\ninterface ICbETH {\\n  function exchangeRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb159341cb0e25c478912b274cdda2d50fa84692aeac87b6823d281aaea2aed04\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/frax/ISfrxETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title ISfrxETH\\n/// @notice Interface for the `sfrxETH` contract\\ninterface ISfrxETH {\\n  function pricePerShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x914cbea276f817c7db62bfca21e15bd8f7892faa9f39d86baaef574cf12b859f\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/keyring/IKeyringGuard.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title IKeyringGuard\\n/// @notice Interface for the `KeyringGuard` contract\\ninterface IKeyringGuard {\\n  function isAuthorized(address from, address to) external returns (bool passed);\\n}\\n\",\"keccak256\":\"0x30bdab602ba0a6e2571372803ae35f7bebcc354d69408be627c04c57f7071f90\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/lido/IStETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title IStETH\\n/// @notice Interface for the `StETH` contract\\ninterface IStETH {\\n  function getPooledEthByShares(uint256 _sharesAmount) external view returns (uint256);\\n\\n  function submit(address) external payable returns (uint256);\\n\\n  function getSharesByPooledEth(uint256 _ethAmount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf21e3d8bdadc236b34bf2122b0e0b939d2d6bb6e2889b508636cbb7b84f59680\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/morpho/IMorphoOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title IMorphoOracle\\n/// @notice Interface for the oracle contracts used within Morpho\\ninterface IMorphoOracle {\\n  function price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0d1849803b554763f1dce55eba5a6e8d7c5b12d4cc8dfe23637e827d2ee91d17\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/rocketPool/IRETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title IRETH\\n/// @notice Interface for the `rETH` contract\\ninterface IRETH {\\n  function getExchangeRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x567a378e95d40160e297c1adb617ccaa69c03e49c4ad72a6ce651dd43cdbd5cd\",\"license\":\"GPL-3.0\"},\"project/contracts/monetizer/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IAccessManager } from \\\"@openzeppelin/contracts/access/manager/IAccessManager.sol\\\";\\nimport { ITokenP } from \\\"contracts/interfaces/ITokenP.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                        ENUMS                                                      \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\nenum FacetCutAction {\\n  Add,\\n  Replace,\\n  Remove\\n}\\n\\nenum ManagerType {\\n  EXTERNAL\\n}\\n\\nenum ActionType {\\n  Mint,\\n  Burn,\\n  Redeem\\n}\\n\\nenum TrustedType {\\n  Updater,\\n  Seller\\n}\\n\\nenum QuoteType {\\n  MintExactInput,\\n  MintExactOutput,\\n  BurnExactInput,\\n  BurnExactOutput\\n}\\n\\nenum OracleReadType {\\n  CHAINLINK_FEEDS,\\n  EXTERNAL,\\n  NO_ORACLE,\\n  STABLE,\\n  WSTETH,\\n  CBETH,\\n  RETH,\\n  SFRXETH,\\n  MAX,\\n  MORPHO_ORACLE\\n}\\n\\nenum OracleQuoteType {\\n  UNIT,\\n  TARGET\\n}\\n\\nenum WhitelistType {\\n  BACKED\\n}\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                    STRUCTS                                                     \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\nstruct Permit2Details {\\n  address to; // Address that will receive the funds\\n  uint256 nonce; // Nonce of the transaction\\n  bytes signature; // Permit signature of the user\\n}\\n\\nstruct FacetCut {\\n  address facetAddress; // Facet contract address\\n  FacetCutAction action; // Can be add, remove or replace\\n  bytes4[] functionSelectors; // Ex. bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n}\\n\\nstruct Facet {\\n  address facetAddress; // Facet contract address\\n  bytes4[] functionSelectors; // Ex. bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n}\\n\\nstruct FacetInfo {\\n  address facetAddress; // Facet contract address\\n  uint16 selectorPosition; // Position in the list of all selectors\\n}\\n\\nstruct DiamondStorage {\\n  bytes4[] selectors; // List of all available selectors\\n  mapping(bytes4 => FacetInfo) selectorInfo; // Selector to (address, position in list)\\n  IAccessManager accessManager; // Contract handling access management\\n}\\n\\nstruct ImplementationStorage {\\n  address implementation; // Dummy implementation address for Etherscan usability\\n}\\n\\nstruct ManagerStorage {\\n  IERC20[] subCollaterals; // Subtokens handled by the manager or strategies\\n  bytes config; // Additional configuration data\\n}\\n\\nstruct Collateral {\\n  uint8 isManaged; // If the collateral is managed through external strategies\\n  uint8 isMintLive; // If minting from this asset is unpaused\\n  uint8 isBurnLive; // If burning to this asset is unpaused\\n  uint8 decimals; // IERC20Metadata(collateral).decimals()\\n  uint8 onlyWhitelisted; // If only whitelisted addresses can burn or redeem for this token\\n  uint216 normalizedStables; // Normalized amount of stablecoins issued from this collateral\\n  uint64[] xFeeMint; // Increasing exposures in [0,BASE_9[\\n  int64[] yFeeMint; // Mint fees at the exposures specified in `xFeeMint`\\n  uint64[] xFeeBurn; // Decreasing exposures in ]0,BASE_9]\\n  int64[] yFeeBurn; // Burn fees at the exposures specified in `xFeeBurn`\\n  bytes oracleConfig; // Data about the oracle used for the collateral\\n  bytes whitelistData; // For whitelisted collateral, data used to verify whitelists\\n  ManagerStorage managerData; // For managed collateral, data used to handle the strategies\\n  uint256 stablecoinCap; // Cap on the amount of stablecoins that can be issued from this collateral\\n}\\n\\nstruct MonetizerStorage {\\n  ITokenP tokenP; // tokenP handled by the system\\n  uint8 isRedemptionLive; // If redemption is unpaused\\n  uint8 statusReentrant; // If call is reentrant or not\\n  bool consumingSchedule; // If the contract is consuming a scheduled operation\\n  uint128 normalizedStables; // Normalized amount of stablecoins issued by the system\\n  uint128 normalizer; // To reconcile `normalizedStables` values with the actual amount\\n  address[] collateralList; // List of collateral assets supported by the system\\n  uint64[] xRedemptionCurve; // Increasing collateral ratios > 0\\n  int64[] yRedemptionCurve; // Value of the redemption fees at `xRedemptionCurve`\\n  mapping(address => Collateral) collaterals; // Maps a collateral asset to its parameters\\n  mapping(address => uint256) isTrusted; // If an address is trusted to update the normalizer value\\n  mapping(address => uint256) isSellerTrusted; // If an address is trusted to sell accruing reward tokens or to run\\n    // keeper jobs on oracles\\n  mapping(WhitelistType => mapping(address => uint256)) isWhitelistedForType;\\n}\\n// Whether an address is whitelisted for a specific whitelist type\\n\",\"keccak256\":\"0xd9e3a4c1cff68115a684d79357d068f8a52b6d6416ae3ecc76795545fff22ea7\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/configs/DiamondInitializer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport \\\"./DiamondInitializerTypes.sol\\\";\\n\\n/// @dev This contract is used only once to initialize the diamond proxy.\\ncontract DiamondInitializer {\\n  function initialize(\\n    IAccessManager _accessManager,\\n    address _tokenP,\\n    CollateralSetup[] memory _collaterals,\\n    RedemptionSetup memory _redemptionSetup\\n  )\\n    external\\n  {\\n    LibSetters.setAccessManager(_accessManager);\\n\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    ts.statusReentrant = NOT_ENTERED;\\n    ts.normalizer = uint128(BASE_27);\\n    ts.tokenP = ITokenP(_tokenP);\\n\\n    // Setup each collateral\\n    uint256 collateralsLength = _collaterals.length;\\n    for (uint256 i; i < collateralsLength; i++) {\\n      CollateralSetup memory collateral = _collaterals[i];\\n      LibSetters.addCollateral(collateral.token);\\n      LibSetters.setOracle(collateral.token, collateral.oracleConfig);\\n      // Mint fees\\n      LibSetters.setFees(collateral.token, collateral.xMintFee, collateral.yMintFee, true);\\n      // Burn fees\\n      LibSetters.setFees(collateral.token, collateral.xBurnFee, collateral.yBurnFee, false);\\n      LibSetters.togglePause(collateral.token, ActionType.Mint);\\n      LibSetters.togglePause(collateral.token, ActionType.Burn);\\n      LibSetters.setStablecoinCap(collateral.token, 100_000_000 ether);\\n      if (collateral.targetMax) LibOracle.updateOracle(collateral.token);\\n    }\\n\\n    // setRedemptionCurveParams\\n    if (_redemptionSetup.xRedeemFee.length > 0) {\\n      LibSetters.togglePause(address(0), ActionType.Redeem);\\n      LibSetters.setRedemptionCurveParams(_redemptionSetup.xRedeemFee, _redemptionSetup.yRedeemFee);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1e9e070c5d3a57d587eaaff4ea508509edbd540fd87a751d78c0f1e067b73445\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/configs/DiamondInitializerTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { IAccessManager } from \\\"@openzeppelin/contracts/access/manager/IAccessManager.sol\\\";\\n\\nimport { LibDiamondEtherscan } from \\\"../libraries/LibDiamondEtherscan.sol\\\";\\nimport { LibOracle } from \\\"../libraries/LibOracle.sol\\\";\\nimport { LibSetters } from \\\"../libraries/LibSetters.sol\\\";\\nimport { LibStorage as s } from \\\"../libraries/LibStorage.sol\\\";\\n\\nimport \\\"../../utils/Constants.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\nstruct CollateralSetup {\\n  address token;\\n  bool targetMax;\\n  bytes oracleConfig;\\n  uint64[] xMintFee;\\n  int64[] yMintFee;\\n  uint64[] xBurnFee;\\n  int64[] yBurnFee;\\n}\\n\\nstruct RedemptionSetup {\\n  uint64[] xRedeemFee;\\n  int64[] yRedeemFee;\\n}\\n\",\"keccak256\":\"0xc414903042d4989ca5d54e4a6d6386a0cf2d404a70e8ebcffdc8d8bde868a1c7\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport { LibStorage as s } from \\\"./LibStorage.sol\\\";\\nimport { IAccessManager } from \\\"@openzeppelin/contracts/access/manager/IAccessManager.sol\\\";\\nimport { AuthorityUtils } from \\\"@openzeppelin/contracts/access/manager/AuthorityUtils.sol\\\";\\n\\nimport \\\"../../utils/Errors.sol\\\";\\nimport \\\"../../utils/Constants.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\n/// @title LibDiamond\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @notice Helper library to deal with diamond proxies.\\n/// @dev Reference: EIP-2535 Diamonds\\n/// @dev Forked from https://github.com/mudgen/diamond-3/blob/master/contracts/libraries/LibDiamond.sol by mudgen\\nlibrary LibDiamond {\\n  event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    INTERNAL FUNCTIONS                                                \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  function isGovernor(address caller) internal view returns (bool) {\\n    (bool isMember,) = s.diamondStorage().accessManager.hasRole(GOVERNOR_ROLE, caller);\\n    return isMember;\\n  }\\n\\n  /// @notice Checks whether `caller` can call `data` on `this`\\n  function checkCanCall(address caller, bytes calldata data) internal returns (bool) {\\n    IAccessManager accessManager = s.diamondStorage().accessManager;\\n    (bool immediate, uint32 delay) =\\n      AuthorityUtils.canCallWithDelay(address(accessManager), caller, address(this), bytes4(data[0:4]));\\n    if (!immediate) {\\n      if (delay > 0) {\\n        MonetizerStorage storage ts = s.transmuterStorage();\\n        ts.consumingSchedule = true;\\n        accessManager.consumeScheduledOp(caller, data);\\n        ts.consumingSchedule = false;\\n      } else {\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  /// @notice Internal function version of `diamondCut`\\n  function diamondCut(FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n    uint256 diamondCutLength = _diamondCut.length;\\n    for (uint256 facetIndex; facetIndex < diamondCutLength; facetIndex++) {\\n      bytes4[] memory functionSelectors = _diamondCut[facetIndex].functionSelectors;\\n      address facetAddress = _diamondCut[facetIndex].facetAddress;\\n\\n      if (functionSelectors.length == 0) {\\n        revert NoSelectorsProvidedForFacetForCut(facetAddress);\\n      }\\n\\n      FacetCutAction action = _diamondCut[facetIndex].action;\\n      if (action == FacetCutAction.Add) {\\n        _addFunctions(facetAddress, functionSelectors);\\n      } else if (action == FacetCutAction.Replace) {\\n        _replaceFunctions(facetAddress, functionSelectors);\\n      } else if (action == FacetCutAction.Remove) {\\n        _removeFunctions(facetAddress, functionSelectors);\\n      }\\n    }\\n\\n    emit DiamondCut(_diamondCut, _init, _calldata);\\n    _initializeDiamondCut(_init, _calldata);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    PRIVATE FUNCTIONS                                                \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Does a delegate call on `_init` with `_calldata`\\n  function _initializeDiamondCut(address _init, bytes memory _calldata) private {\\n    if (_init == address(0)) {\\n      return;\\n    }\\n    _enforceHasContractCode(_init);\\n    (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n    if (!success) {\\n      if (error.length > 0) {\\n        assembly (\\\"memory-safe\\\") {\\n          let returndata_size := mload(error)\\n          revert(add(32, error), returndata_size)\\n        }\\n      } else {\\n        revert InitializationFunctionReverted(_init, _calldata);\\n      }\\n    }\\n  }\\n\\n  /// @notice Adds a new function to the diamond proxy\\n  /// @dev Reverts if selectors are already existing\\n  function _addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) private {\\n    if (_facetAddress == address(0)) {\\n      revert CannotAddSelectorsToZeroAddress(_functionSelectors);\\n    }\\n    DiamondStorage storage ds = s.diamondStorage();\\n    uint16 selectorCount = uint16(ds.selectors.length);\\n    _enforceHasContractCode(_facetAddress);\\n    uint256 functionSelectorsLength = _functionSelectors.length;\\n    for (uint256 selectorIndex; selectorIndex < functionSelectorsLength; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorInfo[selector].facetAddress;\\n      if (oldFacetAddress != address(0)) {\\n        revert CannotAddFunctionToDiamondThatAlreadyExists(selector);\\n      }\\n      ds.selectorInfo[selector] = FacetInfo(_facetAddress, selectorCount);\\n      ds.selectors.push(selector);\\n      selectorCount++;\\n    }\\n  }\\n\\n  /// @notice Upgrades a function in the diamond proxy\\n  /// @dev Reverts if selectors do not already exist\\n  function _replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) private {\\n    DiamondStorage storage ds = s.diamondStorage();\\n    if (_facetAddress == address(0)) {\\n      revert CannotReplaceFunctionsFromFacetWithZeroAddress(_functionSelectors);\\n    }\\n    _enforceHasContractCode(_facetAddress);\\n    uint256 functionSelectorsLength = _functionSelectors.length;\\n    for (uint256 selectorIndex; selectorIndex < functionSelectorsLength; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorInfo[selector].facetAddress;\\n      // Can't replace immutable functions -- functions defined directly in the diamond in this case\\n      if (oldFacetAddress == address(this)) {\\n        revert CannotReplaceImmutableFunction(selector);\\n      }\\n      if (oldFacetAddress == _facetAddress) {\\n        revert CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet(selector);\\n      }\\n      if (oldFacetAddress == address(0)) {\\n        revert CannotReplaceFunctionThatDoesNotExists(selector);\\n      }\\n      // Replace old facet address\\n      ds.selectorInfo[selector].facetAddress = _facetAddress;\\n    }\\n  }\\n\\n  /// @notice Removes a function in the diamond proxy\\n  /// @dev Reverts if selectors do not already exist\\n  function _removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) private {\\n    DiamondStorage storage ds = s.diamondStorage();\\n    uint256 selectorCount = ds.selectors.length;\\n    if (_facetAddress != address(0)) {\\n      revert RemoveFacetAddressMustBeZeroAddress(_facetAddress);\\n    }\\n    uint256 functionSelectorsLength = _functionSelectors.length;\\n    for (uint256 selectorIndex; selectorIndex < functionSelectorsLength; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      FacetInfo memory oldFacetAddressAndSelectorPosition = ds.selectorInfo[selector];\\n      if (oldFacetAddressAndSelectorPosition.facetAddress == address(0)) {\\n        revert CannotRemoveFunctionThatDoesNotExist(selector);\\n      }\\n\\n      // Can't remove immutable functions -- functions defined directly in the diamond\\n      if (oldFacetAddressAndSelectorPosition.facetAddress == address(this)) {\\n        revert CannotRemoveImmutableFunction(selector);\\n      }\\n      // Replace selector with last selector\\n      selectorCount--;\\n      if (oldFacetAddressAndSelectorPosition.selectorPosition != selectorCount) {\\n        bytes4 lastSelector = ds.selectors[selectorCount];\\n        ds.selectors[oldFacetAddressAndSelectorPosition.selectorPosition] = lastSelector;\\n        ds.selectorInfo[lastSelector].selectorPosition = oldFacetAddressAndSelectorPosition.selectorPosition;\\n      }\\n      // Delete last selector\\n      ds.selectors.pop();\\n      delete ds.selectorInfo[selector];\\n    }\\n  }\\n\\n  /// @notice Checks that an address has a non void bytecode\\n  function _enforceHasContractCode(address _contract) private view {\\n    uint256 contractSize;\\n    assembly (\\\"memory-safe\\\") {\\n      contractSize := extcodesize(_contract)\\n    }\\n    if (contractSize == 0) {\\n      revert ContractHasNoCode();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7cac6c4cee194f464b080e04b8c323197419970d76576ae8e7b8d1b11ca33242\",\"license\":\"MIT\"},\"project/contracts/monetizer/libraries/LibDiamondEtherscan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport { LibStorage as s } from \\\"./LibStorage.sol\\\";\\n\\n/// @title LibDiamondEtherscan\\n/// @notice Allow to verify a diamond proxy on Etherscan\\n/// @dev Forked from https://github.com/zdenham/diamond-etherscan/blob/main/contracts/libraries/LibDiamondEtherscan.sol\\nlibrary LibDiamondEtherscan {\\n  event Upgraded(address indexed implementation);\\n\\n  /// @notice Internal version of `setDummyImplementation`\\n  function setDummyImplementation(address implementationAddress) internal {\\n    s.implementationStorage().implementation = implementationAddress;\\n    emit Upgraded(implementationAddress);\\n  }\\n\\n  /// @notice Internal version of `implementation`\\n  function dummyImplementation() internal view returns (address) {\\n    return s.implementationStorage().implementation;\\n  }\\n}\\n\",\"keccak256\":\"0x016498883b4a43b5ad6778ac5e77d86e9849174e266e783a40b6f275c3260480\",\"license\":\"MIT\"},\"project/contracts/monetizer/libraries/LibManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { IManager } from \\\"contracts/interfaces/IManager.sol\\\";\\n\\nimport \\\"../Storage.sol\\\";\\n\\n/// @title LibManager\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev Managed collateral assets may be handled through external smart contracts or directly through this library\\n/// @dev There is no implementation at this point for a managed collateral handled through this library, and\\n/// a new specific `ManagerType` would need to be added in this case\\n/// @dev This library is an authorized fork of Angle's `LibManager` library\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/libraries/LibManager.sol\\nlibrary LibManager {\\n  /// @notice Checks to which address managed funds must be transferred\\n  function transferRecipient(bytes memory config) internal view returns (address recipient) {\\n    (ManagerType managerType, bytes memory data) = parseManagerConfig(config);\\n    recipient = address(this);\\n    if (managerType == ManagerType.EXTERNAL) return abi.decode(data, (address));\\n  }\\n\\n  /// @notice Performs a transfer of `token` for a collateral that is managed to a `to` address\\n  /// @dev `token` may not be the actual collateral itself, as some collaterals have subcollaterals associated\\n  /// with it\\n  /// @dev Eventually pulls funds from strategies\\n  function release(address token, address to, uint256 amount, bytes memory config) internal {\\n    (ManagerType managerType, bytes memory data) = parseManagerConfig(config);\\n    if (managerType == ManagerType.EXTERNAL) abi.decode(data, (IManager)).release(token, to, amount);\\n  }\\n\\n  /// @notice Gets the balances of all the tokens controlled through `managerData`\\n  /// @return balances An array of size `subCollaterals` with current balances of all subCollaterals\\n  /// including the one corresponding to the `managerData` given\\n  /// @return totalValue The value of all the `subCollaterals` in `collateral`\\n  /// @dev `subCollaterals` must always have as first token (index 0) the collateral itself\\n  function totalAssets(bytes memory config) internal view returns (uint256[] memory balances, uint256 totalValue) {\\n    (ManagerType managerType, bytes memory data) = parseManagerConfig(config);\\n    if (managerType == ManagerType.EXTERNAL) return abi.decode(data, (IManager)).totalAssets();\\n  }\\n\\n  /// @notice Calls a hook if needed after new funds have been transfered to a manager\\n  function invest(uint256 amount, bytes memory config) internal {\\n    (ManagerType managerType, bytes memory data) = parseManagerConfig(config);\\n    if (managerType == ManagerType.EXTERNAL) abi.decode(data, (IManager)).invest(amount);\\n  }\\n\\n  /// @notice Returns available underlying tokens, for instance if liquidity is fully used and\\n  /// not withdrawable the function will return 0\\n  function maxAvailable(bytes memory config) internal view returns (uint256 available) {\\n    (ManagerType managerType, bytes memory data) = parseManagerConfig(config);\\n    if (managerType == ManagerType.EXTERNAL) return abi.decode(data, (IManager)).maxAvailable();\\n  }\\n\\n  /// @notice Decodes the `managerData` associated to a collateral\\n  function parseManagerConfig(bytes memory config) internal pure returns (ManagerType managerType, bytes memory data) {\\n    (managerType, data) = abi.decode(config, (ManagerType, bytes));\\n  }\\n}\\n\",\"keccak256\":\"0xe619f87b2dd001441852e45f473d0c0d443b7f6373a8c2fbccc0c5a23c676f50\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/libraries/LibOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { IMonetizerOracle } from \\\"contracts/interfaces/IMonetizerOracle.sol\\\";\\nimport { AggregatorV3Interface } from \\\"contracts/interfaces/external/chainlink/AggregatorV3Interface.sol\\\";\\nimport { IMorphoOracle } from \\\"contracts/interfaces/external/morpho/IMorphoOracle.sol\\\";\\n\\nimport { LibStorage as s } from \\\"./LibStorage.sol\\\";\\n\\nimport \\\"../../utils/Constants.sol\\\";\\nimport \\\"../../utils/Errors.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\n/// @title LibOracle\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This library is an authorized fork of Angle's `LibOracle` library\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/libraries/LibOracle.sol\\nlibrary LibOracle {\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    ACTIONS SPECIFIC ORACLES                                             \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Reads the oracle value used during a redemption to compute collateral ratio for `oracleConfig`\\n  /// @dev This value is only sensitive to compute the collateral ratio and deduce a penalty factor\\n  function readRedemption(bytes memory oracleConfig) internal view returns (uint256 oracleValue) {\\n    (OracleReadType oracleType, OracleReadType targetType, bytes memory oracleData, bytes memory targetData,) =\\n      _parseOracleConfig(oracleConfig);\\n    if (oracleType == OracleReadType.EXTERNAL) {\\n      IMonetizerOracle externalOracle = abi.decode(oracleData, (IMonetizerOracle));\\n      return externalOracle.readRedemption();\\n    } else {\\n      (oracleValue,) = readSpotAndTarget(oracleType, targetType, oracleData, targetData, 0);\\n      return oracleValue;\\n    }\\n  }\\n\\n  /// @notice Reads the oracle value used during mint operations for an asset with `oracleConfig`\\n  /// @dev For assets which do not rely on external oracles, this value is the minimum between the processed oracle\\n  /// value for the asset and its target price\\n  function readMint(bytes memory oracleConfig) internal view returns (uint256 oracleValue) {\\n    (\\n      OracleReadType oracleType,\\n      OracleReadType targetType,\\n      bytes memory oracleData,\\n      bytes memory targetData,\\n      bytes memory hyperparameters\\n    ) = _parseOracleConfig(oracleConfig);\\n    if (oracleType == OracleReadType.EXTERNAL) {\\n      IMonetizerOracle externalOracle = abi.decode(oracleData, (IMonetizerOracle));\\n      return externalOracle.readMint();\\n    }\\n\\n    (uint128 userDeviation,) = abi.decode(hyperparameters, (uint128, uint128));\\n    uint256 targetPrice;\\n    (oracleValue, targetPrice) = readSpotAndTarget(oracleType, targetType, oracleData, targetData, userDeviation);\\n    if (targetPrice < oracleValue) oracleValue = targetPrice;\\n  }\\n\\n  /// @notice Reads the oracle value used for a burn operation for an asset with `oracleConfig`\\n  /// @return oracleValue The actual oracle value obtained\\n  /// @return ratio If `oracle value < target price`, the ratio between the oracle value and the target\\n  /// price, otherwise `BASE_18`\\n  function readBurn(bytes memory oracleConfig) internal view returns (uint256 oracleValue, uint256 ratio) {\\n    (\\n      OracleReadType oracleType,\\n      OracleReadType targetType,\\n      bytes memory oracleData,\\n      bytes memory targetData,\\n      bytes memory hyperparameters\\n    ) = _parseOracleConfig(oracleConfig);\\n    if (oracleType == OracleReadType.EXTERNAL) {\\n      IMonetizerOracle externalOracle = abi.decode(oracleData, (IMonetizerOracle));\\n      return externalOracle.readBurn();\\n    }\\n    (uint128 userDeviation, uint128 burnRatioDeviation) = abi.decode(hyperparameters, (uint128, uint128));\\n    uint256 targetPrice;\\n    (oracleValue, targetPrice) = readSpotAndTarget(oracleType, targetType, oracleData, targetData, userDeviation);\\n    // Firewall in case the oracle value reported is low compared to the target\\n    // If the oracle value is slightly below its target, then no deviation is reported for the oracle and\\n    // the price of burning the stablecoin for other assets is not impacted. Also, the oracle value of this asset\\n    // is set to the target price, to not be open to direct arbitrage\\n    ratio = BASE_18;\\n    if (oracleValue * BASE_18 < targetPrice * (BASE_18 - burnRatioDeviation)) {\\n      ratio = (oracleValue * BASE_18) / targetPrice;\\n    } else if (oracleValue < targetPrice) {\\n      oracleValue = targetPrice;\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    VIEW FUNCTIONS                                                  \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Internal version of the `getOracle` function\\n  function getOracle(address collateral)\\n    internal\\n    view\\n    returns (OracleReadType, OracleReadType, bytes memory, bytes memory, bytes memory)\\n  {\\n    return _parseOracleConfig(s.transmuterStorage().collaterals[collateral].oracleConfig);\\n  }\\n\\n  /// @notice Gets the oracle value and the ratio with respect to the target price when it comes to\\n  /// burning for `collateral`\\n  function getBurnOracle(\\n    address collateral,\\n    bytes memory oracleConfig\\n  )\\n    internal\\n    view\\n    returns (uint256 minRatio, uint256 oracleValue)\\n  {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    minRatio = BASE_18;\\n    address[] memory collateralList = ts.collateralList;\\n    uint256 length = collateralList.length;\\n    for (uint256 i; i < length; ++i) {\\n      uint256 ratioObserved = BASE_18;\\n      if (collateralList[i] != collateral) {\\n        (, ratioObserved) = readBurn(ts.collaterals[collateralList[i]].oracleConfig);\\n      } else {\\n        (oracleValue, ratioObserved) = readBurn(oracleConfig);\\n      }\\n      if (ratioObserved < minRatio) minRatio = ratioObserved;\\n    }\\n  }\\n\\n  /// @notice Computes the `quoteAmount` (for Chainlink oracles) depending on a `quoteType` and a base value\\n  /// (e.g the target price of the asset)\\n  /// @dev For cases where the Chainlink feed directly looks into the value of the asset, `quoteAmount` is `BASE_18`.\\n  /// For others, like wstETH for which Chainlink only has an oracle for stETH, `quoteAmount` is the target price\\n  function quoteAmount(OracleQuoteType quoteType, uint256 baseValue) internal pure returns (uint256) {\\n    if (quoteType == OracleQuoteType.UNIT) return BASE_18;\\n    else return baseValue;\\n  }\\n\\n  function readSpotAndTarget(\\n    OracleReadType oracleType,\\n    OracleReadType targetType,\\n    bytes memory oracleData,\\n    bytes memory targetData,\\n    uint256 deviation\\n  )\\n    internal\\n    view\\n    returns (uint256 oracleValue, uint256 targetPrice)\\n  {\\n    targetPrice = read(targetType, BASE_18, targetData);\\n    oracleValue = read(oracleType, targetPrice, oracleData);\\n    // System may tolerate small deviations from target\\n    // If the oracle value reported is reasonably close to the target\\n    // --> disregard the oracle value and return the target price\\n    if (\\n      targetPrice * (BASE_18 - deviation) < oracleValue * BASE_18\\n        && oracleValue * BASE_18 < targetPrice * (BASE_18 + deviation)\\n    ) oracleValue = targetPrice;\\n  }\\n\\n  /// @notice Reads an oracle value (or a target oracle value) for an asset based on its data parsed `oracleConfig`\\n  function read(OracleReadType readType, uint256 baseValue, bytes memory data) internal view returns (uint256) {\\n    if (readType == OracleReadType.CHAINLINK_FEEDS) {\\n      (\\n        AggregatorV3Interface[] memory circuitChainlink,\\n        uint32[] memory stalePeriods,\\n        uint8[] memory circuitChainIsMultiplied,\\n        uint8[] memory chainlinkDecimals,\\n        OracleQuoteType quoteType\\n      ) = abi.decode(data, (AggregatorV3Interface[], uint32[], uint8[], uint8[], OracleQuoteType));\\n      uint256 quotePrice = quoteAmount(quoteType, baseValue);\\n      uint256 listLength = circuitChainlink.length;\\n      for (uint256 i; i < listLength; ++i) {\\n        quotePrice = readChainlinkFeed(\\n          quotePrice, circuitChainlink[i], circuitChainIsMultiplied[i], chainlinkDecimals[i], stalePeriods[i]\\n        );\\n      }\\n      return quotePrice;\\n    } else if (readType == OracleReadType.STABLE) {\\n      return BASE_18;\\n    } else if (readType == OracleReadType.NO_ORACLE) {\\n      return baseValue;\\n    } else if (readType == OracleReadType.WSTETH) {\\n      return STETH.getPooledEthByShares(1 ether);\\n    } else if (readType == OracleReadType.CBETH) {\\n      return CBETH.exchangeRate();\\n    } else if (readType == OracleReadType.RETH) {\\n      return RETH.getExchangeRate();\\n    } else if (readType == OracleReadType.SFRXETH) {\\n      return SFRXETH.pricePerShare();\\n    } else if (readType == OracleReadType.MAX) {\\n      uint256 maxValue = abi.decode(data, (uint256));\\n      return maxValue;\\n    } else if (readType == OracleReadType.MORPHO_ORACLE) {\\n      (address contractAddress, uint256 normalizationFactor) = abi.decode(data, (address, uint256));\\n      return IMorphoOracle(contractAddress).price() / normalizationFactor;\\n    }\\n    // If the `OracleReadType` is `EXTERNAL`, it means that this function is called to compute a\\n    // `targetPrice` in which case the `baseValue` is returned here\\n    else {\\n      return baseValue;\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    SPECIFIC HELPERS                                                 \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Reads a Chainlink feed using a quote amount and converts the quote amount to the out-currency\\n  /// @param _quoteAmount The amount for which to compute the price expressed in `BASE_18`\\n  /// @param feed Chainlink feed to query\\n  /// @param multiplied Whether the ratio outputted by Chainlink should be multiplied or divided to the `quoteAmount`\\n  /// @param decimals Number of decimals of the corresponding Chainlink pair\\n  /// @return The `quoteAmount` converted in out-currency\\n  function readChainlinkFeed(\\n    uint256 _quoteAmount,\\n    AggregatorV3Interface feed,\\n    uint8 multiplied,\\n    uint256 decimals,\\n    uint32 stalePeriod\\n  )\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    (, int256 ratio,, uint256 updatedAt,) = feed.latestRoundData();\\n    if (ratio <= 0 || block.timestamp - updatedAt > stalePeriod) revert InvalidChainlinkRate();\\n    // Checking whether we should multiply or divide by the ratio computed\\n    if (multiplied == 1) return (_quoteAmount * uint256(ratio)) / (10 ** decimals);\\n    else return (_quoteAmount * (10 ** decimals)) / uint256(ratio);\\n  }\\n\\n  /// @notice Parses an `oracleConfig` into several sub fields\\n  function _parseOracleConfig(bytes memory oracleConfig)\\n    private\\n    pure\\n    returns (OracleReadType, OracleReadType, bytes memory, bytes memory, bytes memory)\\n  {\\n    return abi.decode(oracleConfig, (OracleReadType, OracleReadType, bytes, bytes, bytes));\\n  }\\n\\n  function updateOracle(address collateral) internal {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    if (ts.collaterals[collateral].decimals == 0) revert NotCollateral();\\n\\n    (\\n      OracleReadType oracleType,\\n      OracleReadType targetType,\\n      bytes memory oracleData,\\n      bytes memory targetData,\\n      bytes memory hyperparameters\\n    ) = _parseOracleConfig(ts.collaterals[collateral].oracleConfig);\\n\\n    if (targetType != OracleReadType.MAX) revert OracleUpdateFailed();\\n    uint256 oracleValue = read(oracleType, BASE_18, oracleData);\\n\\n    uint256 maxValue = abi.decode(targetData, (uint256));\\n    if (oracleValue > maxValue) {\\n      ts.collaterals[collateral].oracleConfig = abi.encode(\\n        oracleType,\\n        targetType,\\n        oracleData,\\n        // There are no checks whether the value increased or not\\n        abi.encode(oracleValue),\\n        hyperparameters\\n      );\\n    } else {\\n      revert OracleUpdateFailed();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1834c434aec56eb8d3c0d9467a28f9afde87216fe3b6662d220ef60fdbb419af\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/libraries/LibSetters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport { LibManager } from \\\"./LibManager.sol\\\";\\nimport { LibOracle } from \\\"./LibOracle.sol\\\";\\nimport { LibStorage as s } from \\\"./LibStorage.sol\\\";\\nimport { LibDiamond } from \\\"./LibDiamond.sol\\\";\\nimport { LibWhitelist } from \\\"./LibWhitelist.sol\\\";\\n\\nimport \\\"../../utils/Constants.sol\\\";\\nimport \\\"../../utils/Errors.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\n/// @title LibSetters\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This library is an authorized fork of Angle's `LibSetters` library\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/libraries/LibSetters.sol\\nlibrary LibSetters {\\n  using SafeCast for uint256;\\n\\n  event CollateralAdded(address indexed collateral);\\n  event CollateralManagerSet(address indexed collateral, ManagerStorage managerData);\\n  event CollateralRevoked(address indexed collateral);\\n  event CollateralWhitelistStatusUpdated(address indexed collateral, bytes whitelistData, uint8 whitelistStatus);\\n  event FeesSet(address indexed collateral, uint64[] xFee, int64[] yFee, bool mint);\\n  event OracleSet(address indexed collateral, bytes oracleConfig);\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n  event PauseToggled(address indexed collateral, uint256 pausedType, bool isPaused);\\n  event RedemptionCurveParamsSet(uint64[] xFee, int64[] yFee);\\n  event ReservesAdjusted(address indexed collateral, uint256 amount, bool increase);\\n  event StablecoinCapSet(address indexed collateral, uint256 stablecoinCap);\\n  event TrustedToggled(address indexed sender, bool isTrusted, TrustedType trustedType);\\n  event WhitelistStatusToggled(WhitelistType whitelistType, address indexed who, uint256 whitelistStatus);\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    ONLY GOVERNOR ACTIONS                                              \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Internal version of `setAccessManager`\\n  function setAccessManager(IAccessManager _newAccessManager) internal {\\n    if (address(_newAccessManager).code.length == 0) revert InvalidAccessManager();\\n    DiamondStorage storage ds = s.diamondStorage();\\n    address previousAccessManager = address(ds.accessManager);\\n    ds.accessManager = _newAccessManager;\\n    emit OwnershipTransferred(previousAccessManager, address(_newAccessManager));\\n  }\\n\\n  /// @notice Internal version of `setCollateralManager`\\n  function setCollateralManager(\\n    address collateral,\\n    bool checkExternalManagerBalance,\\n    ManagerStorage memory managerData\\n  )\\n    internal\\n  {\\n    Collateral storage collatInfo = s.transmuterStorage().collaterals[collateral];\\n    if (collatInfo.decimals == 0) revert NotCollateral();\\n    uint8 isManaged = collatInfo.isManaged;\\n    if (isManaged > 0 && checkExternalManagerBalance) {\\n      (, uint256 totalValue) = LibManager.totalAssets(collatInfo.managerData.config);\\n      if (totalValue > 0) revert ManagerHasAssets();\\n    }\\n    if (managerData.config.length != 0) {\\n      // The first subCollateral given should be the actual collateral asset\\n      if (address(managerData.subCollaterals[0]) != collateral) revert InvalidParams();\\n      // Sanity check on the manager data that is passed\\n      LibManager.parseManagerConfig(managerData.config);\\n      collatInfo.isManaged = 1;\\n    } else {\\n      collatInfo.isManaged = 0;\\n    }\\n    collatInfo.managerData = managerData;\\n    emit CollateralManagerSet(collateral, managerData);\\n  }\\n\\n  /// @notice Internal version of `toggleTrusted`\\n  function toggleTrusted(address sender, TrustedType t) internal {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    uint256 trustedStatus;\\n    if (t == TrustedType.Updater) {\\n      trustedStatus = 1 - ts.isTrusted[sender];\\n      ts.isTrusted[sender] = trustedStatus;\\n    } else {\\n      trustedStatus = 1 - ts.isSellerTrusted[sender];\\n      ts.isSellerTrusted[sender] = trustedStatus;\\n    }\\n    emit TrustedToggled(sender, trustedStatus == 1, t);\\n  }\\n\\n  /// @notice Internal version of `addCollateral`\\n  function addCollateral(address collateral) internal {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    Collateral storage collatInfo = ts.collaterals[collateral];\\n    if (collatInfo.decimals != 0) revert AlreadyAdded();\\n    collatInfo.decimals = uint8(IERC20Metadata(collateral).decimals());\\n    ts.collateralList.push(collateral);\\n    emit CollateralAdded(collateral);\\n  }\\n\\n  /// @notice Internal version of `adjustStablecoins`\\n  function adjustStablecoins(address collateral, uint128 amount, bool increase) internal {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    Collateral storage collatInfo = ts.collaterals[collateral];\\n    if (collatInfo.decimals == 0) revert NotCollateral();\\n    uint128 normalizedAmount = ((amount * BASE_27) / ts.normalizer).toUint128();\\n    if (increase) {\\n      collatInfo.normalizedStables = collatInfo.normalizedStables + uint216(normalizedAmount);\\n      ts.normalizedStables = ts.normalizedStables + normalizedAmount;\\n    } else {\\n      collatInfo.normalizedStables = collatInfo.normalizedStables - uint216(normalizedAmount);\\n      ts.normalizedStables = ts.normalizedStables - normalizedAmount;\\n    }\\n    emit ReservesAdjusted(collateral, amount, increase);\\n  }\\n\\n  /// @notice Internal version of `revokeCollateral`\\n  function revokeCollateral(address collateral, bool checkExternalManagerBalance) internal {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    Collateral storage collatInfo = ts.collaterals[collateral];\\n    if (collatInfo.decimals == 0) revert NotCollateral();\\n    if (collatInfo.normalizedStables > 0) revert CollateralBacked();\\n    uint8 isManaged = collatInfo.isManaged;\\n    if (isManaged > 0 && checkExternalManagerBalance) {\\n      (, uint256 totalValue) = LibManager.totalAssets(collatInfo.managerData.config);\\n      if (totalValue > 0) revert ManagerHasAssets();\\n    }\\n    delete ts.collaterals[collateral];\\n    address[] memory collateralListMem = ts.collateralList;\\n    uint256 length = collateralListMem.length;\\n    for (uint256 i; i < length - 1; ++i) {\\n      if (collateralListMem[i] == collateral) {\\n        ts.collateralList[i] = collateralListMem[length - 1];\\n        break;\\n      }\\n    }\\n    ts.collateralList.pop();\\n    emit CollateralRevoked(collateral);\\n  }\\n\\n  /// @notice Internal version of `setOracle`\\n  function setOracle(address collateral, bytes memory oracleConfig) internal {\\n    Collateral storage collatInfo = s.transmuterStorage().collaterals[collateral];\\n    if (collatInfo.decimals == 0) revert NotCollateral();\\n    // Checks oracle validity\\n    LibOracle.readMint(oracleConfig);\\n    collatInfo.oracleConfig = oracleConfig;\\n    emit OracleSet(collateral, oracleConfig);\\n  }\\n\\n  /// @notice Internal version of `setWhitelistStatus`\\n  function setWhitelistStatus(address collateral, uint8 whitelistStatus, bytes memory whitelistData) internal {\\n    Collateral storage collatInfo = s.transmuterStorage().collaterals[collateral];\\n    if (collatInfo.decimals == 0) revert NotCollateral();\\n    if (whitelistStatus == 1) {\\n      // Sanity check\\n      LibWhitelist.checkWhitelist(whitelistData, address(this));\\n      collatInfo.whitelistData = whitelistData;\\n    } else {\\n      // If whitelist is revoked, clear the whitelist data\\n      collatInfo.whitelistData = \\\"\\\";\\n    }\\n    collatInfo.onlyWhitelisted = whitelistStatus;\\n    emit CollateralWhitelistStatusUpdated(collateral, collatInfo.whitelistData, whitelistStatus);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    ONLY GUARDIAN ACTIONS                                              \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Internal version of `togglePause`\\n  function togglePause(address collateral, ActionType action) internal {\\n    uint8 isLive;\\n    if (action == ActionType.Mint || action == ActionType.Burn) {\\n      Collateral storage collatInfo = s.transmuterStorage().collaterals[collateral];\\n      if (collatInfo.decimals == 0) revert NotCollateral();\\n      if (action == ActionType.Mint) {\\n        isLive = 1 - collatInfo.isMintLive;\\n        collatInfo.isMintLive = isLive;\\n      } else {\\n        isLive = 1 - collatInfo.isBurnLive;\\n        collatInfo.isBurnLive = isLive;\\n      }\\n    } else {\\n      MonetizerStorage storage ts = s.transmuterStorage();\\n      isLive = 1 - ts.isRedemptionLive;\\n      ts.isRedemptionLive = isLive;\\n    }\\n    emit PauseToggled(collateral, uint256(action), isLive == 0);\\n  }\\n\\n  /// @notice Internal version of `setFees`\\n  function setFees(address collateral, uint64[] memory xFee, int64[] memory yFee, bool mint) internal {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    Collateral storage collatInfo = ts.collaterals[collateral];\\n    if (collatInfo.decimals == 0) revert NotCollateral();\\n    checkFees(xFee, yFee, mint ? ActionType.Mint : ActionType.Burn);\\n    if (mint) {\\n      collatInfo.xFeeMint = xFee;\\n      collatInfo.yFeeMint = yFee;\\n    } else {\\n      collatInfo.xFeeBurn = xFee;\\n      collatInfo.yFeeBurn = yFee;\\n    }\\n    emit FeesSet(collateral, xFee, yFee, mint);\\n  }\\n\\n  /// @notice Internal version of `setRedemptionCurveParams`\\n  function setRedemptionCurveParams(uint64[] memory xFee, int64[] memory yFee) internal {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    LibSetters.checkFees(xFee, yFee, ActionType.Redeem);\\n    ts.xRedemptionCurve = xFee;\\n    ts.yRedemptionCurve = yFee;\\n    emit RedemptionCurveParamsSet(xFee, yFee);\\n  }\\n\\n  /// @notice Internal version of `toggleWhitelist`\\n  function toggleWhitelist(WhitelistType whitelistType, address who) internal {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    uint256 whitelistStatus = 1 - ts.isWhitelistedForType[whitelistType][who];\\n    ts.isWhitelistedForType[whitelistType][who] = whitelistStatus;\\n    emit WhitelistStatusToggled(whitelistType, who, whitelistStatus);\\n  }\\n\\n  /// @notice Sets the stablecoin cap that can be issued from a collateral\\n  function setStablecoinCap(address collateral, uint256 stablecoinCap) internal {\\n    Collateral storage collatInfo = s.transmuterStorage().collaterals[collateral];\\n    if (collatInfo.decimals == 0) revert NotCollateral();\\n    collatInfo.stablecoinCap = stablecoinCap;\\n    emit StablecoinCapSet(collateral, stablecoinCap);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    HELPERS                                                     \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Checks the fee values given for the `mint`, `burn`, and `redeem` functions\\n  function checkFees(uint64[] memory xFee, int64[] memory yFee, ActionType action) internal view {\\n    uint256 n = xFee.length;\\n    if (n != yFee.length || n == 0) revert InvalidParams();\\n    if (\\n      // Mint inflexion points should be in [0,BASE_9[\\n      // We have: amountPostFee * (BASE_9 + yFeeMint) = amountPreFee * BASE_9\\n      // Hence we consider BASE_12 as the max value (100% fees) for yFeeMint\\n      // Burn inflexion points should be in [0,BASE_9] but fees should be constant in\\n      // the first segment [BASE_9, x_{n-1}[\\n      // Redemption inflexion points should be in [0,BASE_9]\\n      (action == ActionType.Mint && (xFee[n - 1] >= BASE_9 || xFee[0] != 0 || yFee[n - 1] > int256(BASE_12)))\\n        || (\\n          action == ActionType.Burn\\n            && (xFee[0] != BASE_9 || yFee[n - 1] > int256(BASE_9) || (n > 1 && (yFee[0] != yFee[1])))\\n        ) || (action == ActionType.Redeem && (xFee[n - 1] > BASE_9 || yFee[n - 1] < 0 || yFee[n - 1] > int256(BASE_9)))\\n    ) {\\n      revert InvalidParams();\\n    }\\n\\n    for (uint256 i; i < n - 1; ++i) {\\n      if (\\n        // xFee strictly increasing and yFee increasing for mints\\n        // xFee strictly decreasing and yFee increasing for burns\\n        // xFee strictly increasing and yFee should be in [0,BASE_9] for redemptions\\n        (action == ActionType.Mint && (xFee[i] >= xFee[i + 1] || (yFee[i + 1] < yFee[i])))\\n          || (action == ActionType.Burn && (xFee[i] <= xFee[i + 1] || (yFee[i + 1] < yFee[i])))\\n          || (action == ActionType.Redeem && (xFee[i] >= xFee[i + 1] || yFee[i] < 0 || yFee[i] > int256(BASE_9)))\\n      ) revert InvalidParams();\\n    }\\n\\n    // If a mint or burn fee is negative, we need to check that accounts atomically minting\\n    // (from any collateral) and then burning cannot get more than their initial value\\n    if (yFee[0] < 0) {\\n      if (!LibDiamond.isGovernor(msg.sender)) revert NotGovernor(); // Only governor can set negative fees\\n      MonetizerStorage storage ts = s.transmuterStorage();\\n      address[] memory collateralListMem = ts.collateralList;\\n      uint256 length = collateralListMem.length;\\n      if (action == ActionType.Mint) {\\n        // This can be mathematically expressed by `(1-min_c(burnFee_c))<=(1+mintFee[0])`\\n        for (uint256 i; i < length; ++i) {\\n          int64[] memory burnFees = ts.collaterals[collateralListMem[i]].yFeeBurn;\\n          if (burnFees[0] + yFee[0] < 0) revert InvalidNegativeFees();\\n        }\\n      }\\n      if (action == ActionType.Burn) {\\n        // This can be mathematically expressed by `(1-burnFee[0])<=(1+min_c(mintFee_c))`\\n        for (uint256 i; i < length; ++i) {\\n          int64[] memory mintFees = ts.collaterals[collateralListMem[i]].yFeeMint;\\n          if (yFee[0] + mintFees[0] < 0) revert InvalidNegativeFees();\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x28b8fe2f755593f7df3282822faccfde6e234d603d84f99ebeaf39613e7f0da9\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/libraries/LibStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport \\\"../../utils/Constants.sol\\\";\\nimport { DiamondStorage, ImplementationStorage, MonetizerStorage } from \\\"../Storage.sol\\\";\\n\\n/// @title LibStorage\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This library is an authorized fork of Angle's `LibStorage` library\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/libraries/LibStorage.sol\\nlibrary LibStorage {\\n  /// @notice Returns the storage struct stored at the `DIAMOND_STORAGE_POSITION` slot\\n  /// @dev This struct handles the logic of the different facets used in the diamond proxy\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly (\\\"memory-safe\\\") {\\n      ds.slot := position\\n    }\\n  }\\n\\n  /// @notice Returns the storage struct stored at the `TRANSMUTER_STORAGE_POSITION` slot\\n  /// @dev This struct handles the particular logic of the Monetizer system\\n  function transmuterStorage() internal pure returns (MonetizerStorage storage ts) {\\n    bytes32 position = TRANSMUTER_STORAGE_POSITION;\\n    assembly (\\\"memory-safe\\\") {\\n      ts.slot := position\\n    }\\n  }\\n\\n  /// @notice Returns the storage struct stored at the `IMPLEMENTATION_STORAGE_POSITION` slot\\n  /// @dev This struct handles the logic for making the contract easily usable on Etherscan\\n  function implementationStorage() internal pure returns (ImplementationStorage storage ims) {\\n    bytes32 position = IMPLEMENTATION_STORAGE_POSITION;\\n    assembly (\\\"memory-safe\\\") {\\n      ims.slot := position\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xd990014177f2d92cb44d736faf7acff994e48b551910c7c7ba36c1faa2aa6169\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/libraries/LibWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { IKeyringGuard } from \\\"contracts/interfaces/external/keyring/IKeyringGuard.sol\\\";\\n\\nimport { LibStorage as s } from \\\"./LibStorage.sol\\\";\\n\\nimport \\\"../../utils/Errors.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\n/// @title LibWhitelist\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This library is an authorized fork of Angle's `LibWhitelist` library\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/libraries/LibWhitelist.sol\\nlibrary LibWhitelist {\\n  /// @notice Checks whether `sender` is whitelisted for a collateral with `whitelistData`\\n  function checkWhitelist(bytes memory whitelistData, address sender) internal returns (bool) {\\n    (WhitelistType whitelistType, bytes memory data) = abi.decode(whitelistData, (WhitelistType, bytes));\\n    if (s.transmuterStorage().isWhitelistedForType[whitelistType][sender] > 0) return true;\\n    if (data.length != 0) {\\n      if (whitelistType == WhitelistType.BACKED) {\\n        address keyringGuard = abi.decode(data, (address));\\n        if (keyringGuard != address(0)) return IKeyringGuard(keyringGuard).isAuthorized(address(this), sender);\\n      }\\n    }\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0xf28239fb3e44223d0ca09d1d0603e3d5b42b4c031c207db6a84df85141cf8f80\",\"license\":\"BUSL-1.1\"},\"project/contracts/utils/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { ICbETH } from \\\"contracts/interfaces/external/coinbase/ICbETH.sol\\\";\\nimport { ISfrxETH } from \\\"contracts/interfaces/external/frax/ISfrxETH.sol\\\";\\nimport { IStETH } from \\\"contracts/interfaces/external/lido/IStETH.sol\\\";\\nimport { IRETH } from \\\"contracts/interfaces/external/rocketPool/IRETH.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                 STORAGE SLOTS                                                  \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev Storage position of `DiamondStorage` structure\\n/// @dev Equals `keccak256(\\\"diamond.standard.diamond.storage\\\") - 1`\\nbytes32 constant DIAMOND_STORAGE_POSITION = 0xc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131b;\\n\\n/// @dev Storage position of `MonetizerStorage` structure\\n/// @dev Equals `keccak256(\\\"diamond.standard.monetizer.storage\\\") - 1`\\nbytes32 constant TRANSMUTER_STORAGE_POSITION = 0x4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c75;\\n\\n/// @dev Storage position of `ImplementationStorage` structure\\n/// @dev Equals `keccak256(\\\"eip1967.proxy.implementation\\\") - 1`\\nbytes32 constant IMPLEMENTATION_STORAGE_POSITION = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                     MATHS                                                      \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\nuint256 constant BASE_6 = 1e6;\\nuint256 constant BASE_8 = 1e8;\\nuint256 constant BASE_9 = 1e9;\\nuint256 constant BASE_12 = 1e12;\\nuint256 constant BPS = 1e14;\\nuint256 constant BASE_18 = 1e18;\\nuint256 constant HALF_BASE_27 = 1e27 / 2;\\nuint256 constant BASE_27 = 1e27;\\nuint256 constant BASE_36 = 1e36;\\nuint256 constant MAX_BURN_FEE = 999_000_000;\\nuint256 constant MAX_MINT_FEE = BASE_12 - 1;\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                     REENTRANT                                                      \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n// The values being non-zero value makes deployment a bit more expensive,\\n// but in exchange the refund on every call to nonReentrant will be lower in\\n// amount. Since refunds are capped to a percentage of the total\\n// transaction's gas, it is best to keep them low in cases like this one, to\\n// increase the likelihood of the full refund coming into effect.\\nuint8 constant NOT_ENTERED = 1;\\nuint8 constant ENTERED = 2;\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                     REENTRANT                                                      \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n// Role IDs for the AccessManager\\nuint64 constant GOVERNOR_ROLE = 10;\\nuint64 constant GUARDIAN_ROLE = 20;\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                               COMMON ADDRESSES                                                 \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\naddress constant PERMIT_2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\\naddress constant ODOS_ROUTER = 0xCf5540fFFCdC3d510B18bFcA6d2b9987b0772559;\\nICbETH constant CBETH = ICbETH(0xBe9895146f7AF43049ca1c1AE358B0541Ea49704);\\nIRETH constant RETH = IRETH(0xae78736Cd615f374D3085123A210448E74Fc6393);\\nIStETH constant STETH = IStETH(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);\\nISfrxETH constant SFRXETH = ISfrxETH(0xac3E018457B222d93114458476f3E3416Abbe38F);\\naddress constant XEVT = 0x3Ee320c9F73a84D1717557af00695A34b26d1F1d;\\naddress constant USDM = 0x59D9356E565Ab3A36dD77763Fc0d87fEaf85508C;\\naddress constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\naddress constant EURC = 0x1aBaEA1f7C830bD89Acc67eC4af516284b1bC33c;\\n\",\"keccak256\":\"0x386d47583c6deb04a0a42883fa8fb12b7def1461b6d6232cf09cd5899db666fd\",\"license\":\"BUSL-1.1\"},\"project/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nerror AccessManagedUnauthorized(address caller);\\nerror AlreadyAdded();\\nerror CannotAddFunctionToDiamondThatAlreadyExists(bytes4 _selector);\\nerror CannotAddSelectorsToZeroAddress(bytes4[] _selectors);\\nerror CannotRemoveFunctionThatDoesNotExist(bytes4 _selector);\\nerror CannotRemoveImmutableFunction(bytes4 _selector);\\nerror CannotReplaceFunctionsFromFacetWithZeroAddress(bytes4[] _selectors);\\nerror CannotReplaceFunctionThatDoesNotExists(bytes4 _selector);\\nerror CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet(bytes4 _selector);\\nerror CannotReplaceImmutableFunction(bytes4 _selector);\\nerror ContractHasNoCode();\\nerror CollateralBacked();\\nerror FunctionNotFound(bytes4 _functionSelector);\\nerror IncorrectFacetCutAction(uint8 _action);\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\nerror InvalidChainlinkRate();\\nerror InvalidLengths();\\nerror InvalidNegativeFees();\\nerror InvalidOracleType();\\nerror InvalidParam();\\nerror InvalidParams();\\nerror InvalidRate();\\nerror InvalidSwap();\\nerror InvalidTokens();\\nerror InvalidAccessManager();\\nerror ManagerHasAssets();\\nerror NoSelectorsProvidedForFacetForCut(address _facetAddress);\\nerror NotAllowed();\\nerror NotCollateral();\\nerror NotGovernor();\\nerror NotGuardian();\\nerror NotTrusted();\\nerror NotTrustedOrGuardian();\\nerror NotWhitelisted();\\nerror OdosSwapFailed();\\nerror OracleUpdateFailed();\\nerror Paused();\\nerror ReentrantCall();\\nerror RemoveFacetAddressMustBeZeroAddress(address _facetAddress);\\nerror TooBigAmountIn();\\nerror TooLate();\\nerror TooSmallAmountOut();\\nerror ZeroAddress();\\nerror ZeroAmount();\\nerror SwapError();\\nerror SlippageTooHigh();\\nerror InsufficientFunds();\\n\",\"keccak256\":\"0x1e2f6812ef78e948e5155d32213b52afff8c0ba5463d18bee10694efbf886130\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "argsData": "0x",
  "transaction": {
    "hash": "0xf22d6ea24864b184a83f54622015d21c3d84f766908c7007639bc20f1f519aec",
    "nonce": "0x33",
    "origin": "0x10a852971d242a04829b541c32f09ad9ec1b227d"
  },
  "receipt": {
    "blockHash": "0x397778bb6de75fb75f031f933ff137458da5e7d3ec490d7210934e4c70af596d",
    "blockNumber": "0x1ad170",
    "transactionIndex": "0x0"
  }
}