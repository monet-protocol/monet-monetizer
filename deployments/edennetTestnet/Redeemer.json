{
  "address": "0x1c9fda89dbe9843bbc4bc2ae1c074471ba227931",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidChainlinkRate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotTrusted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotWhitelisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Paused",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "bits",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "SafeCastOverflowedUintDowncast",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooBigAmountIn",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooLate",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooSmallAmountOut",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newNormalizerValue",
          "type": "uint256"
        }
      ],
      "name": "NormalizerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "forfeitTokens",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "quoteRedemptionCurve",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmountOuts",
          "type": "uint256[]"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmountOuts",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "forfeitTokens",
          "type": "address[]"
        }
      ],
      "name": "redeemWithForfeit",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "increase",
          "type": "bool"
        }
      ],
      "name": "updateNormalizer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "contractName": "Redeemer",
  "sourceName": "contracts/monetizer/facets/Redeemer.sol",
  "bytecode": "0x6080604052348015600e575f5ffd5b5061389d8061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061004a575f3560e01c80632e7639bc1461004e578063815822c114610078578063d703a0cd1461008b578063fd7daaf81461009e575b5f5ffd5b61006161005c366004612bc3565b6100bf565b60405161006f929190612d2e565b60405180910390f35b610061610086366004612d52565b6100de565b610061610099366004612db1565b610125565b6100b16100ac366004612dd5565b61013c565b60405190815260200161006f565b6060806100cf87878787876101ca565b915091505b9550959350505050565b606080610118868686865f604051908082528060200260200182016040528015610112578160200160208202803683370190505b506101ca565b9150915094509492505050565b606080610131836108c7565b509094909350915050565b5f610148335f36610b87565b1580156101805750335f9081527f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7b6020526040902054155b156101b7576040517fc22a648e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101c18383610d23565b90505b92915050565b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c758054606091829160ff7501000000000000000000000000000000000000000000909104167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01610267576040517f37ed32e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675020000000000000000000000000000000000000000001781557f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c75805474010000000000000000000000000000000000000000900460ff165f0361031b576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86421115610355576040517fecdd1c2900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60606103608a6108c7565b81518a5193985091965092509081146103a5576040517f1df89e8b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103af8b5f610d23565b5082546040517f2b471d8e000000000000000000000000000000000000000000000000000000008152600481018d905233602482015273ffffffffffffffffffffffffffffffffffffffff90911690632b471d8e906044015f604051808303815f87803b15801561041e575f5ffd5b505af1158015610430573d5f5f3e3d5ffd5b505050505f8360020180548060200260200160405190810160405280929190818152602001828054801561049857602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161046d575b505050505090505f5f5b8381101561080a578a81815181106104bc576104bc612e03565b60200260200101518882815181106104d6576104d6612e03565b60200260200101511015610516576040517fa1aabbe100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f88828151811061052957610529612e03565b602002602001015111801561055f57505f61055d8a838151811061054f5761054f612e03565b60200260200101518c6110b6565b125b156107ca575f866005015f85858151811061057c5761057c612e03565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040015f208054909150640100000000900460ff161580159061065a57506106588160060180546105d690612e30565b80601f016020809104026020016040519081016040528092919081815260200182805461060290612e30565b801561064d5780601f106106245761010080835404028352916020019161064d565b820191905f5260205f20905b81548152906001019060200180831161063057829003601f168201915b50505050508f61112c565b155b15610691576040517f584a793800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805460ff161561076b576107668a83815181106106b0576106b0612e03565b60200260200101518f8b85815181106106cb576106cb612e03565b60200260200101518460070160010180546106e590612e30565b80601f016020809104026020016040519081016040528092919081815260200182805461071190612e30565b801561075c5780601f106107335761010080835404028352916020019161075c565b820191905f5260205f20905b81548152906001019060200180831161073f57829003601f168201915b50505050506112e4565b6107c8565b6107c88e8a848151811061078157610781612e03565b60200260200101518c858151811061079b5761079b612e03565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166113b39092919063ffffffff16565b505b8060018684815181106107df576107df612e03565b60200260200101516107f19190612eae565b11610802576107ff82612ec1565b91505b6001016104a2565b508b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3998bcf315dae4953d294b3ca6e1d0074c249adc136b50d1ff99b04753c73e7f8f8b8b8e60405161086e9493929190612ed9565b60405180910390a3505083547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff167501000000000000000000000000000000000000000000179093555092989197509095505050505050565b606080807f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c755f806108f6611445565b9199509750955090925090508087111561093c576040517fa2b0657400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f836004018054806020026020016040519081016040528092919081815260200182805480156109ab57602002820191905f5260205f20905f905b825461010083900a900460070b81526020600f83018190049384019360010360089093019290920291018084116109775790505b505050505090505f633b9aca008467ffffffffffffffff161015610a5f575f85600301805480602002602001604051908101604052809291908181526020018280548015610a4957602002820191905f5260205f20905f905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411610a045790505b50505050509050610a5b858285611b29565b9150505b5f5b8751811015610b7a57633b9aca008567ffffffffffffffff161015610ad757610a8e633b9aca0085612f17565b8267ffffffffffffffff16898381518110610aab57610aab612e03565b60200260200101518c610abe9190612f17565b610ac89190612f17565b610ad29190612f5b565b610b55565b610aeb67ffffffffffffffff861685612f17565b8360018551610afa9190612eae565b81518110610b0a57610b0a612e03565b602002602001015167ffffffffffffffff16898381518110610b2e57610b2e612e03565b60200260200101518c610b419190612f17565b610b4b9190612f17565b610b559190612f5b565b888281518110610b6757610b67612e03565b6020908102919091010152600101610a61565b5050505050509193909250565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d545f9073ffffffffffffffffffffffffffffffffffffffff168180610be4838830610bd66004868b8d612f6e565b610bdf91612f95565b611cc9565b9150915081610d145763ffffffff811615610d09577f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7580547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff167601000000000000000000000000000000000000000000001781556040517f94c7d7ee00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516906394c7d7ee90610caf908b908b908b90600401612ffb565b5f604051808303815f87803b158015610cc6575f5ffd5b505af1158015610cd8573d5f5f3e3d5ffd5b505082547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff1690925550610d149050565b5f9350505050610d1c565b600193505050505b9392505050565b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c76545f907f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c75906fffffffffffffffffffffffffffffffff7001000000000000000000000000000000008204811691168415610dca5780610daf6b033b2e3c9fd0803ce800000088612f17565b610db99190612f5b565b610dc39083613064565b9350610df8565b80610de16b033b2e3c9fd0803ce800000088612f17565b610deb9190612f5b565b610df59083612eae565b93505b670de0b6b3a764000084111580610e1e57506ec097ce7bc90715b34b9f10000000008410155b15611035575f83600201805480602002602001604051908101604052809291908181526020018280548015610e8757602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610e5c575b505050505090505f815190505f5f5b82811015610fdf575f610f366b033b2e3c9fd0803ce80000008a8a6005015f898781518110610ec757610ec7612e03565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040015f2054610f2791906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16612f17565b610f319190612f5b565b611dcc565b9050610f428184613077565b9250806fffffffffffffffffffffffffffffffff16886005015f878581518110610f6e57610f6e612e03565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040015f2080547affffffffffffffffffffffffffffffffffffffffffffffffffffff92909216650100000000000264ffffffffff90921691909117905550600101610e96565b506001860180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055506b033b2e3c9fd0803ce80000009450505b61103e84611dcc565b6001840180546fffffffffffffffffffffffffffffffff9283167001000000000000000000000000000000000292169190911790556040517fb4fde7403c001c7cdeafc0c3bb46e972111b7efac4e832398cbf9fabe1694ed9906110a59086815260200190565b60405180910390a150505092915050565b80515f90815b81811015611121578381815181106110d6576110d6612e03565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036111195791506101c49050565b6001016110bc565b505f19949350505050565b5f5f5f848060200190518101906111439190613135565b915091505f61116f7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7590565b6008015f84801561118257611182613183565b801561119057611190613183565b81526020019081526020015f205f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205411156111ea576001925050506101c4565b8051156112da575f82801561120157611201613183565b036112da575f8180602001905181019061121b91906131b0565b905073ffffffffffffffffffffffffffffffffffffffff8116156112d8576040517f65e4ad9e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff86811660248301528216906365e4ad9e906044016020604051808303815f875af11580156112aa573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112ce91906131cb565b93505050506101c4565b505b505f949350505050565b5f5f6112ef83611e2a565b90925090505f82801561130457611304613183565b036113ab578080602001905181019061131d91906131b0565b6040517f8bfb07c900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301528781166024830152604482018790529190911690638bfb07c9906064015f604051808303815f87803b158015611394575f5ffd5b505af11580156113a6573d5f5f3e3d5ffd5b505050505b505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611440908490611e4b565b505050565b5f8060608080837f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7590505f5f826002018054806020026020016040519081016040528092919081815260200182805480156114d457602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116114a9575b505050505090505f815190505f8167ffffffffffffffff8111156114fa576114fa612aba565b604051908082528060200260200182016040528015611523578160200160208202803683370190505b5095505f5b8281101561160f57856005015f85838151811061154757611547612e03565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040015f9081205460ff1690036115925761158b82612ec1565b91506115e9565b856005015f8583815181106115a9576115a9612e03565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040015f20600701546115e69083613064565b91505b818782815181106115fc576115fc612e03565b6020908102919091010152600101611528565b508067ffffffffffffffff81111561162957611629612aba565b604051908082528060200260200182016040528015611652578160200160208202803683370190505b5096508067ffffffffffffffff81111561166e5761166e612aba565b604051908082528060200260200182016040528015611697578160200160208202803683370190505b5097505f5f5b83811015611a9f575f876005015f8784815181106116bd576116bd612e03565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040015f908120805490925060ff161561188f57606061179383600701600101805461171290612e30565b80601f016020809104026020016040519081016040528092919081815260200182805461173e90612e30565b80156117895780601f1061176057610100808354040283529160200191611789565b820191905f5260205f20905b81548152906001019060200180831161176c57829003601f168201915b5050505050611ef0565b81519093509091505f5b8181101561187b57600785018054829081106117bb576117bb612e03565b5f9182526020909120015473ffffffffffffffffffffffffffffffffffffffff168f6117e7838a613064565b815181106117f7576117f7612e03565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082818151811061184357611843612e03565b60200260200101518e82896118589190613064565b8151811061186857611868612e03565b602090810291909101015260010161179d565b506118868187613064565b955050506119b7565b8683815181106118a1576118a1612e03565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611915573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061193991906131e6565b905086838151811061194d5761194d612e03565b60200260200101518c858151811061196757611967612e03565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152808b8561199881612ec1565b9650815181106119aa576119aa612e03565b6020026020010181815250505b5f611a4b8360050180546119ca90612e30565b80601f01602080910402602001604051908101604052809291908181526020018280546119f690612e30565b8015611a415780601f10611a1857610100808354040283529160200191611a41565b820191905f5260205f20905b815481529060010190602001808311611a2457829003601f168201915b5050505050611fca565b8354909150670de0b6b3a764000090611a719084906301000000900460ff1660126120a3565b611a7b9083612f17565b611a859190612f5b565b611a8f908a613064565b985050505080600101905061169d565b5050600180860154611ae9916fffffffffffffffffffffffffffffffff80831692700100000000000000000000000000000000900416906b033b2e3c9fd0803ce80000009061210c565b98508815611b1157611b0a611b0585633b9aca008c600161210c565b612159565b9950611b1d565b67ffffffffffffffff99505b50505050509091929394565b5f5f611b396001856001886121a8565b905080158015611b755750835f81518110611b5657611b56612e03565b602002602001015167ffffffffffffffff168567ffffffffffffffff16105b15611b9c57825f81518110611b8c57611b8c612e03565b6020026020010151915050610d1c565b60018451611baa9190612eae565b8103611bcf578260018551611bbf9190612eae565b81518110611b8c57611b8c612e03565b838181518110611be157611be1612e03565b602002602001015184826001611bf79190613064565b81518110611c0757611c07612e03565b6020026020010151611c1991906131fd565b848281518110611c2b57611c2b612e03565b602002602001015186611c3e91906131fd565b848381518110611c5057611c50612e03565b602002602001015185846001611c669190613064565b81518110611c7657611c76612e03565b6020026020010151611c88919061321d565b611c929190613263565b611c9c9190613282565b838281518110611cae57611cae612e03565b6020026020010151611cc091906132d6565b95945050505050565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201527fffffffff00000000000000000000000000000000000000000000000000000000821660648201525f9081908190608401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb7009613000000000000000000000000000000000000000000000000000000001781525f808052918290528351939450919290918a5afa15611dc2575f516020805191945081901c150291505b5094509492505050565b5f6fffffffffffffffffffffffffffffffff821115611e26576040517f6dfcc65000000000000000000000000000000000000000000000000000000000815260806004820152602481018390526044015b60405180910390fd5b5090565b5f606082806020019051810190611e419190613135565b9094909350915050565b5f5f60205f8451602086015f885af180611e6a576040513d5f823e3d81fd5b50505f513d91508115611e81578060011415611e9b565b73ffffffffffffffffffffffffffffffffffffffff84163b155b15611eea576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401611e1d565b50505050565b60605f5f5f611efe85611e2a565b90925090505f828015611f1357611f13613183565b03611fc35780806020019051810190611f2c91906131b0565b73ffffffffffffffffffffffffffffffffffffffff166301e1d1146040518163ffffffff1660e01b81526004015f60405180830381865afa158015611f73573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611fb8919081019061331c565b935093505050915091565b5050915091565b5f5f5f5f5f611fd88661233d565b50929650909450925090506001846009811115611ff757611ff7613183565b0361208b575f8280602001905181019061201191906131b0565b90508073ffffffffffffffffffffffffffffffffffffffff16636256f2c56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561205c573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061208091906131e6565b979650505050505050565b612098848484845f61236a565b509695505050505050565b5f8160ff168360ff1611156120d8576120bc82846133b7565b6120c790600a6134b3565b6120d19085612f5b565b9050610d1c565b8160ff168360ff161015612105576120f083836133b7565b6120fb90600a6134b3565b6120d19085612f17565b5082610d1c565b5f61213961211983612405565b801561213457505f848061212f5761212f612f2e565b868809115b151590565b612144868686612431565b61214e9190613064565b90505b949350505050565b5f67ffffffffffffffff821115611e2657604080517f6dfcc650000000000000000000000000000000000000000000000000000000008152600481019190915260248101839052604401611e1d565b5f83515f036121b857505f612151565b835160019086801561220c575067ffffffffffffffff841685876121dd600185612eae565b815181106121ed576121ed612e03565b60200260200101516121ff91906134c1565b67ffffffffffffffff1611155b80612262575086158015612262575067ffffffffffffffff84168587612233600185612eae565b8151811061224357612243612e03565b602002602001015161225591906134c1565b67ffffffffffffffff1610155b1561227b57612272600182612eae565b92505050612151565b80821015612332575f61228e83836124e1565b9050876122d5578467ffffffffffffffff16868883815181106122b3576122b3612e03565b60200260200101516122c591906134c1565b67ffffffffffffffff1610612311565b8467ffffffffffffffff16868883815181106122f3576122f3612e03565b602002602001015161230591906134c1565b67ffffffffffffffff16115b1561231e5780915061232c565b612329816001613064565b92505b5061227b565b612080600183612eae565b5f5f60608060608580602001905181019061235891906134f7565b939a9299509097509550909350915050565b5f5f61237f86670de0b6b3a7640000866124fb565b905061238c8782876124fb565b91506123a0670de0b6b3a764000083612f17565b6123b284670de0b6b3a7640000612eae565b6123bc9083612f17565b1080156123f457506123d683670de0b6b3a7640000613064565b6123e09082612f17565b6123f2670de0b6b3a764000084612f17565b105b156100d45796879650945050505050565b5f600282600381111561241a5761241a613183565b61242491906135a6565b60ff166001149050919050565b5f5f5f61243e8686612926565b91509150815f036124625783818161245857612458612f2e565b0492505050610d1c565b818411612479576124796003851502601118612942565b5f848688095f868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010185841190960395909502919093039390930492909217029150509392505050565b5f6124ef6002848418612f5b565b6101c190848416613064565b5f8084600981111561250f5761250f613183565b036125df575f5f5f5f5f8680602001905181019061252d91906136aa565b945094509450945094505f612542828a612953565b86519091505f5b818110156125cf576125c58389838151811061256757612567612e03565b602002602001015188848151811061258157612581612e03565b602002602001015188858151811061259b5761259b612e03565b602002602001015160ff168b86815181106125b8576125b8612e03565b6020026020010151612982565b9250600101612549565b5081975050505050505050610d1c565b60038460098111156125f3576125f3613183565b036126075750670de0b6b3a7640000610d1c565b600284600981111561261b5761261b613183565b03612627575081610d1c565b600484600981111561263b5761263b613183565b036126d2576040517f7a28fb88000000000000000000000000000000000000000000000000000000008152670de0b6b3a7640000600482015273ae7ab96520de3a18e5e111b5eaab095312d7fe8490637a28fb8890602401602060405180830381865afa1580156126ae573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120d191906131e6565b60058460098111156126e6576126e6613183565b036127485773be9895146f7af43049ca1c1ae358b0541ea4970473ffffffffffffffffffffffffffffffffffffffff16633ba0b9a96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126ae573d5f5f3e3d5ffd5b600684600981111561275c5761275c613183565b036127be5773ae78736cd615f374d3085123a210448e74fc639373ffffffffffffffffffffffffffffffffffffffff1663e6aa216c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126ae573d5f5f3e3d5ffd5b60078460098111156127d2576127d2613183565b036128345773ac3e018457b222d93114458476f3e3416abbe38f73ffffffffffffffffffffffffffffffffffffffff166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126ae573d5f5f3e3d5ffd5b600884600981111561284857612848613183565b0361286b575f8280602001905181019061286291906131e6565b9150610d1c9050565b600984600981111561287f5761287f613183565b0361291f575f5f8380602001905181019061289a91906137d5565b91509150808273ffffffffffffffffffffffffffffffffffffffff1663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128e8573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061290c91906131e6565b6129169190612f5b565b92505050610d1c565b5081610d1c565b5f805f1983850993909202808410938190039390930393915050565b634e487b715f52806020526024601cfd5b5f8083600181111561296757612967613183565b0361297b5750670de0b6b3a76400006101c4565b50806101c4565b5f5f5f8673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156129ce573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906129f2919061381a565b509350509250505f82131580612a16575063ffffffff8416612a148242612eae565b115b15612a4d576040517fae19356300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8560ff16600103612a8057612a6385600a61385c565b612a6d838a612f17565b612a779190612f5b565b92505050611cc0565b81612a8c86600a61385c565b612a6d908a612f17565b73ffffffffffffffffffffffffffffffffffffffff81168114612ab7575f5ffd5b50565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612b2e57612b2e612aba565b604052919050565b5f67ffffffffffffffff821115612b4f57612b4f612aba565b5060051b60200190565b5f82601f830112612b68575f5ffd5b8135612b7b612b7682612b36565b612ae7565b8082825260208201915060208360051b860101925085831115612b9c575f5ffd5b602085015b83811015612bb9578035835260209283019201612ba1565b5095945050505050565b5f5f5f5f5f60a08688031215612bd7575f5ffd5b853594506020860135612be981612a96565b935060408601359250606086013567ffffffffffffffff811115612c0b575f5ffd5b612c1788828901612b59565b925050608086013567ffffffffffffffff811115612c33575f5ffd5b8601601f81018813612c43575f5ffd5b8035612c51612b7682612b36565b8082825260208201915060208360051b85010192508a831115612c72575f5ffd5b6020840193505b82841015612c9d578335612c8c81612a96565b825260209384019390910190612c79565b809450505050509295509295909350565b5f8151808452602084019350602083015f5b82811015612cf457815173ffffffffffffffffffffffffffffffffffffffff16865260209586019590910190600101612cc0565b5093949350505050565b5f8151808452602084019350602083015f5b82811015612cf4578151865260209586019590910190600101612d10565b604081525f612d406040830185612cae565b8281036020840152611cc08185612cfe565b5f5f5f5f60808587031215612d65575f5ffd5b843593506020850135612d7781612a96565b925060408501359150606085013567ffffffffffffffff811115612d99575f5ffd5b612da587828801612b59565b91505092959194509250565b5f60208284031215612dc1575f5ffd5b5035919050565b8015158114612ab7575f5ffd5b5f5f60408385031215612de6575f5ffd5b823591506020830135612df881612dc8565b809150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b600181811c90821680612e4457607f821691505b602082108103612e7b577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b818103818111156101c4576101c4612e81565b5f5f198203612ed257612ed2612e81565b5060010190565b848152608060208201525f612ef16080830186612cae565b8281036040840152612f038186612cfe565b905082810360608401526120808185612cae565b80820281158282048414176101c4576101c4612e81565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f82612f6957612f69612f2e565b500490565b5f5f85851115612f7c575f5ffd5b83861115612f88575f5ffd5b5050820193919092039150565b80357fffffffff000000000000000000000000000000000000000000000000000000008116906004841015612ff4577fffffffff00000000000000000000000000000000000000000000000000000000808560040360031b1b82161691505b5092915050565b73ffffffffffffffffffffffffffffffffffffffff8416815260406020820152816040820152818360608301375f818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b808201808211156101c4576101c4612e81565b6fffffffffffffffffffffffffffffffff81811683821601908111156101c4576101c4612e81565b60018110612ab7575f5ffd5b5f82601f8301126130ba575f5ffd5b815167ffffffffffffffff8111156130d4576130d4612aba565b61310560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612ae7565b818152846020838601011115613119575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b5f5f60408385031215613146575f5ffd5b82516131518161309f565b602084015190925067ffffffffffffffff81111561316d575f5ffd5b613179858286016130ab565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f602082840312156131c0575f5ffd5b8151610d1c81612a96565b5f602082840312156131db575f5ffd5b8151610d1c81612dc8565b5f602082840312156131f6575f5ffd5b5051919050565b67ffffffffffffffff82811682821603908111156101c4576101c4612e81565b600782810b9082900b037fffffffffffffffffffffffffffffffffffffffffffffffff80000000000000008112677fffffffffffffff821317156101c4576101c4612e81565b5f8260070b8260070b028060070b9150808214612ff457612ff4612e81565b5f8160070b8360070b8061329857613298612f2e565b5f1981147fffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000831416156132cd576132cd612e81565b90059392505050565b600781810b9083900b01677fffffffffffffff81137fffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000821217156101c4576101c4612e81565b5f5f6040838503121561332d575f5ffd5b825167ffffffffffffffff811115613343575f5ffd5b8301601f81018513613353575f5ffd5b8051613361612b7682612b36565b8082825260208201915060208360051b850101925087831115613382575f5ffd5b6020840193505b828410156133a4578351825260209384019390910190613389565b6020969096015195979596505050505050565b60ff82811682821603908111156101c4576101c4612e81565b6001815b600184111561340b578085048111156133ef576133ef612e81565b60018416156133fd57908102905b60019390931c9280026133d4565b935093915050565b5f82613421575060016101c4565b8161342d57505f6101c4565b8160018114613443576002811461344d57613469565b60019150506101c4565b60ff84111561345e5761345e612e81565b50506001821b6101c4565b5060208310610133831016604e8410600b841016171561348c575081810a6101c4565b6134985f1984846133d0565b805f19048211156134ab576134ab612e81565b029392505050565b5f6101c160ff841683613413565b67ffffffffffffffff8181168382160290811690818114612ff457612ff4612e81565b8051600a81106134f2575f5ffd5b919050565b5f5f5f5f5f60a0868803121561350b575f5ffd5b613514866134e4565b9450613522602087016134e4565b9350604086015167ffffffffffffffff81111561353d575f5ffd5b613549888289016130ab565b935050606086015167ffffffffffffffff811115613565575f5ffd5b613571888289016130ab565b925050608086015167ffffffffffffffff81111561358d575f5ffd5b613599888289016130ab565b9150509295509295909350565b5f60ff8316806135b8576135b8612f2e565b8060ff84160691505092915050565b5f82601f8301126135d6575f5ffd5b81516135e4612b7682612b36565b8082825260208201915060208360051b860101925085831115613605575f5ffd5b602085015b83811015612bb957805163ffffffff81168114613625575f5ffd5b83526020928301920161360a565b5f82601f830112613642575f5ffd5b8151613650612b7682612b36565b8082825260208201915060208360051b860101925085831115613671575f5ffd5b602085015b83811015612bb957805160ff8116811461368e575f5ffd5b835260209283019201613676565b8051600281106134f2575f5ffd5b5f5f5f5f5f60a086880312156136be575f5ffd5b855167ffffffffffffffff8111156136d4575f5ffd5b8601601f810188136136e4575f5ffd5b80516136f2612b7682612b36565b8082825260208201915060208360051b85010192508a831115613713575f5ffd5b6020840193505b8284101561373e57835161372d81612a96565b82526020938401939091019061371a565b80985050505050602086015167ffffffffffffffff81111561375e575f5ffd5b61376a888289016135c7565b945050604086015167ffffffffffffffff811115613786575f5ffd5b61379288828901613633565b935050606086015167ffffffffffffffff8111156137ae575f5ffd5b6137ba88828901613633565b9250506137c96080870161369c565b90509295509295909350565b5f5f604083850312156137e6575f5ffd5b82516137f181612a96565b6020939093015192949293505050565b805169ffffffffffffffffffff811681146134f2575f5ffd5b5f5f5f5f5f60a0868803121561382e575f5ffd5b61383786613801565b602087015160408801516060890151929750909550935091506137c960808701613801565b5f6101c1838361341356fea2646970667358221220d27fe5226d9d28d5efdadcbcda7ab8d9affd916286a2264cdf74349607b5278e64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561000f575f5ffd5b506004361061004a575f3560e01c80632e7639bc1461004e578063815822c114610078578063d703a0cd1461008b578063fd7daaf81461009e575b5f5ffd5b61006161005c366004612bc3565b6100bf565b60405161006f929190612d2e565b60405180910390f35b610061610086366004612d52565b6100de565b610061610099366004612db1565b610125565b6100b16100ac366004612dd5565b61013c565b60405190815260200161006f565b6060806100cf87878787876101ca565b915091505b9550959350505050565b606080610118868686865f604051908082528060200260200182016040528015610112578160200160208202803683370190505b506101ca565b9150915094509492505050565b606080610131836108c7565b509094909350915050565b5f610148335f36610b87565b1580156101805750335f9081527f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7b6020526040902054155b156101b7576040517fc22a648e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101c18383610d23565b90505b92915050565b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c758054606091829160ff7501000000000000000000000000000000000000000000909104167ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01610267576040517f37ed32e800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675020000000000000000000000000000000000000000001781557f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c75805474010000000000000000000000000000000000000000900460ff165f0361031b576040517f9e87fac800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86421115610355576040517fecdd1c2900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60606103608a6108c7565b81518a5193985091965092509081146103a5576040517f1df89e8b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103af8b5f610d23565b5082546040517f2b471d8e000000000000000000000000000000000000000000000000000000008152600481018d905233602482015273ffffffffffffffffffffffffffffffffffffffff90911690632b471d8e906044015f604051808303815f87803b15801561041e575f5ffd5b505af1158015610430573d5f5f3e3d5ffd5b505050505f8360020180548060200260200160405190810160405280929190818152602001828054801561049857602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161046d575b505050505090505f5f5b8381101561080a578a81815181106104bc576104bc612e03565b60200260200101518882815181106104d6576104d6612e03565b60200260200101511015610516576040517fa1aabbe100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f88828151811061052957610529612e03565b602002602001015111801561055f57505f61055d8a838151811061054f5761054f612e03565b60200260200101518c6110b6565b125b156107ca575f866005015f85858151811061057c5761057c612e03565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040015f208054909150640100000000900460ff161580159061065a57506106588160060180546105d690612e30565b80601f016020809104026020016040519081016040528092919081815260200182805461060290612e30565b801561064d5780601f106106245761010080835404028352916020019161064d565b820191905f5260205f20905b81548152906001019060200180831161063057829003601f168201915b50505050508f61112c565b155b15610691576040517f584a793800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805460ff161561076b576107668a83815181106106b0576106b0612e03565b60200260200101518f8b85815181106106cb576106cb612e03565b60200260200101518460070160010180546106e590612e30565b80601f016020809104026020016040519081016040528092919081815260200182805461071190612e30565b801561075c5780601f106107335761010080835404028352916020019161075c565b820191905f5260205f20905b81548152906001019060200180831161073f57829003601f168201915b50505050506112e4565b6107c8565b6107c88e8a848151811061078157610781612e03565b60200260200101518c858151811061079b5761079b612e03565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166113b39092919063ffffffff16565b505b8060018684815181106107df576107df612e03565b60200260200101516107f19190612eae565b11610802576107ff82612ec1565b91505b6001016104a2565b508b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f3998bcf315dae4953d294b3ca6e1d0074c249adc136b50d1ff99b04753c73e7f8f8b8b8e60405161086e9493929190612ed9565b60405180910390a3505083547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff167501000000000000000000000000000000000000000000179093555092989197509095505050505050565b606080807f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c755f806108f6611445565b9199509750955090925090508087111561093c576040517fa2b0657400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f836004018054806020026020016040519081016040528092919081815260200182805480156109ab57602002820191905f5260205f20905f905b825461010083900a900460070b81526020600f83018190049384019360010360089093019290920291018084116109775790505b505050505090505f633b9aca008467ffffffffffffffff161015610a5f575f85600301805480602002602001604051908101604052809291908181526020018280548015610a4957602002820191905f5260205f20905f905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff1681526020019060080190602082600701049283019260010382029150808411610a045790505b50505050509050610a5b858285611b29565b9150505b5f5b8751811015610b7a57633b9aca008567ffffffffffffffff161015610ad757610a8e633b9aca0085612f17565b8267ffffffffffffffff16898381518110610aab57610aab612e03565b60200260200101518c610abe9190612f17565b610ac89190612f17565b610ad29190612f5b565b610b55565b610aeb67ffffffffffffffff861685612f17565b8360018551610afa9190612eae565b81518110610b0a57610b0a612e03565b602002602001015167ffffffffffffffff16898381518110610b2e57610b2e612e03565b60200260200101518c610b419190612f17565b610b4b9190612f17565b610b559190612f5b565b888281518110610b6757610b67612e03565b6020908102919091010152600101610a61565b5050505050509193909250565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d545f9073ffffffffffffffffffffffffffffffffffffffff168180610be4838830610bd66004868b8d612f6e565b610bdf91612f95565b611cc9565b9150915081610d145763ffffffff811615610d09577f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7580547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff167601000000000000000000000000000000000000000000001781556040517f94c7d7ee00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516906394c7d7ee90610caf908b908b908b90600401612ffb565b5f604051808303815f87803b158015610cc6575f5ffd5b505af1158015610cd8573d5f5f3e3d5ffd5b505082547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff1690925550610d149050565b5f9350505050610d1c565b600193505050505b9392505050565b7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c76545f907f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c75906fffffffffffffffffffffffffffffffff7001000000000000000000000000000000008204811691168415610dca5780610daf6b033b2e3c9fd0803ce800000088612f17565b610db99190612f5b565b610dc39083613064565b9350610df8565b80610de16b033b2e3c9fd0803ce800000088612f17565b610deb9190612f5b565b610df59083612eae565b93505b670de0b6b3a764000084111580610e1e57506ec097ce7bc90715b34b9f10000000008410155b15611035575f83600201805480602002602001604051908101604052809291908181526020018280548015610e8757602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610e5c575b505050505090505f815190505f5f5b82811015610fdf575f610f366b033b2e3c9fd0803ce80000008a8a6005015f898781518110610ec757610ec7612e03565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040015f2054610f2791906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16612f17565b610f319190612f5b565b611dcc565b9050610f428184613077565b9250806fffffffffffffffffffffffffffffffff16886005015f878581518110610f6e57610f6e612e03565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040015f2080547affffffffffffffffffffffffffffffffffffffffffffffffffffff92909216650100000000000264ffffffffff90921691909117905550600101610e96565b506001860180547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055506b033b2e3c9fd0803ce80000009450505b61103e84611dcc565b6001840180546fffffffffffffffffffffffffffffffff9283167001000000000000000000000000000000000292169190911790556040517fb4fde7403c001c7cdeafc0c3bb46e972111b7efac4e832398cbf9fabe1694ed9906110a59086815260200190565b60405180910390a150505092915050565b80515f90815b81811015611121578381815181106110d6576110d6612e03565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16036111195791506101c49050565b6001016110bc565b505f19949350505050565b5f5f5f848060200190518101906111439190613135565b915091505f61116f7f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7590565b6008015f84801561118257611182613183565b801561119057611190613183565b81526020019081526020015f205f8673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205411156111ea576001925050506101c4565b8051156112da575f82801561120157611201613183565b036112da575f8180602001905181019061121b91906131b0565b905073ffffffffffffffffffffffffffffffffffffffff8116156112d8576040517f65e4ad9e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff86811660248301528216906365e4ad9e906044016020604051808303815f875af11580156112aa573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112ce91906131cb565b93505050506101c4565b505b505f949350505050565b5f5f6112ef83611e2a565b90925090505f82801561130457611304613183565b036113ab578080602001905181019061131d91906131b0565b6040517f8bfb07c900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301528781166024830152604482018790529190911690638bfb07c9906064015f604051808303815f87803b158015611394575f5ffd5b505af11580156113a6573d5f5f3e3d5ffd5b505050505b505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611440908490611e4b565b505050565b5f8060608080837f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7590505f5f826002018054806020026020016040519081016040528092919081815260200182805480156114d457602002820191905f5260205f20905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116114a9575b505050505090505f815190505f8167ffffffffffffffff8111156114fa576114fa612aba565b604051908082528060200260200182016040528015611523578160200160208202803683370190505b5095505f5b8281101561160f57856005015f85838151811061154757611547612e03565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040015f9081205460ff1690036115925761158b82612ec1565b91506115e9565b856005015f8583815181106115a9576115a9612e03565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040015f20600701546115e69083613064565b91505b818782815181106115fc576115fc612e03565b6020908102919091010152600101611528565b508067ffffffffffffffff81111561162957611629612aba565b604051908082528060200260200182016040528015611652578160200160208202803683370190505b5096508067ffffffffffffffff81111561166e5761166e612aba565b604051908082528060200260200182016040528015611697578160200160208202803683370190505b5097505f5f5b83811015611a9f575f876005015f8784815181106116bd576116bd612e03565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff1682528101919091526040015f908120805490925060ff161561188f57606061179383600701600101805461171290612e30565b80601f016020809104026020016040519081016040528092919081815260200182805461173e90612e30565b80156117895780601f1061176057610100808354040283529160200191611789565b820191905f5260205f20905b81548152906001019060200180831161176c57829003601f168201915b5050505050611ef0565b81519093509091505f5b8181101561187b57600785018054829081106117bb576117bb612e03565b5f9182526020909120015473ffffffffffffffffffffffffffffffffffffffff168f6117e7838a613064565b815181106117f7576117f7612e03565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505082818151811061184357611843612e03565b60200260200101518e82896118589190613064565b8151811061186857611868612e03565b602090810291909101015260010161179d565b506118868187613064565b955050506119b7565b8683815181106118a1576118a1612e03565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906370a0823190602401602060405180830381865afa158015611915573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061193991906131e6565b905086838151811061194d5761194d612e03565b60200260200101518c858151811061196757611967612e03565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152808b8561199881612ec1565b9650815181106119aa576119aa612e03565b6020026020010181815250505b5f611a4b8360050180546119ca90612e30565b80601f01602080910402602001604051908101604052809291908181526020018280546119f690612e30565b8015611a415780601f10611a1857610100808354040283529160200191611a41565b820191905f5260205f20905b815481529060010190602001808311611a2457829003601f168201915b5050505050611fca565b8354909150670de0b6b3a764000090611a719084906301000000900460ff1660126120a3565b611a7b9083612f17565b611a859190612f5b565b611a8f908a613064565b985050505080600101905061169d565b5050600180860154611ae9916fffffffffffffffffffffffffffffffff80831692700100000000000000000000000000000000900416906b033b2e3c9fd0803ce80000009061210c565b98508815611b1157611b0a611b0585633b9aca008c600161210c565b612159565b9950611b1d565b67ffffffffffffffff99505b50505050509091929394565b5f5f611b396001856001886121a8565b905080158015611b755750835f81518110611b5657611b56612e03565b602002602001015167ffffffffffffffff168567ffffffffffffffff16105b15611b9c57825f81518110611b8c57611b8c612e03565b6020026020010151915050610d1c565b60018451611baa9190612eae565b8103611bcf578260018551611bbf9190612eae565b81518110611b8c57611b8c612e03565b838181518110611be157611be1612e03565b602002602001015184826001611bf79190613064565b81518110611c0757611c07612e03565b6020026020010151611c1991906131fd565b848281518110611c2b57611c2b612e03565b602002602001015186611c3e91906131fd565b848381518110611c5057611c50612e03565b602002602001015185846001611c669190613064565b81518110611c7657611c76612e03565b6020026020010151611c88919061321d565b611c929190613263565b611c9c9190613282565b838281518110611cae57611cae612e03565b6020026020010151611cc091906132d6565b95945050505050565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201527fffffffff00000000000000000000000000000000000000000000000000000000821660648201525f9081908190608401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb7009613000000000000000000000000000000000000000000000000000000001781525f808052918290528351939450919290918a5afa15611dc2575f516020805191945081901c150291505b5094509492505050565b5f6fffffffffffffffffffffffffffffffff821115611e26576040517f6dfcc65000000000000000000000000000000000000000000000000000000000815260806004820152602481018390526044015b60405180910390fd5b5090565b5f606082806020019051810190611e419190613135565b9094909350915050565b5f5f60205f8451602086015f885af180611e6a576040513d5f823e3d81fd5b50505f513d91508115611e81578060011415611e9b565b73ffffffffffffffffffffffffffffffffffffffff84163b155b15611eea576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401611e1d565b50505050565b60605f5f5f611efe85611e2a565b90925090505f828015611f1357611f13613183565b03611fc35780806020019051810190611f2c91906131b0565b73ffffffffffffffffffffffffffffffffffffffff166301e1d1146040518163ffffffff1660e01b81526004015f60405180830381865afa158015611f73573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611fb8919081019061331c565b935093505050915091565b5050915091565b5f5f5f5f5f611fd88661233d565b50929650909450925090506001846009811115611ff757611ff7613183565b0361208b575f8280602001905181019061201191906131b0565b90508073ffffffffffffffffffffffffffffffffffffffff16636256f2c56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561205c573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061208091906131e6565b979650505050505050565b612098848484845f61236a565b509695505050505050565b5f8160ff168360ff1611156120d8576120bc82846133b7565b6120c790600a6134b3565b6120d19085612f5b565b9050610d1c565b8160ff168360ff161015612105576120f083836133b7565b6120fb90600a6134b3565b6120d19085612f17565b5082610d1c565b5f61213961211983612405565b801561213457505f848061212f5761212f612f2e565b868809115b151590565b612144868686612431565b61214e9190613064565b90505b949350505050565b5f67ffffffffffffffff821115611e2657604080517f6dfcc650000000000000000000000000000000000000000000000000000000008152600481019190915260248101839052604401611e1d565b5f83515f036121b857505f612151565b835160019086801561220c575067ffffffffffffffff841685876121dd600185612eae565b815181106121ed576121ed612e03565b60200260200101516121ff91906134c1565b67ffffffffffffffff1611155b80612262575086158015612262575067ffffffffffffffff84168587612233600185612eae565b8151811061224357612243612e03565b602002602001015161225591906134c1565b67ffffffffffffffff1610155b1561227b57612272600182612eae565b92505050612151565b80821015612332575f61228e83836124e1565b9050876122d5578467ffffffffffffffff16868883815181106122b3576122b3612e03565b60200260200101516122c591906134c1565b67ffffffffffffffff1610612311565b8467ffffffffffffffff16868883815181106122f3576122f3612e03565b602002602001015161230591906134c1565b67ffffffffffffffff16115b1561231e5780915061232c565b612329816001613064565b92505b5061227b565b612080600183612eae565b5f5f60608060608580602001905181019061235891906134f7565b939a9299509097509550909350915050565b5f5f61237f86670de0b6b3a7640000866124fb565b905061238c8782876124fb565b91506123a0670de0b6b3a764000083612f17565b6123b284670de0b6b3a7640000612eae565b6123bc9083612f17565b1080156123f457506123d683670de0b6b3a7640000613064565b6123e09082612f17565b6123f2670de0b6b3a764000084612f17565b105b156100d45796879650945050505050565b5f600282600381111561241a5761241a613183565b61242491906135a6565b60ff166001149050919050565b5f5f5f61243e8686612926565b91509150815f036124625783818161245857612458612f2e565b0492505050610d1c565b818411612479576124796003851502601118612942565b5f848688095f868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010185841190960395909502919093039390930492909217029150509392505050565b5f6124ef6002848418612f5b565b6101c190848416613064565b5f8084600981111561250f5761250f613183565b036125df575f5f5f5f5f8680602001905181019061252d91906136aa565b945094509450945094505f612542828a612953565b86519091505f5b818110156125cf576125c58389838151811061256757612567612e03565b602002602001015188848151811061258157612581612e03565b602002602001015188858151811061259b5761259b612e03565b602002602001015160ff168b86815181106125b8576125b8612e03565b6020026020010151612982565b9250600101612549565b5081975050505050505050610d1c565b60038460098111156125f3576125f3613183565b036126075750670de0b6b3a7640000610d1c565b600284600981111561261b5761261b613183565b03612627575081610d1c565b600484600981111561263b5761263b613183565b036126d2576040517f7a28fb88000000000000000000000000000000000000000000000000000000008152670de0b6b3a7640000600482015273ae7ab96520de3a18e5e111b5eaab095312d7fe8490637a28fb8890602401602060405180830381865afa1580156126ae573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120d191906131e6565b60058460098111156126e6576126e6613183565b036127485773be9895146f7af43049ca1c1ae358b0541ea4970473ffffffffffffffffffffffffffffffffffffffff16633ba0b9a96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126ae573d5f5f3e3d5ffd5b600684600981111561275c5761275c613183565b036127be5773ae78736cd615f374d3085123a210448e74fc639373ffffffffffffffffffffffffffffffffffffffff1663e6aa216c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126ae573d5f5f3e3d5ffd5b60078460098111156127d2576127d2613183565b036128345773ac3e018457b222d93114458476f3e3416abbe38f73ffffffffffffffffffffffffffffffffffffffff166399530b066040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126ae573d5f5f3e3d5ffd5b600884600981111561284857612848613183565b0361286b575f8280602001905181019061286291906131e6565b9150610d1c9050565b600984600981111561287f5761287f613183565b0361291f575f5f8380602001905181019061289a91906137d5565b91509150808273ffffffffffffffffffffffffffffffffffffffff1663a035b1fe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128e8573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061290c91906131e6565b6129169190612f5b565b92505050610d1c565b5081610d1c565b5f805f1983850993909202808410938190039390930393915050565b634e487b715f52806020526024601cfd5b5f8083600181111561296757612967613183565b0361297b5750670de0b6b3a76400006101c4565b50806101c4565b5f5f5f8673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156129ce573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906129f2919061381a565b509350509250505f82131580612a16575063ffffffff8416612a148242612eae565b115b15612a4d576040517fae19356300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8560ff16600103612a8057612a6385600a61385c565b612a6d838a612f17565b612a779190612f5b565b92505050611cc0565b81612a8c86600a61385c565b612a6d908a612f17565b73ffffffffffffffffffffffffffffffffffffffff81168114612ab7575f5ffd5b50565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612b2e57612b2e612aba565b604052919050565b5f67ffffffffffffffff821115612b4f57612b4f612aba565b5060051b60200190565b5f82601f830112612b68575f5ffd5b8135612b7b612b7682612b36565b612ae7565b8082825260208201915060208360051b860101925085831115612b9c575f5ffd5b602085015b83811015612bb9578035835260209283019201612ba1565b5095945050505050565b5f5f5f5f5f60a08688031215612bd7575f5ffd5b853594506020860135612be981612a96565b935060408601359250606086013567ffffffffffffffff811115612c0b575f5ffd5b612c1788828901612b59565b925050608086013567ffffffffffffffff811115612c33575f5ffd5b8601601f81018813612c43575f5ffd5b8035612c51612b7682612b36565b8082825260208201915060208360051b85010192508a831115612c72575f5ffd5b6020840193505b82841015612c9d578335612c8c81612a96565b825260209384019390910190612c79565b809450505050509295509295909350565b5f8151808452602084019350602083015f5b82811015612cf457815173ffffffffffffffffffffffffffffffffffffffff16865260209586019590910190600101612cc0565b5093949350505050565b5f8151808452602084019350602083015f5b82811015612cf4578151865260209586019590910190600101612d10565b604081525f612d406040830185612cae565b8281036020840152611cc08185612cfe565b5f5f5f5f60808587031215612d65575f5ffd5b843593506020850135612d7781612a96565b925060408501359150606085013567ffffffffffffffff811115612d99575f5ffd5b612da587828801612b59565b91505092959194509250565b5f60208284031215612dc1575f5ffd5b5035919050565b8015158114612ab7575f5ffd5b5f5f60408385031215612de6575f5ffd5b823591506020830135612df881612dc8565b809150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b600181811c90821680612e4457607f821691505b602082108103612e7b577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b818103818111156101c4576101c4612e81565b5f5f198203612ed257612ed2612e81565b5060010190565b848152608060208201525f612ef16080830186612cae565b8281036040840152612f038186612cfe565b905082810360608401526120808185612cae565b80820281158282048414176101c4576101c4612e81565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f82612f6957612f69612f2e565b500490565b5f5f85851115612f7c575f5ffd5b83861115612f88575f5ffd5b5050820193919092039150565b80357fffffffff000000000000000000000000000000000000000000000000000000008116906004841015612ff4577fffffffff00000000000000000000000000000000000000000000000000000000808560040360031b1b82161691505b5092915050565b73ffffffffffffffffffffffffffffffffffffffff8416815260406020820152816040820152818360608301375f818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b808201808211156101c4576101c4612e81565b6fffffffffffffffffffffffffffffffff81811683821601908111156101c4576101c4612e81565b60018110612ab7575f5ffd5b5f82601f8301126130ba575f5ffd5b815167ffffffffffffffff8111156130d4576130d4612aba565b61310560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612ae7565b818152846020838601011115613119575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b5f5f60408385031215613146575f5ffd5b82516131518161309f565b602084015190925067ffffffffffffffff81111561316d575f5ffd5b613179858286016130ab565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f602082840312156131c0575f5ffd5b8151610d1c81612a96565b5f602082840312156131db575f5ffd5b8151610d1c81612dc8565b5f602082840312156131f6575f5ffd5b5051919050565b67ffffffffffffffff82811682821603908111156101c4576101c4612e81565b600782810b9082900b037fffffffffffffffffffffffffffffffffffffffffffffffff80000000000000008112677fffffffffffffff821317156101c4576101c4612e81565b5f8260070b8260070b028060070b9150808214612ff457612ff4612e81565b5f8160070b8360070b8061329857613298612f2e565b5f1981147fffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000831416156132cd576132cd612e81565b90059392505050565b600781810b9083900b01677fffffffffffffff81137fffffffffffffffffffffffffffffffffffffffffffffffff8000000000000000821217156101c4576101c4612e81565b5f5f6040838503121561332d575f5ffd5b825167ffffffffffffffff811115613343575f5ffd5b8301601f81018513613353575f5ffd5b8051613361612b7682612b36565b8082825260208201915060208360051b850101925087831115613382575f5ffd5b6020840193505b828410156133a4578351825260209384019390910190613389565b6020969096015195979596505050505050565b60ff82811682821603908111156101c4576101c4612e81565b6001815b600184111561340b578085048111156133ef576133ef612e81565b60018416156133fd57908102905b60019390931c9280026133d4565b935093915050565b5f82613421575060016101c4565b8161342d57505f6101c4565b8160018114613443576002811461344d57613469565b60019150506101c4565b60ff84111561345e5761345e612e81565b50506001821b6101c4565b5060208310610133831016604e8410600b841016171561348c575081810a6101c4565b6134985f1984846133d0565b805f19048211156134ab576134ab612e81565b029392505050565b5f6101c160ff841683613413565b67ffffffffffffffff8181168382160290811690818114612ff457612ff4612e81565b8051600a81106134f2575f5ffd5b919050565b5f5f5f5f5f60a0868803121561350b575f5ffd5b613514866134e4565b9450613522602087016134e4565b9350604086015167ffffffffffffffff81111561353d575f5ffd5b613549888289016130ab565b935050606086015167ffffffffffffffff811115613565575f5ffd5b613571888289016130ab565b925050608086015167ffffffffffffffff81111561358d575f5ffd5b613599888289016130ab565b9150509295509295909350565b5f60ff8316806135b8576135b8612f2e565b8060ff84160691505092915050565b5f82601f8301126135d6575f5ffd5b81516135e4612b7682612b36565b8082825260208201915060208360051b860101925085831115613605575f5ffd5b602085015b83811015612bb957805163ffffffff81168114613625575f5ffd5b83526020928301920161360a565b5f82601f830112613642575f5ffd5b8151613650612b7682612b36565b8082825260208201915060208360051b860101925085831115613671575f5ffd5b602085015b83811015612bb957805160ff8116811461368e575f5ffd5b835260209283019201613676565b8051600281106134f2575f5ffd5b5f5f5f5f5f60a086880312156136be575f5ffd5b855167ffffffffffffffff8111156136d4575f5ffd5b8601601f810188136136e4575f5ffd5b80516136f2612b7682612b36565b8082825260208201915060208360051b85010192508a831115613713575f5ffd5b6020840193505b8284101561373e57835161372d81612a96565b82526020938401939091019061371a565b80985050505050602086015167ffffffffffffffff81111561375e575f5ffd5b61376a888289016135c7565b945050604086015167ffffffffffffffff811115613786575f5ffd5b61379288828901613633565b935050606086015167ffffffffffffffff8111156137ae575f5ffd5b6137ba88828901613633565b9250506137c96080870161369c565b90509295509295909350565b5f5f604083850312156137e6575f5ffd5b82516137f181612a96565b6020939093015192949293505050565b805169ffffffffffffffffffff811681146134f2575f5ffd5b5f5f5f5f5f60a0868803121561382e575f5ffd5b61383786613801565b602087015160408801516060890151929750909550935091506137c960808701613801565b5f6101c1838361341356fea2646970667358221220d27fe5226d9d28d5efdadcbcda7ab8d9affd916286a2264cdf74349607b5278e64736f6c634300081c0033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "immutableReferences": {},
  "inputSourceName": "project/contracts/monetizer/facets/Redeemer.sol",
  "devdoc": {
    "author": "Cooper Labs",
    "custom:contact": "security@monet.cash",
    "details": "This contract is an authorized fork of Angle's `Redeemer` contract https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/facets/Redeemer.sol",
    "errors": {
      "SafeCastOverflowedUintDowncast(uint8,uint256)": [
        {
          "details": "Value doesn't fit in an uint of `bits` size."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC-20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "quoteRedemptionCurve(uint256)": {
        "returns": {
          "amounts": "Amount that would be obtained for each token in the `tokens` array",
          "tokens": "List of tokens that would be given"
        }
      },
      "redeem(uint256,address,uint256,uint256[])": {
        "details": "The `minAmountOuts` list must reflect the amount of `tokens` returnedIn normal conditions, the amount of tokens outputted by this function should be the amount of collateral assets supported by the system, following their order in the `collateralList`.If one collateral has its liquidity managed through strategies, then it's possible that this asset has sub-collaterals with it. In this situation, these sub-collaterals may be sent during the redemption process and the `minAmountOuts` will be bigger than the `collateralList` length. If there are 3 collateral assets and the 2nd collateral asset in the list (at index 1) consists of 3 sub-collaterals, then the ordering of the token list will be as follows: `[collat 1, sub-collat 1 of collat 2, sub-collat 2 of collat 2, sub-collat 3 of collat 2, collat 3]`The list of tokens outputted (and hence the minimum length of the `minAmountOuts` list) can be obtained by calling the `quoteRedemptionCurve` functionTokens requiring a whitelist must be forfeited if the redemption is to an address that is not in the whitelist, otherwise this function revertsNo approval is needed before calling this function",
        "params": {
          "deadline": "Timestamp before which the redemption should have occured",
          "minAmountOuts": "Minimum amount of each token given back in the redemption to obtain",
          "receiver": "Address which should be receiving the output tokens"
        },
        "returns": {
          "amounts": "Amount given for each token in the `tokens` array",
          "tokens": "List of tokens returned"
        }
      },
      "redeemWithForfeit(uint256,address,uint256,uint256[],address[])": {
        "details": "Beware that if a token is given in the `forfeitTokens` list, the redemption will not try to send token even if it has enough immediately available to send the amount"
      },
      "updateNormalizer(uint256,bool)": {
        "details": "This function may be called by trusted addresses: these could be for instance savings contract minting stablecoins when they notice a profit"
      }
    },
    "title": "Redeemer",
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "2898600",
        "executionCost": "3167",
        "totalCost": "2901767"
      },
      "external": {
        "quoteRedemptionCurve(uint256)": "infinite",
        "redeem(uint256,address,uint256,uint256[])": "infinite",
        "redeemWithForfeit(uint256,address,uint256,uint256[],address[])": "infinite",
        "updateNormalizer(uint256,bool)": "infinite"
      },
      "internal": {
        "_quoteRedemptionCurve(uint256)": "infinite",
        "_redeem(uint256,address,uint256,uint256[] memory,address[] memory)": "infinite",
        "_updateNormalizer(uint256,bool)": "infinite"
      }
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidChainlinkRate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTrusted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Paused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooBigAmountIn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooLate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooSmallAmountOut\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newNormalizerValue\",\"type\":\"uint256\"}],\"name\":\"NormalizerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"forfeitTokens\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"quoteRedemptionCurve\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountOuts\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountOuts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"forfeitTokens\",\"type\":\"address[]\"}],\"name\":\"redeemWithForfeit\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\"}],\"name\":\"updateNormalizer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Cooper Labs\",\"custom:contact\":\"security@monet.cash\",\"details\":\"This contract is an authorized fork of Angle's `Redeemer` contract https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/facets/Redeemer.sol\",\"errors\":{\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"quoteRedemptionCurve(uint256)\":{\"returns\":{\"amounts\":\"Amount that would be obtained for each token in the `tokens` array\",\"tokens\":\"List of tokens that would be given\"}},\"redeem(uint256,address,uint256,uint256[])\":{\"details\":\"The `minAmountOuts` list must reflect the amount of `tokens` returnedIn normal conditions, the amount of tokens outputted by this function should be the amount of collateral assets supported by the system, following their order in the `collateralList`.If one collateral has its liquidity managed through strategies, then it's possible that this asset has sub-collaterals with it. In this situation, these sub-collaterals may be sent during the redemption process and the `minAmountOuts` will be bigger than the `collateralList` length. If there are 3 collateral assets and the 2nd collateral asset in the list (at index 1) consists of 3 sub-collaterals, then the ordering of the token list will be as follows: `[collat 1, sub-collat 1 of collat 2, sub-collat 2 of collat 2, sub-collat 3 of collat 2, collat 3]`The list of tokens outputted (and hence the minimum length of the `minAmountOuts` list) can be obtained by calling the `quoteRedemptionCurve` functionTokens requiring a whitelist must be forfeited if the redemption is to an address that is not in the whitelist, otherwise this function revertsNo approval is needed before calling this function\",\"params\":{\"deadline\":\"Timestamp before which the redemption should have occured\",\"minAmountOuts\":\"Minimum amount of each token given back in the redemption to obtain\",\"receiver\":\"Address which should be receiving the output tokens\"},\"returns\":{\"amounts\":\"Amount given for each token in the `tokens` array\",\"tokens\":\"List of tokens returned\"}},\"redeemWithForfeit(uint256,address,uint256,uint256[],address[])\":{\"details\":\"Beware that if a token is given in the `forfeitTokens` list, the redemption will not try to send token even if it has enough immediately available to send the amount\"},\"updateNormalizer(uint256,bool)\":{\"details\":\"This function may be called by trusted addresses: these could be for instance savings contract minting stablecoins when they notice a profit\"}},\"title\":\"Redeemer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"quoteRedemptionCurve(uint256)\":{\"notice\":\"Simulate the exact output that a redemption of `amount` of stablecoins would give at a given block\"},\"redeem(uint256,address,uint256,uint256[])\":{\"notice\":\"Redeems `amount` of stablecoins from the system\"},\"redeemWithForfeit(uint256,address,uint256,uint256[],address[])\":{\"notice\":\"Same as the redeem function above with the additional feature to specify a list of `forfeitTokens` for which the Monetizer system will not try to do a transfer to `receiver`.\"},\"updateNormalizer(uint256,bool)\":{\"notice\":\"Updates the normalizer variable by `amount`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project/contracts/monetizer/facets/Redeemer.sol\":\"Redeemer\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\"npm/@openzeppelin/contracts-upgradeable@5.4.0/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/\",\"project/:@helpers/=project/libs/helpers/\",\"project/:@openzeppelin/contracts-upgradeable/=npm/@openzeppelin/contracts-upgradeable@5.4.0/\",\"project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/\",\"project/:contracts/=project/contracts/\"]},\"sources\":{\"npm/@openzeppelin/contracts@5.4.0/access/manager/AuthorityUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/manager/AuthorityUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\n\\nlibrary AuthorityUtils {\\n    /**\\n     * @dev Since `AccessManager` implements an extended IAuthority interface, invoking `canCall` with backwards compatibility\\n     * for the preexisting `IAuthority` interface requires special care to avoid reverting on insufficient return data.\\n     * This helper function takes care of invoking `canCall` in a backwards compatible way without reverting.\\n     */\\n    function canCallWithDelay(\\n        address authority,\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) internal view returns (bool immediate, uint32 delay) {\\n        bytes memory data = abi.encodeCall(IAuthority.canCall, (caller, target, selector));\\n\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x00)\\n            mstore(0x20, 0x00)\\n\\n            if staticcall(gas(), authority, add(data, 0x20), mload(data), 0x00, 0x40) {\\n                immediate := mload(0x00)\\n                delay := mload(0x20)\\n\\n                // If delay does not fit in a uint32, return 0 (no delay)\\n                // equivalent to: if gt(delay, 0xFFFFFFFF) { delay := 0 }\\n                delay := mul(delay, iszero(shr(32, delay)))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05fd06ae5bca9dc7470fb2dfae764315c81a84f591e86be6fec0c115474edc6c\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/access/manager/IAccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/manager/IAccessManager.sol)\\n\\npragma solidity >=0.8.4;\\n\\ninterface IAccessManager {\\n    /**\\n     * @dev A delayed operation was scheduled.\\n     */\\n    event OperationScheduled(\\n        bytes32 indexed operationId,\\n        uint32 indexed nonce,\\n        uint48 schedule,\\n        address caller,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev A scheduled operation was executed.\\n     */\\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev A scheduled operation was canceled.\\n     */\\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev Informational labelling for a roleId.\\n     */\\n    event RoleLabel(uint64 indexed roleId, string label);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `roleId`.\\n     *\\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\\n     * otherwise it indicates the execution delay for this account and roleId is updated.\\n     */\\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\\n\\n    /**\\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\\n     */\\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\\n\\n    /**\\n     * @dev Role acting as admin over a given `roleId` is updated.\\n     */\\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\\n\\n    /**\\n     * @dev Role acting as guardian over a given `roleId` is updated.\\n     */\\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\\n\\n    /**\\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\\n     */\\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\\n\\n    /**\\n     * @dev Target mode is updated (true = closed, false = open).\\n     */\\n    event TargetClosed(address indexed target, bool closed);\\n\\n    /**\\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\\n     */\\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\\n\\n    /**\\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\\n     */\\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\\n\\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\\n    error AccessManagerNotScheduled(bytes32 operationId);\\n    error AccessManagerNotReady(bytes32 operationId);\\n    error AccessManagerExpired(bytes32 operationId);\\n    error AccessManagerLockedRole(uint64 roleId);\\n    error AccessManagerBadConfirmation();\\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\\n    error AccessManagerUnauthorizedConsume(address target);\\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\\n\\n    /**\\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\\n     * & {execute} workflow.\\n     *\\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\\n     * for future execution.\\n     *\\n     * If `allowed` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\\n     * the operation can be executed if and only if delay is greater than 0.\\n     *\\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\\n     *\\n     * NOTE: This function does not report the permissions of the admin functions in the manager itself. These are defined by the\\n     * {AccessManager} documentation.\\n     */\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) external view returns (bool allowed, uint32 delay);\\n\\n    /**\\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\\n     *\\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\\n     * disabling any scheduling usage.\\n     */\\n    function expiration() external view returns (uint32);\\n\\n    /**\\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\\n     * accidental increase). Defaults to 5 days.\\n     */\\n    function minSetback() external view returns (uint32);\\n\\n    /**\\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\\n     *\\n     * NOTE: When the manager itself is closed, admin functions are still accessible to avoid locking the contract.\\n     */\\n    function isTargetClosed(address target) external view returns (bool);\\n\\n    /**\\n     * @dev Get the role required to call a function.\\n     */\\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\\n     */\\n    function getTargetAdminDelay(address target) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the id of the role that acts as an admin for the given role.\\n     *\\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\\n     * an operation that is restricted to this role.\\n     */\\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role that acts as a guardian for a given role.\\n     *\\n     * The guardian permission allows canceling operations that have been scheduled under the role.\\n     */\\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role current grant delay.\\n     *\\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\\n     */\\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\\n     * level.\\n     *\\n     * Returns:\\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\\n     * [1] Current execution delay for the account.\\n     * [2] Pending execution delay for the account.\\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\\n     */\\n    function getAccess(\\n        uint64 roleId,\\n        address account\\n    ) external view returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect);\\n\\n    /**\\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\\n     */\\n    function hasRole(uint64 roleId, address account) external view returns (bool isMember, uint32 executionDelay);\\n\\n    /**\\n     * @dev Give a label to a role, for improved role discoverability by UIs.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleLabel} event.\\n     */\\n    function labelRole(uint64 roleId, string calldata label) external;\\n\\n    /**\\n     * @dev Add `account` to `roleId`, or change its execution delay.\\n     *\\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\\n     *\\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - granted role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\\n\\n    /**\\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\\n     * no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - revoked role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function revokeRole(uint64 roleId, address account) external;\\n\\n    /**\\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\\n     * the role this call has no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\\n\\n    /**\\n     * @dev Change admin role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleAdminChanged} event\\n     */\\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\\n\\n    /**\\n     * @dev Change guardian role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGuardianChanged} event\\n     */\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\\n\\n    /**\\n     * @dev Update the delay for granting a `roleId`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\\n     */\\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\\n\\n    /**\\n     * @dev Set the delay for changing the configuration of a given target contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the closed flag for a contract.\\n     *\\n     * Closing the manager itself won't disable access to admin methods to avoid locking the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function setTargetClosed(address target, bool closed) external;\\n\\n    /**\\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\\n     */\\n    function getSchedule(bytes32 id) external view returns (uint48);\\n\\n    /**\\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\\n     * been scheduled.\\n     */\\n    function getNonce(bytes32 id) external view returns (uint32);\\n\\n    /**\\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\\n     * required for the caller. The special value zero will automatically set the earliest possible time.\\n     *\\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\\n     *\\n     * Emits a {OperationScheduled} event.\\n     *\\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\\n     * contract if it is using standard Solidity ABI encoding.\\n     */\\n    function schedule(\\n        address target,\\n        bytes calldata data,\\n        uint48 when\\n    ) external returns (bytes32 operationId, uint32 nonce);\\n\\n    /**\\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\\n     * execution delay is 0.\\n     *\\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\\n     *\\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\\n     */\\n    function execute(address target, bytes calldata data) external payable returns (uint32);\\n\\n    /**\\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\\n     * operation that is cancelled.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\\n     *\\n     * Emits a {OperationCanceled} event.\\n     */\\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\\n\\n    /**\\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\\n     *\\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\\n     * with all the verifications that it implies.\\n     *\\n     * Emit a {OperationExecuted} event.\\n     */\\n    function consumeScheduledOp(address caller, bytes calldata data) external;\\n\\n    /**\\n     * @dev Hashing function for delayed operations.\\n     */\\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\\n\\n    /**\\n     * @dev Changes the authority of a target managed by this manager instance.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     */\\n    function updateAuthority(address target, address newAuthority) external;\\n}\\n\",\"keccak256\":\"0x640fe2b6e5201c47322d458f81078d6dcf23ccf9954f8995b1b7bfbec0eb1421\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/access/manager/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/manager/IAuthority.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Standard interface for permissioning originally defined in Dappsys.\\n */\\ninterface IAuthority {\\n    /**\\n     * @dev Returns true if the caller can invoke on a target the function identified by a function selector.\\n     */\\n    function canCall(address caller, address target, bytes4 selector) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x9c9a58dd831b9bb4a0ea47d96b53c13ab9a6e4270a518ea395b1424092fd74dc\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC1363.sol)\\n\\npragma solidity >=0.6.2;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0xd5ea07362ab630a6a3dee4285a74cf2377044ca2e4be472755ad64d7c5d4b69d\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x0afcb7e740d1537b252cb2676f600465ce6938398569f09ba1b9ca240dde2dfc\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x1a6221315ce0307746c2c4827c125d821ee796c74a676787762f4778671d4f44\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\\n     */\\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8891738ffe910f0cf2da09566928589bf5d63f4524dd734fd9cedbac3274dd5c\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit addition of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that sum = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function add512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        assembly (\\\"memory-safe\\\") {\\n            low := add(a, b)\\n            high := lt(low, a)\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the 512-bit multiplication of two uint256.\\n     *\\n     * The result is stored in two 256 variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n     */\\n    function mul512(uint256 a, uint256 b) internal pure returns (uint256 high, uint256 low) {\\n        // 512-bit multiply [high low] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n        // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = high * 2\\u00b2\\u2075\\u2076 + low.\\n        assembly (\\\"memory-safe\\\") {\\n            let mm := mulmod(a, b, not(0))\\n            low := mul(a, b)\\n            high := sub(sub(mm, low), lt(mm, low))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            success = c >= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a - b;\\n            success = c <= a;\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with a success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a * b;\\n            assembly (\\\"memory-safe\\\") {\\n                // Only true when the multiplication doesn't overflow\\n                // (c / a == b) || (a == 0)\\n                success := or(eq(div(c, a), b), iszero(a))\\n            }\\n            // equivalent to: success ? c : 0\\n            result = c * SafeCast.toUint(success);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `DIV` opcode returns zero when the denominator is 0.\\n                result := div(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            success = b > 0;\\n            assembly (\\\"memory-safe\\\") {\\n                // The `MOD` opcode returns zero when the denominator is 0.\\n                result := mod(a, b)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating addition, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingAdd(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryAdd(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating subtraction, bounds to zero instead of overflowing.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (, uint256 result) = trySub(a, b);\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Unsigned saturating multiplication, bounds to `2\\u00b2\\u2075\\u2076 - 1` instead of overflowing.\\n     */\\n    function saturatingMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        (bool success, uint256 result) = tryMul(a, b);\\n        return ternary(success, result, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (high == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return low / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= high) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [high low].\\n            uint256 remainder;\\n            assembly (\\\"memory-safe\\\") {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                high := sub(high, gt(remainder, low))\\n                low := sub(low, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly (\\\"memory-safe\\\") {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [high low] by twos.\\n                low := div(low, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from high into low.\\n            low |= high * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and high\\n            // is no longer required.\\n            result = low * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y >> n) with full precision. Throws if result overflows a uint256.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n) internal pure returns (uint256 result) {\\n        unchecked {\\n            (uint256 high, uint256 low) = mul512(x, y);\\n            if (high >= 1 << n) {\\n                Panic.panic(Panic.UNDER_OVERFLOW);\\n            }\\n            return (high << (256 - n)) | (low >> n);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y >> n with full precision, following the selected rounding direction.\\n     */\\n    function mulShr(uint256 x, uint256 y, uint8 n, Rounding rounding) internal pure returns (uint256) {\\n        return mulShr(x, y, n) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, 1 << n) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // If upper 8 bits of 16-bit half set, add 8 to result\\n        r |= SafeCast.toUint((x >> r) > 0xff) << 3;\\n        // If upper 4 bits of 8-bit half set, add 4 to result\\n        r |= SafeCast.toUint((x >> r) > 0xf) << 2;\\n\\n        // Shifts value right by the current result and use it as an index into this lookup table:\\n        //\\n        // | x (4 bits) |  index  | table[index] = MSB position |\\n        // |------------|---------|-----------------------------|\\n        // |    0000    |    0    |        table[0] = 0         |\\n        // |    0001    |    1    |        table[1] = 0         |\\n        // |    0010    |    2    |        table[2] = 1         |\\n        // |    0011    |    3    |        table[3] = 1         |\\n        // |    0100    |    4    |        table[4] = 2         |\\n        // |    0101    |    5    |        table[5] = 2         |\\n        // |    0110    |    6    |        table[6] = 2         |\\n        // |    0111    |    7    |        table[7] = 2         |\\n        // |    1000    |    8    |        table[8] = 3         |\\n        // |    1001    |    9    |        table[9] = 3         |\\n        // |    1010    |   10    |        table[10] = 3        |\\n        // |    1011    |   11    |        table[11] = 3        |\\n        // |    1100    |   12    |        table[12] = 3        |\\n        // |    1101    |   13    |        table[13] = 3        |\\n        // |    1110    |   14    |        table[14] = 3        |\\n        // |    1111    |   15    |        table[15] = 3        |\\n        //\\n        // The lookup table is represented as a 32-byte value with the MSB positions for 0-15 in the last 16 bytes.\\n        assembly (\\\"memory-safe\\\") {\\n            r := or(r, byte(shr(r, x), 0x0000010102020202030303030303030300000000000000000000000000000000))\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 x) internal pure returns (uint256 r) {\\n        // If value has upper 128 bits set, log2 result is at least 128\\n        r = SafeCast.toUint(x > 0xffffffffffffffffffffffffffffffff) << 7;\\n        // If upper 64 bits of 128-bit half set, add 64 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffffffffffff) << 6;\\n        // If upper 32 bits of 64-bit half set, add 32 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffffffff) << 5;\\n        // If upper 16 bits of 32-bit half set, add 16 to result\\n        r |= SafeCast.toUint((x >> r) > 0xffff) << 4;\\n        // Add 1 if upper 8 bits of 16-bit half set, and divide accumulated result by 8\\n        return (r >> 3) | SafeCast.toUint((x >> r) > 0xff);\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x1225214420c83ebcca88f2ae2b50f053aaa7df7bd684c3e878d334627f2edfc6\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"project/contracts/interfaces/IManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.28;\\n\\n/// @title IManager\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This interface is an authorized fork of Angle's `IManager` interface\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/interfaces/IManager.sol\\ninterface IManager {\\n  /// @notice Returns the amount of collateral managed by the Manager\\n  /// @return balances Balances of all the subCollaterals handled by the manager\\n  /// @dev MUST NOT revert\\n  function totalAssets() external view returns (uint256[] memory balances, uint256 totalValue);\\n\\n  /// @notice Hook to invest `amount` of `collateral`\\n  /// @dev MUST revert if the manager cannot accept these funds\\n  /// @dev MUST have received the funds beforehand\\n  function invest(uint256 amount) external;\\n\\n  /// @notice Sends `amount` of `collateral` to the `to` address\\n  /// @dev Called when `tokenP` are burnt and during redemptions\\n  //  @dev MUST revert if there are not funds enough available\\n  /// @dev MUST be callable only by the monetizer\\n  function release(address asset, address to, uint256 amount) external;\\n\\n  /// @notice Gives the maximum amount of collateral immediately available for a transfer\\n  /// @dev Useful for integrators using `quoteIn` and `quoteOut`\\n  function maxAvailable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x32920e2bfb61211297125a9532e67e7cb09c50ed69bca82b07c6639126e7fba6\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/IMonetizerOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.28;\\n\\n/// @title IMonetizerOracle\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This interface is an authorized fork of Angle's `ITransmuterOracle` interface\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/interfaces/ITransmuterOracle.sol\\ninterface IMonetizerOracle {\\n  /// @notice Reads the oracle value for asset to use in a redemption to compute the collateral ratio\\n  function readRedemption() external view returns (uint256);\\n\\n  /// @notice Reads the oracle value for asset to use in a mint. It should be comprehensive of the\\n  /// deviation from the target price\\n  function readMint() external view returns (uint256);\\n\\n  /// @notice Reads the oracle value for asset to use in a burn transaction as well as the ratio\\n  /// between the current price and the target price for the asset\\n  function readBurn() external view returns (uint256 oracleValue, uint256 ratio);\\n\\n  /// @notice Reads the oracle value for asset\\n  function read() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbff2b1ec3e77553db6343868a223416828db8c3eafa317b4b915da4a3d8ff56a\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/IRedeemer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.28;\\n\\n/// @title IRedeemer\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This interface is an authorized fork of Angle's `IRedeemer` interface\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/interfaces/IRedeemer.sol\\ninterface IRedeemer {\\n  /// @notice Redeems `amount` of stablecoins from the system\\n  /// @param receiver Address which should be receiving the output tokens\\n  /// @param deadline Timestamp before which the redemption should have occured\\n  /// @param minAmountOuts Minimum amount of each token given back in the redemption to obtain\\n  /// @return tokens List of tokens returned\\n  /// @return amounts Amount given for each token in the `tokens` array\\n  function redeem(\\n    uint256 amount,\\n    address receiver,\\n    uint256 deadline,\\n    uint256[] memory minAmountOuts\\n  )\\n    external\\n    returns (address[] memory tokens, uint256[] memory amounts);\\n\\n  /// @notice Same as the redeem function above with the additional feature to specify a list of `forfeitTokens` for\\n  /// which the Monetizer system will not try to do a transfer to `receiver`.\\n  function redeemWithForfeit(\\n    uint256 amount,\\n    address receiver,\\n    uint256 deadline,\\n    uint256[] memory minAmountOuts,\\n    address[] memory forfeitTokens\\n  )\\n    external\\n    returns (address[] memory tokens, uint256[] memory amounts);\\n\\n  /// @notice Simulate the exact output that a redemption of `amount` of stablecoins would give at a given block\\n  /// @return tokens List of tokens that would be given\\n  /// @return amounts Amount that would be obtained for each token in the `tokens` array\\n  function quoteRedemptionCurve(uint256 amount)\\n    external\\n    view\\n    returns (address[] memory tokens, uint256[] memory amounts);\\n\\n  /// @notice Updates the normalizer variable by `amount`\\n  function updateNormalizer(uint256 amount, bool increase) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x92006e57667df665649415327df0e4fd9c8dcd80cea07096db3b67c09739996f\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/ITokenP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.28;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title ITokenP\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @notice Interface for the stablecoins `tokenP` contracts\\n/// @dev This interface is an authorized fork of Angle's `IAgToken` interface\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/interfaces/IAgToken.sol\\ninterface ITokenP is IERC20 {\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    MINTER ROLE ONLY FUNCTIONS                                            \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Lets a whitelisted contract mint tokenPs\\n  /// @param account Address to mint to\\n  /// @param amount Amount to mint\\n  function mint(address account, uint256 amount) external;\\n\\n  /// @notice Burns `amount` tokens from a `burner` address after being asked to by `sender`\\n  /// @param amount Amount of tokens to burn\\n  /// @param burner Address to burn from\\n  /// @param sender Address which requested the burn from `burner`\\n  /// @dev This method is to be called by a contract with the minter right after being requested\\n  /// to do so by a `sender` address willing to burn tokens from another `burner` address\\n  /// @dev The method checks the allowance between the `sender` and the `burner`\\n  function burnFrom(uint256 amount, address burner, address sender) external;\\n\\n  /// @notice Burns `amount` tokens from a `burner` address\\n  /// @param amount Amount of tokens to burn\\n  /// @param burner Address to burn from\\n  /// @dev This method is to be called by a contract with a minter right on the tokenP after being\\n  /// requested to do so by an address willing to burn tokens from its address\\n  function burnSelf(uint256 amount, address burner) external;\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    EXTERNAL FUNCTIONS                                                \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Amount of decimals of the stablecoin\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x89d9b377afd760292bc2b92cfa9ab66d44018a4c143eff3ad91ab53091d4fa22\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/chainlink/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x94da577160ebb1bfeb7008676c8e7d43dda926d9c0beee29077e9ed774707373\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/coinbase/ICbETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title ICbETH\\n/// @notice Interface for the `cbETH` contract\\ninterface ICbETH {\\n  function exchangeRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb159341cb0e25c478912b274cdda2d50fa84692aeac87b6823d281aaea2aed04\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/frax/ISfrxETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title ISfrxETH\\n/// @notice Interface for the `sfrxETH` contract\\ninterface ISfrxETH {\\n  function pricePerShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x914cbea276f817c7db62bfca21e15bd8f7892faa9f39d86baaef574cf12b859f\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/keyring/IKeyringGuard.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title IKeyringGuard\\n/// @notice Interface for the `KeyringGuard` contract\\ninterface IKeyringGuard {\\n  function isAuthorized(address from, address to) external returns (bool passed);\\n}\\n\",\"keccak256\":\"0x30bdab602ba0a6e2571372803ae35f7bebcc354d69408be627c04c57f7071f90\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/lido/IStETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title IStETH\\n/// @notice Interface for the `StETH` contract\\ninterface IStETH {\\n  function getPooledEthByShares(uint256 _sharesAmount) external view returns (uint256);\\n\\n  function submit(address) external payable returns (uint256);\\n\\n  function getSharesByPooledEth(uint256 _ethAmount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf21e3d8bdadc236b34bf2122b0e0b939d2d6bb6e2889b508636cbb7b84f59680\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/morpho/IMorphoOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title IMorphoOracle\\n/// @notice Interface for the oracle contracts used within Morpho\\ninterface IMorphoOracle {\\n  function price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0d1849803b554763f1dce55eba5a6e8d7c5b12d4cc8dfe23637e827d2ee91d17\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/rocketPool/IRETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title IRETH\\n/// @notice Interface for the `rETH` contract\\ninterface IRETH {\\n  function getExchangeRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x567a378e95d40160e297c1adb617ccaa69c03e49c4ad72a6ce651dd43cdbd5cd\",\"license\":\"GPL-3.0\"},\"project/contracts/monetizer/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IAccessManager } from \\\"@openzeppelin/contracts/access/manager/IAccessManager.sol\\\";\\nimport { ITokenP } from \\\"contracts/interfaces/ITokenP.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                        ENUMS                                                      \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\nenum FacetCutAction {\\n  Add,\\n  Replace,\\n  Remove\\n}\\n\\nenum ManagerType {\\n  EXTERNAL\\n}\\n\\nenum ActionType {\\n  Mint,\\n  Burn,\\n  Redeem\\n}\\n\\nenum TrustedType {\\n  Updater,\\n  Seller\\n}\\n\\nenum QuoteType {\\n  MintExactInput,\\n  MintExactOutput,\\n  BurnExactInput,\\n  BurnExactOutput\\n}\\n\\nenum OracleReadType {\\n  CHAINLINK_FEEDS,\\n  EXTERNAL,\\n  NO_ORACLE,\\n  STABLE,\\n  WSTETH,\\n  CBETH,\\n  RETH,\\n  SFRXETH,\\n  MAX,\\n  MORPHO_ORACLE\\n}\\n\\nenum OracleQuoteType {\\n  UNIT,\\n  TARGET\\n}\\n\\nenum WhitelistType {\\n  BACKED\\n}\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                    STRUCTS                                                     \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\nstruct Permit2Details {\\n  address to; // Address that will receive the funds\\n  uint256 nonce; // Nonce of the transaction\\n  bytes signature; // Permit signature of the user\\n}\\n\\nstruct FacetCut {\\n  address facetAddress; // Facet contract address\\n  FacetCutAction action; // Can be add, remove or replace\\n  bytes4[] functionSelectors; // Ex. bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n}\\n\\nstruct Facet {\\n  address facetAddress; // Facet contract address\\n  bytes4[] functionSelectors; // Ex. bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n}\\n\\nstruct FacetInfo {\\n  address facetAddress; // Facet contract address\\n  uint16 selectorPosition; // Position in the list of all selectors\\n}\\n\\nstruct DiamondStorage {\\n  bytes4[] selectors; // List of all available selectors\\n  mapping(bytes4 => FacetInfo) selectorInfo; // Selector to (address, position in list)\\n  IAccessManager accessManager; // Contract handling access management\\n}\\n\\nstruct ImplementationStorage {\\n  address implementation; // Dummy implementation address for Etherscan usability\\n}\\n\\nstruct ManagerStorage {\\n  IERC20[] subCollaterals; // Subtokens handled by the manager or strategies\\n  bytes config; // Additional configuration data\\n}\\n\\nstruct Collateral {\\n  uint8 isManaged; // If the collateral is managed through external strategies\\n  uint8 isMintLive; // If minting from this asset is unpaused\\n  uint8 isBurnLive; // If burning to this asset is unpaused\\n  uint8 decimals; // IERC20Metadata(collateral).decimals()\\n  uint8 onlyWhitelisted; // If only whitelisted addresses can burn or redeem for this token\\n  uint216 normalizedStables; // Normalized amount of stablecoins issued from this collateral\\n  uint64[] xFeeMint; // Increasing exposures in [0,BASE_9[\\n  int64[] yFeeMint; // Mint fees at the exposures specified in `xFeeMint`\\n  uint64[] xFeeBurn; // Decreasing exposures in ]0,BASE_9]\\n  int64[] yFeeBurn; // Burn fees at the exposures specified in `xFeeBurn`\\n  bytes oracleConfig; // Data about the oracle used for the collateral\\n  bytes whitelistData; // For whitelisted collateral, data used to verify whitelists\\n  ManagerStorage managerData; // For managed collateral, data used to handle the strategies\\n  uint256 stablecoinCap; // Cap on the amount of stablecoins that can be issued from this collateral\\n}\\n\\nstruct MonetizerStorage {\\n  ITokenP tokenP; // tokenP handled by the system\\n  uint8 isRedemptionLive; // If redemption is unpaused\\n  uint8 statusReentrant; // If call is reentrant or not\\n  bool consumingSchedule; // If the contract is consuming a scheduled operation\\n  uint128 normalizedStables; // Normalized amount of stablecoins issued by the system\\n  uint128 normalizer; // To reconcile `normalizedStables` values with the actual amount\\n  address[] collateralList; // List of collateral assets supported by the system\\n  uint64[] xRedemptionCurve; // Increasing collateral ratios > 0\\n  int64[] yRedemptionCurve; // Value of the redemption fees at `xRedemptionCurve`\\n  mapping(address => Collateral) collaterals; // Maps a collateral asset to its parameters\\n  mapping(address => uint256) isTrusted; // If an address is trusted to update the normalizer value\\n  mapping(address => uint256) isSellerTrusted; // If an address is trusted to sell accruing reward tokens or to run\\n    // keeper jobs on oracles\\n  mapping(WhitelistType => mapping(address => uint256)) isWhitelistedForType;\\n}\\n// Whether an address is whitelisted for a specific whitelist type\\n\",\"keccak256\":\"0xd9e3a4c1cff68115a684d79357d068f8a52b6d6416ae3ecc76795545fff22ea7\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/facets/AccessManagedModifiers.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { LibDiamond } from \\\"../libraries/LibDiamond.sol\\\";\\nimport { LibStorage as s, MonetizerStorage } from \\\"../libraries/LibStorage.sol\\\";\\nimport \\\"../../utils/Errors.sol\\\";\\nimport \\\"../../utils/Constants.sol\\\";\\n\\n/// @title AccessManagedModifiers\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This contract is an authorized fork of Angle's `AccessControlModifiers` contract\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/facets/AccessControlModifiers.sol\\n/// update access logic to use OpenZeppelin's `AccessManaged` logic\\ncontract AccessManagedModifiers {\\n  /// @notice Checks whether the `msg.sender` can call a function with a given selector\\n  modifier restricted() {\\n    if (!LibDiamond.checkCanCall(msg.sender, msg.data)) revert AccessManagedUnauthorized(msg.sender);\\n    _;\\n  }\\n\\n  /// @notice Prevents a contract from calling itself, directly or indirectly\\n  /// @dev This implementation is an adaptation of the OpenZepellin `ReentrancyGuard` for the purpose of this\\n  /// Diamond Proxy system. The base implementation can be found here\\n  /// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol\\n  modifier nonReentrant() {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    // Reentrant protection\\n    // On the first call, `ts.statusReentrant` will be `NOT_ENTERED`\\n    if (ts.statusReentrant == ENTERED) revert ReentrantCall();\\n    // Any calls to the `nonReentrant` modifier after this point will fail\\n    ts.statusReentrant = ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    ts.statusReentrant = NOT_ENTERED;\\n  }\\n}\\n\",\"keccak256\":\"0x14995f4b638c37aa8e93cf2fc64227b2bfa37276d49e66ffe6e64f35a0a8d93b\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/facets/Redeemer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport { ITokenP } from \\\"contracts/interfaces/ITokenP.sol\\\";\\nimport { IRedeemer } from \\\"contracts/interfaces/IRedeemer.sol\\\";\\n\\nimport { AccessManagedModifiers } from \\\"./AccessManagedModifiers.sol\\\";\\nimport { LibDiamond } from \\\"../libraries/LibDiamond.sol\\\";\\nimport { LibHelpers } from \\\"../libraries/LibHelpers.sol\\\";\\nimport { LibGetters } from \\\"../libraries/LibGetters.sol\\\";\\nimport { LibManager } from \\\"../libraries/LibManager.sol\\\";\\nimport { LibStorage as s } from \\\"../libraries/LibStorage.sol\\\";\\nimport { LibWhitelist } from \\\"../libraries/LibWhitelist.sol\\\";\\n\\nimport \\\"../../utils/Constants.sol\\\";\\nimport \\\"../../utils/Errors.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\n/// @title Redeemer\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This contract is an authorized fork of Angle's `Redeemer` contract\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/facets/Redeemer.sol\\ncontract Redeemer is IRedeemer, AccessManagedModifiers {\\n  using SafeERC20 for IERC20;\\n  using Math for uint256;\\n  using SafeCast for uint256;\\n\\n  event Redeemed(\\n    uint256 amount,\\n    address[] tokens,\\n    uint256[] amounts,\\n    address[] forfeitTokens,\\n    address indexed from,\\n    address indexed to\\n  );\\n  event NormalizerUpdated(uint256 newNormalizerValue);\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    EXTERNAL ACTIONS                                                 \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @inheritdoc IRedeemer\\n  /// @dev The `minAmountOuts` list must reflect the amount of `tokens` returned\\n  /// @dev In normal conditions, the amount of tokens outputted by this function should be the amount\\n  /// of collateral assets supported by the system, following their order in the `collateralList`.\\n  /// @dev If one collateral has its liquidity managed through strategies, then it's possible that this asset\\n  /// has sub-collaterals with it. In this situation, these sub-collaterals may be sent during the redemption\\n  /// process and the `minAmountOuts` will be bigger than the `collateralList` length. If there are 3 collateral\\n  /// assets and the 2nd collateral asset in the list (at index 1) consists of 3 sub-collaterals, then the ordering\\n  /// of the token list will be as follows:\\n  /// `[collat 1, sub-collat 1 of collat 2, sub-collat 2 of collat 2, sub-collat 3 of collat 2, collat 3]`\\n  /// @dev The list of tokens outputted (and hence the minimum length of the `minAmountOuts` list) can be obtained\\n  /// by calling the `quoteRedemptionCurve` function\\n  /// @dev Tokens requiring a whitelist must be forfeited if the redemption is to an address that is not in the\\n  /// whitelist, otherwise this function reverts\\n  /// @dev No approval is needed before calling this function\\n  function redeem(\\n    uint256 amount,\\n    address receiver,\\n    uint256 deadline,\\n    uint256[] memory minAmountOuts\\n  )\\n    external\\n    returns (address[] memory tokens, uint256[] memory amounts)\\n  {\\n    return _redeem(amount, receiver, deadline, minAmountOuts, new address[](0));\\n  }\\n\\n  /// @inheritdoc IRedeemer\\n  /// @dev Beware that if a token is given in the `forfeitTokens` list, the redemption will not try to send token\\n  /// even if it has enough immediately available to send the amount\\n  function redeemWithForfeit(\\n    uint256 amount,\\n    address receiver,\\n    uint256 deadline,\\n    uint256[] memory minAmountOuts,\\n    address[] memory forfeitTokens\\n  )\\n    external\\n    returns (address[] memory tokens, uint256[] memory amounts)\\n  {\\n    return _redeem(amount, receiver, deadline, minAmountOuts, forfeitTokens);\\n  }\\n\\n  /// @inheritdoc IRedeemer\\n  /// @dev This function may be called by trusted addresses: these could be for instance savings contract\\n  /// minting stablecoins when they notice a profit\\n  function updateNormalizer(uint256 amount, bool increase) external returns (uint256) {\\n    if (!LibDiamond.checkCanCall(msg.sender, msg.data) && s.transmuterStorage().isTrusted[msg.sender] == 0) {\\n      revert NotTrusted();\\n    }\\n    return _updateNormalizer(amount, increase);\\n  }\\n\\n  /// @inheritdoc IRedeemer\\n  function quoteRedemptionCurve(uint256 amount)\\n    external\\n    view\\n    returns (address[] memory tokens, uint256[] memory amounts)\\n  {\\n    (tokens, amounts,) = _quoteRedemptionCurve(amount);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    INTERNAL HELPERS                                                 \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Internal function of the `redeem` function in the `Redeemer` contract\\n  function _redeem(\\n    uint256 amount,\\n    address to,\\n    uint256 deadline,\\n    uint256[] memory minAmountOuts,\\n    address[] memory forfeitTokens\\n  )\\n    internal\\n    nonReentrant\\n    returns (address[] memory tokens, uint256[] memory amounts)\\n  {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n\\n    if (ts.isRedemptionLive == 0) revert Paused();\\n    if (block.timestamp > deadline) revert TooLate();\\n\\n    uint256[] memory subCollateralsTracker;\\n    (tokens, amounts, subCollateralsTracker) = _quoteRedemptionCurve(amount);\\n    // Check that the provided slippage tokens length is identical to the redeem one\\n    uint256 amountsLength = amounts.length;\\n    // If a collateral is added and another one is removed after a redeem transaction is sent, the tokens\\n    // corresponding to the `minAmountOuts` given may not correspond to the actual collateral `tokens` of\\n    // the protocol\\n    if (amountsLength != minAmountOuts.length) revert InvalidLengths();\\n    // Updating the normalizer enables to simultaneously and proportionally reduce the amount\\n    // of stablecoins issued from each collateral without having to loop through each of them\\n    _updateNormalizer(amount, false);\\n\\n    ITokenP(ts.tokenP).burnSelf(amount, msg.sender);\\n\\n    address[] memory collateralListMem = ts.collateralList;\\n    uint256 indexCollateral;\\n    for (uint256 i; i < amountsLength; ++i) {\\n      if (amounts[i] < minAmountOuts[i]) revert TooSmallAmountOut();\\n      // If a token is in the `forfeitTokens` list, then it is not sent as part of the redemption process\\n      if (amounts[i] > 0 && LibHelpers.checkList(tokens[i], forfeitTokens) < 0) {\\n        Collateral storage collatInfo = ts.collaterals[collateralListMem[indexCollateral]];\\n        if (collatInfo.onlyWhitelisted > 0 && !LibWhitelist.checkWhitelist(collatInfo.whitelistData, to)) {\\n          revert NotWhitelisted();\\n        }\\n        if (collatInfo.isManaged > 0) {\\n          LibManager.release(tokens[i], to, amounts[i], collatInfo.managerData.config);\\n        } else {\\n          IERC20(tokens[i]).safeTransfer(to, amounts[i]);\\n        }\\n      }\\n      if (subCollateralsTracker[indexCollateral] - 1 <= i) ++indexCollateral;\\n    }\\n    emit Redeemed(amount, tokens, amounts, forfeitTokens, msg.sender, to);\\n  }\\n\\n  /// @dev This function reverts if `stablecoinsIssued==0`, which is expected behavior as there is nothing to redeem\\n  /// anyway in this case, or if the `amountBurnt` is greater than `stablecoinsIssued`\\n  function _quoteRedemptionCurve(uint256 amountBurnt)\\n    internal\\n    view\\n    returns (address[] memory tokens, uint256[] memory balances, uint256[] memory subCollateralsTracker)\\n  {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    uint64 collatRatio;\\n    uint256 stablecoinsIssued;\\n    (collatRatio, stablecoinsIssued, tokens, balances, subCollateralsTracker) = LibGetters.getCollateralRatio();\\n    if (amountBurnt > stablecoinsIssued) revert TooBigAmountIn();\\n    int64[] memory yRedemptionCurveMem = ts.yRedemptionCurve;\\n    uint64 penaltyFactor;\\n    // If the protocol is under-collateralized, a penalty factor is applied to the returned amount of each asset\\n    if (collatRatio < BASE_9) {\\n      uint64[] memory xRedemptionCurveMem = ts.xRedemptionCurve;\\n      penaltyFactor = uint64(LibHelpers.piecewiseLinear(collatRatio, xRedemptionCurveMem, yRedemptionCurveMem));\\n    }\\n\\n    for (uint256 i; i < balances.length; ++i) {\\n      // The amount given for each token in reserves does not depend on the price of the tokens in reserve:\\n      // it is a proportion of the balance for each token computed as the ratio between the stablecoins\\n      // burnt relative to the amount of stablecoins issued.\\n      // If the protocol is over-collateralized, the amount of each token given is inversely proportional\\n      // to the collateral ratio.\\n      balances[i] = collatRatio >= BASE_9\\n        ? (amountBurnt * balances[i] * (uint64(yRedemptionCurveMem[yRedemptionCurveMem.length - 1])))\\n          / (stablecoinsIssued * collatRatio)\\n        : (amountBurnt * balances[i] * penaltyFactor) / (stablecoinsIssued * BASE_9);\\n    }\\n  }\\n\\n  /// @notice Updates the `normalizer` variable used to track stablecoins issued from each asset and globally\\n  function _updateNormalizer(uint256 amount, bool increase) internal returns (uint256 newNormalizerValue) {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    uint256 _normalizer = ts.normalizer;\\n    uint256 _normalizedStables = ts.normalizedStables;\\n    // In case of an increase, the update formula used is the simplified version of the formula below:\\n    /*\\n            _normalizer * (BASE_27 + BASE_27 * amount / stablecoinsIssued) / BASE_27\\n        = _normalizer + (_normalizer * BASE_27 * amount * (BASE_27 / (_normalizedStables * normalizer))) / BASE_27\\n             = _normalizer + BASE_27 * amount / _normalizedStables\\n        */\\n    if (increase) {\\n      newNormalizerValue = _normalizer + (amount * BASE_27) / _normalizedStables;\\n    } else {\\n      newNormalizerValue = _normalizer - (amount * BASE_27) / _normalizedStables;\\n    }\\n    // If the `normalizer` gets too small or too big, it must be renormalized to later avoid the propagation of\\n    // rounding errors, as well as overflows. In this case, the function has to iterate through all the\\n    // supported collateral assets\\n    if (newNormalizerValue <= BASE_18 || newNormalizerValue >= BASE_36) {\\n      address[] memory collateralListMem = ts.collateralList;\\n      uint256 collateralListLength = collateralListMem.length;\\n      // For each asset, we store the actual amount of stablecoins issued based on the `newNormalizerValue`\\n      // (and not a normalized value)\\n      // We ensure to preserve the invariant `sum(collateralNewNormalizedStables) = normalizedStables`\\n      uint128 newNormalizedStables;\\n      for (uint256 i; i < collateralListLength; ++i) {\\n        uint128 newCollateralNormalizedStable = (\\n          (uint256(ts.collaterals[collateralListMem[i]].normalizedStables) * newNormalizerValue) / BASE_27\\n        ).toUint128();\\n        newNormalizedStables += newCollateralNormalizedStable;\\n        ts.collaterals[collateralListMem[i]].normalizedStables = uint216(newCollateralNormalizedStable);\\n      }\\n      ts.normalizedStables = newNormalizedStables;\\n      newNormalizerValue = BASE_27;\\n    }\\n    ts.normalizer = newNormalizerValue.toUint128();\\n    emit NormalizerUpdated(newNormalizerValue);\\n  }\\n}\\n\",\"keccak256\":\"0xad34e4f1e71a2f990331b0afd0c68800902bab20cf93c9773d9dba843313c9cb\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport { LibStorage as s } from \\\"./LibStorage.sol\\\";\\nimport { IAccessManager } from \\\"@openzeppelin/contracts/access/manager/IAccessManager.sol\\\";\\nimport { AuthorityUtils } from \\\"@openzeppelin/contracts/access/manager/AuthorityUtils.sol\\\";\\n\\nimport \\\"../../utils/Errors.sol\\\";\\nimport \\\"../../utils/Constants.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\n/// @title LibDiamond\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @notice Helper library to deal with diamond proxies.\\n/// @dev Reference: EIP-2535 Diamonds\\n/// @dev Forked from https://github.com/mudgen/diamond-3/blob/master/contracts/libraries/LibDiamond.sol by mudgen\\nlibrary LibDiamond {\\n  event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    INTERNAL FUNCTIONS                                                \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  function isGovernor(address caller) internal view returns (bool) {\\n    (bool isMember,) = s.diamondStorage().accessManager.hasRole(GOVERNOR_ROLE, caller);\\n    return isMember;\\n  }\\n\\n  /// @notice Checks whether `caller` can call `data` on `this`\\n  function checkCanCall(address caller, bytes calldata data) internal returns (bool) {\\n    IAccessManager accessManager = s.diamondStorage().accessManager;\\n    (bool immediate, uint32 delay) =\\n      AuthorityUtils.canCallWithDelay(address(accessManager), caller, address(this), bytes4(data[0:4]));\\n    if (!immediate) {\\n      if (delay > 0) {\\n        MonetizerStorage storage ts = s.transmuterStorage();\\n        ts.consumingSchedule = true;\\n        accessManager.consumeScheduledOp(caller, data);\\n        ts.consumingSchedule = false;\\n      } else {\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  /// @notice Internal function version of `diamondCut`\\n  function diamondCut(FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n    uint256 diamondCutLength = _diamondCut.length;\\n    for (uint256 facetIndex; facetIndex < diamondCutLength; facetIndex++) {\\n      bytes4[] memory functionSelectors = _diamondCut[facetIndex].functionSelectors;\\n      address facetAddress = _diamondCut[facetIndex].facetAddress;\\n\\n      if (functionSelectors.length == 0) {\\n        revert NoSelectorsProvidedForFacetForCut(facetAddress);\\n      }\\n\\n      FacetCutAction action = _diamondCut[facetIndex].action;\\n      if (action == FacetCutAction.Add) {\\n        _addFunctions(facetAddress, functionSelectors);\\n      } else if (action == FacetCutAction.Replace) {\\n        _replaceFunctions(facetAddress, functionSelectors);\\n      } else if (action == FacetCutAction.Remove) {\\n        _removeFunctions(facetAddress, functionSelectors);\\n      }\\n    }\\n\\n    emit DiamondCut(_diamondCut, _init, _calldata);\\n    _initializeDiamondCut(_init, _calldata);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    PRIVATE FUNCTIONS                                                \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Does a delegate call on `_init` with `_calldata`\\n  function _initializeDiamondCut(address _init, bytes memory _calldata) private {\\n    if (_init == address(0)) {\\n      return;\\n    }\\n    _enforceHasContractCode(_init);\\n    (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n    if (!success) {\\n      if (error.length > 0) {\\n        assembly (\\\"memory-safe\\\") {\\n          let returndata_size := mload(error)\\n          revert(add(32, error), returndata_size)\\n        }\\n      } else {\\n        revert InitializationFunctionReverted(_init, _calldata);\\n      }\\n    }\\n  }\\n\\n  /// @notice Adds a new function to the diamond proxy\\n  /// @dev Reverts if selectors are already existing\\n  function _addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) private {\\n    if (_facetAddress == address(0)) {\\n      revert CannotAddSelectorsToZeroAddress(_functionSelectors);\\n    }\\n    DiamondStorage storage ds = s.diamondStorage();\\n    uint16 selectorCount = uint16(ds.selectors.length);\\n    _enforceHasContractCode(_facetAddress);\\n    uint256 functionSelectorsLength = _functionSelectors.length;\\n    for (uint256 selectorIndex; selectorIndex < functionSelectorsLength; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorInfo[selector].facetAddress;\\n      if (oldFacetAddress != address(0)) {\\n        revert CannotAddFunctionToDiamondThatAlreadyExists(selector);\\n      }\\n      ds.selectorInfo[selector] = FacetInfo(_facetAddress, selectorCount);\\n      ds.selectors.push(selector);\\n      selectorCount++;\\n    }\\n  }\\n\\n  /// @notice Upgrades a function in the diamond proxy\\n  /// @dev Reverts if selectors do not already exist\\n  function _replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) private {\\n    DiamondStorage storage ds = s.diamondStorage();\\n    if (_facetAddress == address(0)) {\\n      revert CannotReplaceFunctionsFromFacetWithZeroAddress(_functionSelectors);\\n    }\\n    _enforceHasContractCode(_facetAddress);\\n    uint256 functionSelectorsLength = _functionSelectors.length;\\n    for (uint256 selectorIndex; selectorIndex < functionSelectorsLength; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorInfo[selector].facetAddress;\\n      // Can't replace immutable functions -- functions defined directly in the diamond in this case\\n      if (oldFacetAddress == address(this)) {\\n        revert CannotReplaceImmutableFunction(selector);\\n      }\\n      if (oldFacetAddress == _facetAddress) {\\n        revert CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet(selector);\\n      }\\n      if (oldFacetAddress == address(0)) {\\n        revert CannotReplaceFunctionThatDoesNotExists(selector);\\n      }\\n      // Replace old facet address\\n      ds.selectorInfo[selector].facetAddress = _facetAddress;\\n    }\\n  }\\n\\n  /// @notice Removes a function in the diamond proxy\\n  /// @dev Reverts if selectors do not already exist\\n  function _removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) private {\\n    DiamondStorage storage ds = s.diamondStorage();\\n    uint256 selectorCount = ds.selectors.length;\\n    if (_facetAddress != address(0)) {\\n      revert RemoveFacetAddressMustBeZeroAddress(_facetAddress);\\n    }\\n    uint256 functionSelectorsLength = _functionSelectors.length;\\n    for (uint256 selectorIndex; selectorIndex < functionSelectorsLength; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      FacetInfo memory oldFacetAddressAndSelectorPosition = ds.selectorInfo[selector];\\n      if (oldFacetAddressAndSelectorPosition.facetAddress == address(0)) {\\n        revert CannotRemoveFunctionThatDoesNotExist(selector);\\n      }\\n\\n      // Can't remove immutable functions -- functions defined directly in the diamond\\n      if (oldFacetAddressAndSelectorPosition.facetAddress == address(this)) {\\n        revert CannotRemoveImmutableFunction(selector);\\n      }\\n      // Replace selector with last selector\\n      selectorCount--;\\n      if (oldFacetAddressAndSelectorPosition.selectorPosition != selectorCount) {\\n        bytes4 lastSelector = ds.selectors[selectorCount];\\n        ds.selectors[oldFacetAddressAndSelectorPosition.selectorPosition] = lastSelector;\\n        ds.selectorInfo[lastSelector].selectorPosition = oldFacetAddressAndSelectorPosition.selectorPosition;\\n      }\\n      // Delete last selector\\n      ds.selectors.pop();\\n      delete ds.selectorInfo[selector];\\n    }\\n  }\\n\\n  /// @notice Checks that an address has a non void bytecode\\n  function _enforceHasContractCode(address _contract) private view {\\n    uint256 contractSize;\\n    assembly (\\\"memory-safe\\\") {\\n      contractSize := extcodesize(_contract)\\n    }\\n    if (contractSize == 0) {\\n      revert ContractHasNoCode();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7cac6c4cee194f464b080e04b8c323197419970d76576ae8e7b8d1b11ca33242\",\"license\":\"MIT\"},\"project/contracts/monetizer/libraries/LibGetters.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeCast } from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nimport { LibHelpers } from \\\"./LibHelpers.sol\\\";\\nimport { LibManager } from \\\"./LibManager.sol\\\";\\nimport { LibOracle } from \\\"./LibOracle.sol\\\";\\nimport { LibStorage as s } from \\\"./LibStorage.sol\\\";\\n\\nimport \\\"../../utils/Constants.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\n/// @title LibGetters\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This library is an authorized fork of Angle's `LibGetters` library\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/libraries/LibGetters.sol\\nlibrary LibGetters {\\n  using Math for uint256;\\n  using SafeCast for uint256;\\n\\n  /// @notice Internal version of the `getCollateralRatio` function with additional return values like `tokens` that\\n  /// is the list of tokens supported by the system, or `balances` which is the amount of each token in `tokens`\\n  /// controlled by the protocol\\n  /// @dev In case some collaterals support external strategies (`isManaged>0`), this list may be bigger\\n  /// than the `collateralList`\\n  /// @dev `subCollateralsTracker` is an array which gives for each collateral asset in the collateral list an\\n  /// accumulator helping to recompute the amount of sub-collateral for each collateral. If the array is:\\n  /// [1,4,5], this means that the collateral with index 1 in the `collateralsList` has 4-1=3 sub-collaterals.\\n  function getCollateralRatio()\\n    internal\\n    view\\n    returns (\\n      uint64 collatRatio,\\n      uint256 stablecoinsIssued,\\n      address[] memory tokens,\\n      uint256[] memory balances,\\n      uint256[] memory subCollateralsTracker\\n    )\\n  {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    uint256 totalCollateralization;\\n    address[] memory collateralList = ts.collateralList;\\n    uint256 collateralListLength = collateralList.length;\\n    uint256 subCollateralsAmount;\\n    // Building the `subCollateralsTracker` array which is useful when later sending the tokens as part of the\\n    // redemption\\n    subCollateralsTracker = new uint256[](collateralListLength);\\n    for (uint256 i; i < collateralListLength; ++i) {\\n      if (ts.collaterals[collateralList[i]].isManaged == 0) ++subCollateralsAmount;\\n      else subCollateralsAmount += ts.collaterals[collateralList[i]].managerData.subCollaterals.length;\\n      subCollateralsTracker[i] = subCollateralsAmount;\\n    }\\n    balances = new uint256[](subCollateralsAmount);\\n    tokens = new address[](subCollateralsAmount);\\n\\n    {\\n      uint256 countCollat;\\n      for (uint256 i; i < collateralListLength; ++i) {\\n        Collateral storage collateral = ts.collaterals[collateralList[i]];\\n        uint256 collateralBalance; // Will be either the balance or the value of assets managed\\n        if (collateral.isManaged > 0) {\\n          // If a collateral is managed, the balances of the sub-collaterals cannot be directly obtained by\\n          // calling `balanceOf` of the sub-collaterals\\n          uint256[] memory subCollateralsBalances;\\n          (subCollateralsBalances, collateralBalance) = LibManager.totalAssets(collateral.managerData.config);\\n          uint256 numSubCollats = subCollateralsBalances.length;\\n          for (uint256 k; k < numSubCollats; ++k) {\\n            tokens[countCollat + k] = address(collateral.managerData.subCollaterals[k]);\\n            balances[countCollat + k] = subCollateralsBalances[k];\\n          }\\n          countCollat += numSubCollats;\\n        } else {\\n          collateralBalance = IERC20(collateralList[i]).balanceOf(address(this));\\n          tokens[countCollat] = collateralList[i];\\n          balances[countCollat++] = collateralBalance;\\n        }\\n        uint256 oracleValue = LibOracle.readRedemption(collateral.oracleConfig);\\n        totalCollateralization +=\\n          (oracleValue * LibHelpers.convertDecimalTo(collateralBalance, collateral.decimals, 18)) / BASE_18;\\n      }\\n    }\\n    // The `stablecoinsIssued` value need to be rounded up because it is then used as a divizer when computing\\n    // the `collatRatio`\\n    stablecoinsIssued = uint256(ts.normalizedStables).mulDiv(ts.normalizer, BASE_27, Math.Rounding.Ceil);\\n    if (stablecoinsIssued > 0) {\\n      collatRatio = (totalCollateralization.mulDiv(BASE_9, stablecoinsIssued, Math.Rounding.Ceil)).toUint64();\\n    } else {\\n      collatRatio = type(uint64).max;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xc72e63704ce1e2a2c34e61a2afd904a1fc15afe44d2073594025924eb0a567df\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/libraries/LibHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.28;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"../Storage.sol\\\";\\n\\n/// @title LibHelpers\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This library is an authorized fork of Angle's `LibHelpers` library\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/libraries/LibHelpers.sol\\nlibrary LibHelpers {\\n  /// @notice Rebases the units of `amount` from `fromDecimals` to `toDecimals`\\n  function convertDecimalTo(uint256 amount, uint8 fromDecimals, uint8 toDecimals) internal pure returns (uint256) {\\n    if (fromDecimals > toDecimals) return amount / 10 ** (fromDecimals - toDecimals);\\n    else if (fromDecimals < toDecimals) return amount * 10 ** (toDecimals - fromDecimals);\\n    else return amount;\\n  }\\n\\n  /// @notice Checks whether a `token` is in a list `tokens` and returns the index of the token in the list\\n  /// or -1 in the other case\\n  function checkList(address token, address[] memory tokens) internal pure returns (int256) {\\n    uint256 tokensLength = tokens.length;\\n    for (uint256 i; i < tokensLength; ++i) {\\n      if (token == tokens[i]) return int256(i);\\n    }\\n    return -1;\\n  }\\n\\n  /// @notice Searches a sorted `array` and returns the first index that contains a value strictly greater\\n  /// (or lower if increasingArray is false) to `element` minus 1\\n  /// @dev If no such index exists (i.e. all values in the array are strictly lesser/greater than `element`),\\n  /// either array length minus 1, or 0 are returned\\n  /// @dev The time complexity of the search is O(log n).\\n  /// @dev Inspired from OpenZeppelin Contracts v4.4.1:\\n  /// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Arrays.sol\\n  /// @dev Modified by Angle Labs to support `uint64`, monotonous arrays and exclusive upper bounds\\n  function findLowerBound(\\n    bool increasingArray,\\n    uint64[] memory array,\\n    uint64 normalizerArray,\\n    uint64 element\\n  )\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    if (array.length == 0) {\\n      return 0;\\n    }\\n    uint256 low = 1;\\n    uint256 high = array.length;\\n\\n    if (\\n      (increasingArray && array[high - 1] * normalizerArray <= element)\\n        || (!increasingArray && array[high - 1] * normalizerArray >= element)\\n    ) return high - 1;\\n\\n    while (low < high) {\\n      uint256 mid = Math.average(low, high);\\n\\n      // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n      // because Math.average rounds down (it does integer division with truncation).\\n      if (increasingArray ? array[mid] * normalizerArray > element : array[mid] * normalizerArray < element) {\\n        high = mid;\\n      } else {\\n        low = mid + 1;\\n      }\\n    }\\n\\n    // At this point `low` is the exclusive upper bound.\\n    // `low - 1` is the inclusive lower bound.\\n    return low - 1;\\n  }\\n\\n  /// @notice Evaluates for `x` a piecewise linear function defined with the breaking points in the arrays\\n  /// `xArray` and `yArray`\\n  /// @dev The values in the `xArray` must be increasing\\n  function piecewiseLinear(uint64 x, uint64[] memory xArray, int64[] memory yArray) internal pure returns (int64) {\\n    uint256 indexLowerBound = findLowerBound(true, xArray, 1, x);\\n    if (indexLowerBound == 0 && x < xArray[0]) return yArray[0];\\n    else if (indexLowerBound == xArray.length - 1) return yArray[xArray.length - 1];\\n    return yArray[indexLowerBound]\\n      + ((yArray[indexLowerBound + 1] - yArray[indexLowerBound]) * int64(x - xArray[indexLowerBound]))\\n        / int64(xArray[indexLowerBound + 1] - xArray[indexLowerBound]);\\n  }\\n}\\n\",\"keccak256\":\"0x4aadede7bb8882aa0f4e29948691f604ef406169fc31d8dcc66b3588ffaa9555\",\"license\":\"GPL-3.0\"},\"project/contracts/monetizer/libraries/LibManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { IManager } from \\\"contracts/interfaces/IManager.sol\\\";\\n\\nimport \\\"../Storage.sol\\\";\\n\\n/// @title LibManager\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev Managed collateral assets may be handled through external smart contracts or directly through this library\\n/// @dev There is no implementation at this point for a managed collateral handled through this library, and\\n/// a new specific `ManagerType` would need to be added in this case\\n/// @dev This library is an authorized fork of Angle's `LibManager` library\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/libraries/LibManager.sol\\nlibrary LibManager {\\n  /// @notice Checks to which address managed funds must be transferred\\n  function transferRecipient(bytes memory config) internal view returns (address recipient) {\\n    (ManagerType managerType, bytes memory data) = parseManagerConfig(config);\\n    recipient = address(this);\\n    if (managerType == ManagerType.EXTERNAL) return abi.decode(data, (address));\\n  }\\n\\n  /// @notice Performs a transfer of `token` for a collateral that is managed to a `to` address\\n  /// @dev `token` may not be the actual collateral itself, as some collaterals have subcollaterals associated\\n  /// with it\\n  /// @dev Eventually pulls funds from strategies\\n  function release(address token, address to, uint256 amount, bytes memory config) internal {\\n    (ManagerType managerType, bytes memory data) = parseManagerConfig(config);\\n    if (managerType == ManagerType.EXTERNAL) abi.decode(data, (IManager)).release(token, to, amount);\\n  }\\n\\n  /// @notice Gets the balances of all the tokens controlled through `managerData`\\n  /// @return balances An array of size `subCollaterals` with current balances of all subCollaterals\\n  /// including the one corresponding to the `managerData` given\\n  /// @return totalValue The value of all the `subCollaterals` in `collateral`\\n  /// @dev `subCollaterals` must always have as first token (index 0) the collateral itself\\n  function totalAssets(bytes memory config) internal view returns (uint256[] memory balances, uint256 totalValue) {\\n    (ManagerType managerType, bytes memory data) = parseManagerConfig(config);\\n    if (managerType == ManagerType.EXTERNAL) return abi.decode(data, (IManager)).totalAssets();\\n  }\\n\\n  /// @notice Calls a hook if needed after new funds have been transfered to a manager\\n  function invest(uint256 amount, bytes memory config) internal {\\n    (ManagerType managerType, bytes memory data) = parseManagerConfig(config);\\n    if (managerType == ManagerType.EXTERNAL) abi.decode(data, (IManager)).invest(amount);\\n  }\\n\\n  /// @notice Returns available underlying tokens, for instance if liquidity is fully used and\\n  /// not withdrawable the function will return 0\\n  function maxAvailable(bytes memory config) internal view returns (uint256 available) {\\n    (ManagerType managerType, bytes memory data) = parseManagerConfig(config);\\n    if (managerType == ManagerType.EXTERNAL) return abi.decode(data, (IManager)).maxAvailable();\\n  }\\n\\n  /// @notice Decodes the `managerData` associated to a collateral\\n  function parseManagerConfig(bytes memory config) internal pure returns (ManagerType managerType, bytes memory data) {\\n    (managerType, data) = abi.decode(config, (ManagerType, bytes));\\n  }\\n}\\n\",\"keccak256\":\"0xe619f87b2dd001441852e45f473d0c0d443b7f6373a8c2fbccc0c5a23c676f50\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/libraries/LibOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { IMonetizerOracle } from \\\"contracts/interfaces/IMonetizerOracle.sol\\\";\\nimport { AggregatorV3Interface } from \\\"contracts/interfaces/external/chainlink/AggregatorV3Interface.sol\\\";\\nimport { IMorphoOracle } from \\\"contracts/interfaces/external/morpho/IMorphoOracle.sol\\\";\\n\\nimport { LibStorage as s } from \\\"./LibStorage.sol\\\";\\n\\nimport \\\"../../utils/Constants.sol\\\";\\nimport \\\"../../utils/Errors.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\n/// @title LibOracle\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This library is an authorized fork of Angle's `LibOracle` library\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/libraries/LibOracle.sol\\nlibrary LibOracle {\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    ACTIONS SPECIFIC ORACLES                                             \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Reads the oracle value used during a redemption to compute collateral ratio for `oracleConfig`\\n  /// @dev This value is only sensitive to compute the collateral ratio and deduce a penalty factor\\n  function readRedemption(bytes memory oracleConfig) internal view returns (uint256 oracleValue) {\\n    (OracleReadType oracleType, OracleReadType targetType, bytes memory oracleData, bytes memory targetData,) =\\n      _parseOracleConfig(oracleConfig);\\n    if (oracleType == OracleReadType.EXTERNAL) {\\n      IMonetizerOracle externalOracle = abi.decode(oracleData, (IMonetizerOracle));\\n      return externalOracle.readRedemption();\\n    } else {\\n      (oracleValue,) = readSpotAndTarget(oracleType, targetType, oracleData, targetData, 0);\\n      return oracleValue;\\n    }\\n  }\\n\\n  /// @notice Reads the oracle value used during mint operations for an asset with `oracleConfig`\\n  /// @dev For assets which do not rely on external oracles, this value is the minimum between the processed oracle\\n  /// value for the asset and its target price\\n  function readMint(bytes memory oracleConfig) internal view returns (uint256 oracleValue) {\\n    (\\n      OracleReadType oracleType,\\n      OracleReadType targetType,\\n      bytes memory oracleData,\\n      bytes memory targetData,\\n      bytes memory hyperparameters\\n    ) = _parseOracleConfig(oracleConfig);\\n    if (oracleType == OracleReadType.EXTERNAL) {\\n      IMonetizerOracle externalOracle = abi.decode(oracleData, (IMonetizerOracle));\\n      return externalOracle.readMint();\\n    }\\n\\n    (uint128 userDeviation,) = abi.decode(hyperparameters, (uint128, uint128));\\n    uint256 targetPrice;\\n    (oracleValue, targetPrice) = readSpotAndTarget(oracleType, targetType, oracleData, targetData, userDeviation);\\n    if (targetPrice < oracleValue) oracleValue = targetPrice;\\n  }\\n\\n  /// @notice Reads the oracle value used for a burn operation for an asset with `oracleConfig`\\n  /// @return oracleValue The actual oracle value obtained\\n  /// @return ratio If `oracle value < target price`, the ratio between the oracle value and the target\\n  /// price, otherwise `BASE_18`\\n  function readBurn(bytes memory oracleConfig) internal view returns (uint256 oracleValue, uint256 ratio) {\\n    (\\n      OracleReadType oracleType,\\n      OracleReadType targetType,\\n      bytes memory oracleData,\\n      bytes memory targetData,\\n      bytes memory hyperparameters\\n    ) = _parseOracleConfig(oracleConfig);\\n    if (oracleType == OracleReadType.EXTERNAL) {\\n      IMonetizerOracle externalOracle = abi.decode(oracleData, (IMonetizerOracle));\\n      return externalOracle.readBurn();\\n    }\\n    (uint128 userDeviation, uint128 burnRatioDeviation) = abi.decode(hyperparameters, (uint128, uint128));\\n    uint256 targetPrice;\\n    (oracleValue, targetPrice) = readSpotAndTarget(oracleType, targetType, oracleData, targetData, userDeviation);\\n    // Firewall in case the oracle value reported is low compared to the target\\n    // If the oracle value is slightly below its target, then no deviation is reported for the oracle and\\n    // the price of burning the stablecoin for other assets is not impacted. Also, the oracle value of this asset\\n    // is set to the target price, to not be open to direct arbitrage\\n    ratio = BASE_18;\\n    if (oracleValue * BASE_18 < targetPrice * (BASE_18 - burnRatioDeviation)) {\\n      ratio = (oracleValue * BASE_18) / targetPrice;\\n    } else if (oracleValue < targetPrice) {\\n      oracleValue = targetPrice;\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    VIEW FUNCTIONS                                                  \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Internal version of the `getOracle` function\\n  function getOracle(address collateral)\\n    internal\\n    view\\n    returns (OracleReadType, OracleReadType, bytes memory, bytes memory, bytes memory)\\n  {\\n    return _parseOracleConfig(s.transmuterStorage().collaterals[collateral].oracleConfig);\\n  }\\n\\n  /// @notice Gets the oracle value and the ratio with respect to the target price when it comes to\\n  /// burning for `collateral`\\n  function getBurnOracle(\\n    address collateral,\\n    bytes memory oracleConfig\\n  )\\n    internal\\n    view\\n    returns (uint256 minRatio, uint256 oracleValue)\\n  {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    minRatio = BASE_18;\\n    address[] memory collateralList = ts.collateralList;\\n    uint256 length = collateralList.length;\\n    for (uint256 i; i < length; ++i) {\\n      uint256 ratioObserved = BASE_18;\\n      if (collateralList[i] != collateral) {\\n        (, ratioObserved) = readBurn(ts.collaterals[collateralList[i]].oracleConfig);\\n      } else {\\n        (oracleValue, ratioObserved) = readBurn(oracleConfig);\\n      }\\n      if (ratioObserved < minRatio) minRatio = ratioObserved;\\n    }\\n  }\\n\\n  /// @notice Computes the `quoteAmount` (for Chainlink oracles) depending on a `quoteType` and a base value\\n  /// (e.g the target price of the asset)\\n  /// @dev For cases where the Chainlink feed directly looks into the value of the asset, `quoteAmount` is `BASE_18`.\\n  /// For others, like wstETH for which Chainlink only has an oracle for stETH, `quoteAmount` is the target price\\n  function quoteAmount(OracleQuoteType quoteType, uint256 baseValue) internal pure returns (uint256) {\\n    if (quoteType == OracleQuoteType.UNIT) return BASE_18;\\n    else return baseValue;\\n  }\\n\\n  function readSpotAndTarget(\\n    OracleReadType oracleType,\\n    OracleReadType targetType,\\n    bytes memory oracleData,\\n    bytes memory targetData,\\n    uint256 deviation\\n  )\\n    internal\\n    view\\n    returns (uint256 oracleValue, uint256 targetPrice)\\n  {\\n    targetPrice = read(targetType, BASE_18, targetData);\\n    oracleValue = read(oracleType, targetPrice, oracleData);\\n    // System may tolerate small deviations from target\\n    // If the oracle value reported is reasonably close to the target\\n    // --> disregard the oracle value and return the target price\\n    if (\\n      targetPrice * (BASE_18 - deviation) < oracleValue * BASE_18\\n        && oracleValue * BASE_18 < targetPrice * (BASE_18 + deviation)\\n    ) oracleValue = targetPrice;\\n  }\\n\\n  /// @notice Reads an oracle value (or a target oracle value) for an asset based on its data parsed `oracleConfig`\\n  function read(OracleReadType readType, uint256 baseValue, bytes memory data) internal view returns (uint256) {\\n    if (readType == OracleReadType.CHAINLINK_FEEDS) {\\n      (\\n        AggregatorV3Interface[] memory circuitChainlink,\\n        uint32[] memory stalePeriods,\\n        uint8[] memory circuitChainIsMultiplied,\\n        uint8[] memory chainlinkDecimals,\\n        OracleQuoteType quoteType\\n      ) = abi.decode(data, (AggregatorV3Interface[], uint32[], uint8[], uint8[], OracleQuoteType));\\n      uint256 quotePrice = quoteAmount(quoteType, baseValue);\\n      uint256 listLength = circuitChainlink.length;\\n      for (uint256 i; i < listLength; ++i) {\\n        quotePrice = readChainlinkFeed(\\n          quotePrice, circuitChainlink[i], circuitChainIsMultiplied[i], chainlinkDecimals[i], stalePeriods[i]\\n        );\\n      }\\n      return quotePrice;\\n    } else if (readType == OracleReadType.STABLE) {\\n      return BASE_18;\\n    } else if (readType == OracleReadType.NO_ORACLE) {\\n      return baseValue;\\n    } else if (readType == OracleReadType.WSTETH) {\\n      return STETH.getPooledEthByShares(1 ether);\\n    } else if (readType == OracleReadType.CBETH) {\\n      return CBETH.exchangeRate();\\n    } else if (readType == OracleReadType.RETH) {\\n      return RETH.getExchangeRate();\\n    } else if (readType == OracleReadType.SFRXETH) {\\n      return SFRXETH.pricePerShare();\\n    } else if (readType == OracleReadType.MAX) {\\n      uint256 maxValue = abi.decode(data, (uint256));\\n      return maxValue;\\n    } else if (readType == OracleReadType.MORPHO_ORACLE) {\\n      (address contractAddress, uint256 normalizationFactor) = abi.decode(data, (address, uint256));\\n      return IMorphoOracle(contractAddress).price() / normalizationFactor;\\n    }\\n    // If the `OracleReadType` is `EXTERNAL`, it means that this function is called to compute a\\n    // `targetPrice` in which case the `baseValue` is returned here\\n    else {\\n      return baseValue;\\n    }\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    SPECIFIC HELPERS                                                 \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Reads a Chainlink feed using a quote amount and converts the quote amount to the out-currency\\n  /// @param _quoteAmount The amount for which to compute the price expressed in `BASE_18`\\n  /// @param feed Chainlink feed to query\\n  /// @param multiplied Whether the ratio outputted by Chainlink should be multiplied or divided to the `quoteAmount`\\n  /// @param decimals Number of decimals of the corresponding Chainlink pair\\n  /// @return The `quoteAmount` converted in out-currency\\n  function readChainlinkFeed(\\n    uint256 _quoteAmount,\\n    AggregatorV3Interface feed,\\n    uint8 multiplied,\\n    uint256 decimals,\\n    uint32 stalePeriod\\n  )\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    (, int256 ratio,, uint256 updatedAt,) = feed.latestRoundData();\\n    if (ratio <= 0 || block.timestamp - updatedAt > stalePeriod) revert InvalidChainlinkRate();\\n    // Checking whether we should multiply or divide by the ratio computed\\n    if (multiplied == 1) return (_quoteAmount * uint256(ratio)) / (10 ** decimals);\\n    else return (_quoteAmount * (10 ** decimals)) / uint256(ratio);\\n  }\\n\\n  /// @notice Parses an `oracleConfig` into several sub fields\\n  function _parseOracleConfig(bytes memory oracleConfig)\\n    private\\n    pure\\n    returns (OracleReadType, OracleReadType, bytes memory, bytes memory, bytes memory)\\n  {\\n    return abi.decode(oracleConfig, (OracleReadType, OracleReadType, bytes, bytes, bytes));\\n  }\\n\\n  function updateOracle(address collateral) internal {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    if (ts.collaterals[collateral].decimals == 0) revert NotCollateral();\\n\\n    (\\n      OracleReadType oracleType,\\n      OracleReadType targetType,\\n      bytes memory oracleData,\\n      bytes memory targetData,\\n      bytes memory hyperparameters\\n    ) = _parseOracleConfig(ts.collaterals[collateral].oracleConfig);\\n\\n    if (targetType != OracleReadType.MAX) revert OracleUpdateFailed();\\n    uint256 oracleValue = read(oracleType, BASE_18, oracleData);\\n\\n    uint256 maxValue = abi.decode(targetData, (uint256));\\n    if (oracleValue > maxValue) {\\n      ts.collaterals[collateral].oracleConfig = abi.encode(\\n        oracleType,\\n        targetType,\\n        oracleData,\\n        // There are no checks whether the value increased or not\\n        abi.encode(oracleValue),\\n        hyperparameters\\n      );\\n    } else {\\n      revert OracleUpdateFailed();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1834c434aec56eb8d3c0d9467a28f9afde87216fe3b6662d220ef60fdbb419af\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/libraries/LibStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport \\\"../../utils/Constants.sol\\\";\\nimport { DiamondStorage, ImplementationStorage, MonetizerStorage } from \\\"../Storage.sol\\\";\\n\\n/// @title LibStorage\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This library is an authorized fork of Angle's `LibStorage` library\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/libraries/LibStorage.sol\\nlibrary LibStorage {\\n  /// @notice Returns the storage struct stored at the `DIAMOND_STORAGE_POSITION` slot\\n  /// @dev This struct handles the logic of the different facets used in the diamond proxy\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly (\\\"memory-safe\\\") {\\n      ds.slot := position\\n    }\\n  }\\n\\n  /// @notice Returns the storage struct stored at the `TRANSMUTER_STORAGE_POSITION` slot\\n  /// @dev This struct handles the particular logic of the Monetizer system\\n  function transmuterStorage() internal pure returns (MonetizerStorage storage ts) {\\n    bytes32 position = TRANSMUTER_STORAGE_POSITION;\\n    assembly (\\\"memory-safe\\\") {\\n      ts.slot := position\\n    }\\n  }\\n\\n  /// @notice Returns the storage struct stored at the `IMPLEMENTATION_STORAGE_POSITION` slot\\n  /// @dev This struct handles the logic for making the contract easily usable on Etherscan\\n  function implementationStorage() internal pure returns (ImplementationStorage storage ims) {\\n    bytes32 position = IMPLEMENTATION_STORAGE_POSITION;\\n    assembly (\\\"memory-safe\\\") {\\n      ims.slot := position\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xd990014177f2d92cb44d736faf7acff994e48b551910c7c7ba36c1faa2aa6169\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/libraries/LibWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { IKeyringGuard } from \\\"contracts/interfaces/external/keyring/IKeyringGuard.sol\\\";\\n\\nimport { LibStorage as s } from \\\"./LibStorage.sol\\\";\\n\\nimport \\\"../../utils/Errors.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\n/// @title LibWhitelist\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This library is an authorized fork of Angle's `LibWhitelist` library\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/libraries/LibWhitelist.sol\\nlibrary LibWhitelist {\\n  /// @notice Checks whether `sender` is whitelisted for a collateral with `whitelistData`\\n  function checkWhitelist(bytes memory whitelistData, address sender) internal returns (bool) {\\n    (WhitelistType whitelistType, bytes memory data) = abi.decode(whitelistData, (WhitelistType, bytes));\\n    if (s.transmuterStorage().isWhitelistedForType[whitelistType][sender] > 0) return true;\\n    if (data.length != 0) {\\n      if (whitelistType == WhitelistType.BACKED) {\\n        address keyringGuard = abi.decode(data, (address));\\n        if (keyringGuard != address(0)) return IKeyringGuard(keyringGuard).isAuthorized(address(this), sender);\\n      }\\n    }\\n    return false;\\n  }\\n}\\n\",\"keccak256\":\"0xf28239fb3e44223d0ca09d1d0603e3d5b42b4c031c207db6a84df85141cf8f80\",\"license\":\"BUSL-1.1\"},\"project/contracts/utils/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { ICbETH } from \\\"contracts/interfaces/external/coinbase/ICbETH.sol\\\";\\nimport { ISfrxETH } from \\\"contracts/interfaces/external/frax/ISfrxETH.sol\\\";\\nimport { IStETH } from \\\"contracts/interfaces/external/lido/IStETH.sol\\\";\\nimport { IRETH } from \\\"contracts/interfaces/external/rocketPool/IRETH.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                 STORAGE SLOTS                                                  \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev Storage position of `DiamondStorage` structure\\n/// @dev Equals `keccak256(\\\"diamond.standard.diamond.storage\\\") - 1`\\nbytes32 constant DIAMOND_STORAGE_POSITION = 0xc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131b;\\n\\n/// @dev Storage position of `MonetizerStorage` structure\\n/// @dev Equals `keccak256(\\\"diamond.standard.monetizer.storage\\\") - 1`\\nbytes32 constant TRANSMUTER_STORAGE_POSITION = 0x4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c75;\\n\\n/// @dev Storage position of `ImplementationStorage` structure\\n/// @dev Equals `keccak256(\\\"eip1967.proxy.implementation\\\") - 1`\\nbytes32 constant IMPLEMENTATION_STORAGE_POSITION = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                     MATHS                                                      \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\nuint256 constant BASE_6 = 1e6;\\nuint256 constant BASE_8 = 1e8;\\nuint256 constant BASE_9 = 1e9;\\nuint256 constant BASE_12 = 1e12;\\nuint256 constant BPS = 1e14;\\nuint256 constant BASE_18 = 1e18;\\nuint256 constant HALF_BASE_27 = 1e27 / 2;\\nuint256 constant BASE_27 = 1e27;\\nuint256 constant BASE_36 = 1e36;\\nuint256 constant MAX_BURN_FEE = 999_000_000;\\nuint256 constant MAX_MINT_FEE = BASE_12 - 1;\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                     REENTRANT                                                      \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n// The values being non-zero value makes deployment a bit more expensive,\\n// but in exchange the refund on every call to nonReentrant will be lower in\\n// amount. Since refunds are capped to a percentage of the total\\n// transaction's gas, it is best to keep them low in cases like this one, to\\n// increase the likelihood of the full refund coming into effect.\\nuint8 constant NOT_ENTERED = 1;\\nuint8 constant ENTERED = 2;\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                     REENTRANT                                                      \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n// Role IDs for the AccessManager\\nuint64 constant GOVERNOR_ROLE = 10;\\nuint64 constant GUARDIAN_ROLE = 20;\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                               COMMON ADDRESSES                                                 \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\naddress constant PERMIT_2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\\naddress constant ODOS_ROUTER = 0xCf5540fFFCdC3d510B18bFcA6d2b9987b0772559;\\nICbETH constant CBETH = ICbETH(0xBe9895146f7AF43049ca1c1AE358B0541Ea49704);\\nIRETH constant RETH = IRETH(0xae78736Cd615f374D3085123A210448E74Fc6393);\\nIStETH constant STETH = IStETH(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);\\nISfrxETH constant SFRXETH = ISfrxETH(0xac3E018457B222d93114458476f3E3416Abbe38F);\\naddress constant XEVT = 0x3Ee320c9F73a84D1717557af00695A34b26d1F1d;\\naddress constant USDM = 0x59D9356E565Ab3A36dD77763Fc0d87fEaf85508C;\\naddress constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\naddress constant EURC = 0x1aBaEA1f7C830bD89Acc67eC4af516284b1bC33c;\\n\",\"keccak256\":\"0x386d47583c6deb04a0a42883fa8fb12b7def1461b6d6232cf09cd5899db666fd\",\"license\":\"BUSL-1.1\"},\"project/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nerror AccessManagedUnauthorized(address caller);\\nerror AlreadyAdded();\\nerror CannotAddFunctionToDiamondThatAlreadyExists(bytes4 _selector);\\nerror CannotAddSelectorsToZeroAddress(bytes4[] _selectors);\\nerror CannotRemoveFunctionThatDoesNotExist(bytes4 _selector);\\nerror CannotRemoveImmutableFunction(bytes4 _selector);\\nerror CannotReplaceFunctionsFromFacetWithZeroAddress(bytes4[] _selectors);\\nerror CannotReplaceFunctionThatDoesNotExists(bytes4 _selector);\\nerror CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet(bytes4 _selector);\\nerror CannotReplaceImmutableFunction(bytes4 _selector);\\nerror ContractHasNoCode();\\nerror CollateralBacked();\\nerror FunctionNotFound(bytes4 _functionSelector);\\nerror IncorrectFacetCutAction(uint8 _action);\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\nerror InvalidChainlinkRate();\\nerror InvalidLengths();\\nerror InvalidNegativeFees();\\nerror InvalidOracleType();\\nerror InvalidParam();\\nerror InvalidParams();\\nerror InvalidRate();\\nerror InvalidSwap();\\nerror InvalidTokens();\\nerror InvalidAccessManager();\\nerror ManagerHasAssets();\\nerror NoSelectorsProvidedForFacetForCut(address _facetAddress);\\nerror NotAllowed();\\nerror NotCollateral();\\nerror NotGovernor();\\nerror NotGuardian();\\nerror NotTrusted();\\nerror NotTrustedOrGuardian();\\nerror NotWhitelisted();\\nerror OdosSwapFailed();\\nerror OracleUpdateFailed();\\nerror Paused();\\nerror ReentrantCall();\\nerror RemoveFacetAddressMustBeZeroAddress(address _facetAddress);\\nerror TooBigAmountIn();\\nerror TooLate();\\nerror TooSmallAmountOut();\\nerror ZeroAddress();\\nerror ZeroAmount();\\nerror SwapError();\\nerror SlippageTooHigh();\\nerror InsufficientFunds();\\n\",\"keccak256\":\"0x1e2f6812ef78e948e5155d32213b52afff8c0ba5463d18bee10694efbf886130\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "quoteRedemptionCurve(uint256)": {
        "notice": "Simulate the exact output that a redemption of `amount` of stablecoins would give at a given block"
      },
      "redeem(uint256,address,uint256,uint256[])": {
        "notice": "Redeems `amount` of stablecoins from the system"
      },
      "redeemWithForfeit(uint256,address,uint256,uint256[],address[])": {
        "notice": "Same as the redeem function above with the additional feature to specify a list of `forfeitTokens` for which the Monetizer system will not try to do a transfer to `receiver`."
      },
      "updateNormalizer(uint256,bool)": {
        "notice": "Updates the normalizer variable by `amount`"
      }
    },
    "version": 1
  },
  "argsData": "0x",
  "transaction": {
    "hash": "0x2b9c8ab711a12a78fe881751a025f2c2f2bd8e33f0a1b0afaa275a9953973515",
    "nonce": "0x38",
    "origin": "0x10a852971d242a04829b541c32f09ad9ec1b227d"
  },
  "receipt": {
    "blockHash": "0x53c54185591148da3b56da7c629cc3bc6fc93c2a190bf60611847e3c1416f030",
    "blockNumber": "0x1ad17e",
    "transactionIndex": "0x0"
  }
}