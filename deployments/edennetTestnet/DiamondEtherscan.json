{
  "address": "0xbb6f363ca327a7bb844c1b87e40bbcadb51cad06",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "AccessManagedUnauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_implementation",
          "type": "address"
        }
      ],
      "name": "setDummyImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "contractName": "DiamondEtherscan",
  "sourceName": "contracts/monetizer/facets/DiamondEtherscan.sol",
  "bytecode": "0x6080604052348015600e575f5ffd5b506105a08061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c80635c60da1b14610038578063c39aa07d14610069575b5f5ffd5b61004061007e565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61007c610077366004610441565b6100c2565b005b5f6100bd7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6100cd335f36610115565b610109576040517f068ca9d800000000000000000000000000000000000000000000000000000000815233600482015260240160405180910390fd5b610112816102b1565b50565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d545f9073ffffffffffffffffffffffffffffffffffffffff1681806101728388306101646004868b8d610474565b61016d9161049b565b61033e565b91509150816102a25763ffffffff811615610297577f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7580547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff167601000000000000000000000000000000000000000000001781556040517f94c7d7ee00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516906394c7d7ee9061023d908b908b908b90600401610501565b5f604051808303815f87803b158015610254575f5ffd5b505af1158015610266573d5f5f3e3d5ffd5b505082547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16909255506102a29050565b5f93505050506102aa565b600193505050505b9392505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a250565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201527fffffffff00000000000000000000000000000000000000000000000000000000821660648201525f9081908190608401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb7009613000000000000000000000000000000000000000000000000000000001781525f808052918290528351939450919290918a5afa15610437575f516020805191945081901c150291505b5094509492505050565b5f60208284031215610451575f5ffd5b813573ffffffffffffffffffffffffffffffffffffffff811681146102aa575f5ffd5b5f5f85851115610482575f5ffd5b8386111561048e575f5ffd5b5050820193919092039150565b80357fffffffff0000000000000000000000000000000000000000000000000000000081169060048410156104fa577fffffffff00000000000000000000000000000000000000000000000000000000808560040360031b1b82161691505b5092915050565b73ffffffffffffffffffffffffffffffffffffffff8416815260406020820152816040820152818360608301375f818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019291505056fea2646970667358221220d8679281989d5117d33a3a23ca1d2fcbc04c38109dd0d4c2d0b9ed732d77e79f64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561000f575f5ffd5b5060043610610034575f3560e01c80635c60da1b14610038578063c39aa07d14610069575b5f5ffd5b61004061007e565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61007c610077366004610441565b6100c2565b005b5f6100bd7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6100cd335f36610115565b610109576040517f068ca9d800000000000000000000000000000000000000000000000000000000815233600482015260240160405180910390fd5b610112816102b1565b50565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131d545f9073ffffffffffffffffffffffffffffffffffffffff1681806101728388306101646004868b8d610474565b61016d9161049b565b61033e565b91509150816102a25763ffffffff811615610297577f4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c7580547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff167601000000000000000000000000000000000000000000001781556040517f94c7d7ee00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516906394c7d7ee9061023d908b908b908b90600401610501565b5f604051808303815f87803b158015610254575f5ffd5b505af1158015610266573d5f5f3e3d5ffd5b505082547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16909255506102a29050565b5f93505050506102aa565b600193505050505b9392505050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a250565b60405173ffffffffffffffffffffffffffffffffffffffff8085166024830152831660448201527fffffffff00000000000000000000000000000000000000000000000000000000821660648201525f9081908190608401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb7009613000000000000000000000000000000000000000000000000000000001781525f808052918290528351939450919290918a5afa15610437575f516020805191945081901c150291505b5094509492505050565b5f60208284031215610451575f5ffd5b813573ffffffffffffffffffffffffffffffffffffffff811681146102aa575f5ffd5b5f5f85851115610482575f5ffd5b8386111561048e575f5ffd5b5050820193919092039150565b80357fffffffff0000000000000000000000000000000000000000000000000000000081169060048410156104fa577fffffffff00000000000000000000000000000000000000000000000000000000808560040360031b1b82161691505b5092915050565b73ffffffffffffffffffffffffffffffffffffffff8416815260406020820152816040820152818360608301375f818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019291505056fea2646970667358221220d8679281989d5117d33a3a23ca1d2fcbc04c38109dd0d4c2d0b9ed732d77e79f64736f6c634300081c0033",
  "linkReferences": {},
  "deployedLinkReferences": {},
  "immutableReferences": {},
  "inputSourceName": "project/contracts/monetizer/facets/DiamondEtherscan.sol",
  "devdoc": {
    "author": "Forked from: https://github.com/zdenham/diamond-etherscan/blob/main/contracts/libraries/LibDiamondEtherscan.sol",
    "kind": "dev",
    "methods": {},
    "title": "DiamondEtherscan",
    "version": 1
  },
  "evm": {
    "gasEstimates": {
      "creation": {
        "codeDepositCost": "288000",
        "executionCost": "322",
        "totalCost": "288322"
      },
      "external": {
        "implementation()": "2309",
        "setDummyImplementation(address)": "infinite"
      }
    }
  },
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AccessManagedUnauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_implementation\",\"type\":\"address\"}],\"name\":\"setDummyImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Forked from: https://github.com/zdenham/diamond-etherscan/blob/main/contracts/libraries/LibDiamondEtherscan.sol\",\"kind\":\"dev\",\"methods\":{},\"title\":\"DiamondEtherscan\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"implementation()\":{\"notice\":\"Address of the dummy implementation used to make the DiamondProxy contract interpretable by Etherscan\"},\"setDummyImplementation(address)\":{\"notice\":\"Sets a dummy implementation with the same layout at the diamond proxy contract with all its facets\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project/contracts/monetizer/facets/DiamondEtherscan.sol\":\"DiamondEtherscan\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\"npm/@openzeppelin/contracts-upgradeable@5.4.0/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/\",\"project/:@helpers/=project/libs/helpers/\",\"project/:@openzeppelin/contracts-upgradeable/=npm/@openzeppelin/contracts-upgradeable@5.4.0/\",\"project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/\",\"project/:contracts/=project/contracts/\"]},\"sources\":{\"npm/@openzeppelin/contracts@5.4.0/access/manager/AuthorityUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (access/manager/AuthorityUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\n\\nlibrary AuthorityUtils {\\n    /**\\n     * @dev Since `AccessManager` implements an extended IAuthority interface, invoking `canCall` with backwards compatibility\\n     * for the preexisting `IAuthority` interface requires special care to avoid reverting on insufficient return data.\\n     * This helper function takes care of invoking `canCall` in a backwards compatible way without reverting.\\n     */\\n    function canCallWithDelay(\\n        address authority,\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) internal view returns (bool immediate, uint32 delay) {\\n        bytes memory data = abi.encodeCall(IAuthority.canCall, (caller, target, selector));\\n\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x00)\\n            mstore(0x20, 0x00)\\n\\n            if staticcall(gas(), authority, add(data, 0x20), mload(data), 0x00, 0x40) {\\n                immediate := mload(0x00)\\n                delay := mload(0x20)\\n\\n                // If delay does not fit in a uint32, return 0 (no delay)\\n                // equivalent to: if gt(delay, 0xFFFFFFFF) { delay := 0 }\\n                delay := mul(delay, iszero(shr(32, delay)))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05fd06ae5bca9dc7470fb2dfae764315c81a84f591e86be6fec0c115474edc6c\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/access/manager/IAccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/manager/IAccessManager.sol)\\n\\npragma solidity >=0.8.4;\\n\\ninterface IAccessManager {\\n    /**\\n     * @dev A delayed operation was scheduled.\\n     */\\n    event OperationScheduled(\\n        bytes32 indexed operationId,\\n        uint32 indexed nonce,\\n        uint48 schedule,\\n        address caller,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev A scheduled operation was executed.\\n     */\\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev A scheduled operation was canceled.\\n     */\\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev Informational labelling for a roleId.\\n     */\\n    event RoleLabel(uint64 indexed roleId, string label);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `roleId`.\\n     *\\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\\n     * otherwise it indicates the execution delay for this account and roleId is updated.\\n     */\\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\\n\\n    /**\\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\\n     */\\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\\n\\n    /**\\n     * @dev Role acting as admin over a given `roleId` is updated.\\n     */\\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\\n\\n    /**\\n     * @dev Role acting as guardian over a given `roleId` is updated.\\n     */\\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\\n\\n    /**\\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\\n     */\\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\\n\\n    /**\\n     * @dev Target mode is updated (true = closed, false = open).\\n     */\\n    event TargetClosed(address indexed target, bool closed);\\n\\n    /**\\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\\n     */\\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\\n\\n    /**\\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\\n     */\\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\\n\\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\\n    error AccessManagerNotScheduled(bytes32 operationId);\\n    error AccessManagerNotReady(bytes32 operationId);\\n    error AccessManagerExpired(bytes32 operationId);\\n    error AccessManagerLockedRole(uint64 roleId);\\n    error AccessManagerBadConfirmation();\\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\\n    error AccessManagerUnauthorizedConsume(address target);\\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\\n\\n    /**\\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\\n     * & {execute} workflow.\\n     *\\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\\n     * for future execution.\\n     *\\n     * If `allowed` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\\n     * the operation can be executed if and only if delay is greater than 0.\\n     *\\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\\n     *\\n     * NOTE: This function does not report the permissions of the admin functions in the manager itself. These are defined by the\\n     * {AccessManager} documentation.\\n     */\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) external view returns (bool allowed, uint32 delay);\\n\\n    /**\\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\\n     *\\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\\n     * disabling any scheduling usage.\\n     */\\n    function expiration() external view returns (uint32);\\n\\n    /**\\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\\n     * accidental increase). Defaults to 5 days.\\n     */\\n    function minSetback() external view returns (uint32);\\n\\n    /**\\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\\n     *\\n     * NOTE: When the manager itself is closed, admin functions are still accessible to avoid locking the contract.\\n     */\\n    function isTargetClosed(address target) external view returns (bool);\\n\\n    /**\\n     * @dev Get the role required to call a function.\\n     */\\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\\n     */\\n    function getTargetAdminDelay(address target) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the id of the role that acts as an admin for the given role.\\n     *\\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\\n     * an operation that is restricted to this role.\\n     */\\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role that acts as a guardian for a given role.\\n     *\\n     * The guardian permission allows canceling operations that have been scheduled under the role.\\n     */\\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role current grant delay.\\n     *\\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\\n     */\\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\\n     * level.\\n     *\\n     * Returns:\\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\\n     * [1] Current execution delay for the account.\\n     * [2] Pending execution delay for the account.\\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\\n     */\\n    function getAccess(\\n        uint64 roleId,\\n        address account\\n    ) external view returns (uint48 since, uint32 currentDelay, uint32 pendingDelay, uint48 effect);\\n\\n    /**\\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\\n     */\\n    function hasRole(uint64 roleId, address account) external view returns (bool isMember, uint32 executionDelay);\\n\\n    /**\\n     * @dev Give a label to a role, for improved role discoverability by UIs.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleLabel} event.\\n     */\\n    function labelRole(uint64 roleId, string calldata label) external;\\n\\n    /**\\n     * @dev Add `account` to `roleId`, or change its execution delay.\\n     *\\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\\n     *\\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - granted role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\\n\\n    /**\\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\\n     * no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - revoked role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function revokeRole(uint64 roleId, address account) external;\\n\\n    /**\\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\\n     * the role this call has no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\\n\\n    /**\\n     * @dev Change admin role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleAdminChanged} event\\n     */\\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\\n\\n    /**\\n     * @dev Change guardian role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGuardianChanged} event\\n     */\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\\n\\n    /**\\n     * @dev Update the delay for granting a `roleId`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\\n     */\\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\\n\\n    /**\\n     * @dev Set the delay for changing the configuration of a given target contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the closed flag for a contract.\\n     *\\n     * Closing the manager itself won't disable access to admin methods to avoid locking the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function setTargetClosed(address target, bool closed) external;\\n\\n    /**\\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\\n     */\\n    function getSchedule(bytes32 id) external view returns (uint48);\\n\\n    /**\\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\\n     * been scheduled.\\n     */\\n    function getNonce(bytes32 id) external view returns (uint32);\\n\\n    /**\\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\\n     * required for the caller. The special value zero will automatically set the earliest possible time.\\n     *\\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\\n     *\\n     * Emits a {OperationScheduled} event.\\n     *\\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\\n     * contract if it is using standard Solidity ABI encoding.\\n     */\\n    function schedule(\\n        address target,\\n        bytes calldata data,\\n        uint48 when\\n    ) external returns (bytes32 operationId, uint32 nonce);\\n\\n    /**\\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\\n     * execution delay is 0.\\n     *\\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\\n     *\\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\\n     */\\n    function execute(address target, bytes calldata data) external payable returns (uint32);\\n\\n    /**\\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\\n     * operation that is cancelled.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\\n     *\\n     * Emits a {OperationCanceled} event.\\n     */\\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\\n\\n    /**\\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\\n     *\\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\\n     * with all the verifications that it implies.\\n     *\\n     * Emit a {OperationExecuted} event.\\n     */\\n    function consumeScheduledOp(address caller, bytes calldata data) external;\\n\\n    /**\\n     * @dev Hashing function for delayed operations.\\n     */\\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\\n\\n    /**\\n     * @dev Changes the authority of a target managed by this manager instance.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     */\\n    function updateAuthority(address target, address newAuthority) external;\\n}\\n\",\"keccak256\":\"0x640fe2b6e5201c47322d458f81078d6dcf23ccf9954f8995b1b7bfbec0eb1421\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/access/manager/IAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (access/manager/IAuthority.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Standard interface for permissioning originally defined in Dappsys.\\n */\\ninterface IAuthority {\\n    /**\\n     * @dev Returns true if the caller can invoke on a target the function identified by a function selector.\\n     */\\n    function canCall(address caller, address target, bytes4 selector) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x9c9a58dd831b9bb4a0ea47d96b53c13ab9a6e4270a518ea395b1424092fd74dc\",\"license\":\"MIT\"},\"npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity >=0.4.16;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2\",\"license\":\"MIT\"},\"project/contracts/interfaces/IDiamondEtherscan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\n/// @title IDiamondEtherscan\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\ninterface IDiamondEtherscan {\\n  /// @notice Sets a dummy implementation with the same layout at the diamond proxy contract with all its facets\\n  function setDummyImplementation(address _implementation) external;\\n\\n  /// @notice Address of the dummy implementation used to make the DiamondProxy contract interpretable by Etherscan\\n  function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc4cfc25ba77fd45469172a882923d31c04385adfc75f753a1e6afa0b73225a5e\",\"license\":\"MIT\"},\"project/contracts/interfaces/ITokenP.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.28;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title ITokenP\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @notice Interface for the stablecoins `tokenP` contracts\\n/// @dev This interface is an authorized fork of Angle's `IAgToken` interface\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/interfaces/IAgToken.sol\\ninterface ITokenP is IERC20 {\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    MINTER ROLE ONLY FUNCTIONS                                            \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Lets a whitelisted contract mint tokenPs\\n  /// @param account Address to mint to\\n  /// @param amount Amount to mint\\n  function mint(address account, uint256 amount) external;\\n\\n  /// @notice Burns `amount` tokens from a `burner` address after being asked to by `sender`\\n  /// @param amount Amount of tokens to burn\\n  /// @param burner Address to burn from\\n  /// @param sender Address which requested the burn from `burner`\\n  /// @dev This method is to be called by a contract with the minter right after being requested\\n  /// to do so by a `sender` address willing to burn tokens from another `burner` address\\n  /// @dev The method checks the allowance between the `sender` and the `burner`\\n  function burnFrom(uint256 amount, address burner, address sender) external;\\n\\n  /// @notice Burns `amount` tokens from a `burner` address\\n  /// @param amount Amount of tokens to burn\\n  /// @param burner Address to burn from\\n  /// @dev This method is to be called by a contract with a minter right on the tokenP after being\\n  /// requested to do so by an address willing to burn tokens from its address\\n  function burnSelf(uint256 amount, address burner) external;\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    EXTERNAL FUNCTIONS                                                \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Amount of decimals of the stablecoin\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x89d9b377afd760292bc2b92cfa9ab66d44018a4c143eff3ad91ab53091d4fa22\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/coinbase/ICbETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title ICbETH\\n/// @notice Interface for the `cbETH` contract\\ninterface ICbETH {\\n  function exchangeRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb159341cb0e25c478912b274cdda2d50fa84692aeac87b6823d281aaea2aed04\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/frax/ISfrxETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title ISfrxETH\\n/// @notice Interface for the `sfrxETH` contract\\ninterface ISfrxETH {\\n  function pricePerShare() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x914cbea276f817c7db62bfca21e15bd8f7892faa9f39d86baaef574cf12b859f\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/lido/IStETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title IStETH\\n/// @notice Interface for the `StETH` contract\\ninterface IStETH {\\n  function getPooledEthByShares(uint256 _sharesAmount) external view returns (uint256);\\n\\n  function submit(address) external payable returns (uint256);\\n\\n  function getSharesByPooledEth(uint256 _ethAmount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf21e3d8bdadc236b34bf2122b0e0b939d2d6bb6e2889b508636cbb7b84f59680\",\"license\":\"GPL-3.0\"},\"project/contracts/interfaces/external/rocketPool/IRETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\n/// @title IRETH\\n/// @notice Interface for the `rETH` contract\\ninterface IRETH {\\n  function getExchangeRate() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x567a378e95d40160e297c1adb617ccaa69c03e49c4ad72a6ce651dd43cdbd5cd\",\"license\":\"GPL-3.0\"},\"project/contracts/monetizer/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IAccessManager } from \\\"@openzeppelin/contracts/access/manager/IAccessManager.sol\\\";\\nimport { ITokenP } from \\\"contracts/interfaces/ITokenP.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                        ENUMS                                                      \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\nenum FacetCutAction {\\n  Add,\\n  Replace,\\n  Remove\\n}\\n\\nenum ManagerType {\\n  EXTERNAL\\n}\\n\\nenum ActionType {\\n  Mint,\\n  Burn,\\n  Redeem\\n}\\n\\nenum TrustedType {\\n  Updater,\\n  Seller\\n}\\n\\nenum QuoteType {\\n  MintExactInput,\\n  MintExactOutput,\\n  BurnExactInput,\\n  BurnExactOutput\\n}\\n\\nenum OracleReadType {\\n  CHAINLINK_FEEDS,\\n  EXTERNAL,\\n  NO_ORACLE,\\n  STABLE,\\n  WSTETH,\\n  CBETH,\\n  RETH,\\n  SFRXETH,\\n  MAX,\\n  MORPHO_ORACLE\\n}\\n\\nenum OracleQuoteType {\\n  UNIT,\\n  TARGET\\n}\\n\\nenum WhitelistType {\\n  BACKED\\n}\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                    STRUCTS                                                     \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\nstruct Permit2Details {\\n  address to; // Address that will receive the funds\\n  uint256 nonce; // Nonce of the transaction\\n  bytes signature; // Permit signature of the user\\n}\\n\\nstruct FacetCut {\\n  address facetAddress; // Facet contract address\\n  FacetCutAction action; // Can be add, remove or replace\\n  bytes4[] functionSelectors; // Ex. bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n}\\n\\nstruct Facet {\\n  address facetAddress; // Facet contract address\\n  bytes4[] functionSelectors; // Ex. bytes4(keccak256(\\\"transfer(address,uint256)\\\"))\\n}\\n\\nstruct FacetInfo {\\n  address facetAddress; // Facet contract address\\n  uint16 selectorPosition; // Position in the list of all selectors\\n}\\n\\nstruct DiamondStorage {\\n  bytes4[] selectors; // List of all available selectors\\n  mapping(bytes4 => FacetInfo) selectorInfo; // Selector to (address, position in list)\\n  IAccessManager accessManager; // Contract handling access management\\n}\\n\\nstruct ImplementationStorage {\\n  address implementation; // Dummy implementation address for Etherscan usability\\n}\\n\\nstruct ManagerStorage {\\n  IERC20[] subCollaterals; // Subtokens handled by the manager or strategies\\n  bytes config; // Additional configuration data\\n}\\n\\nstruct Collateral {\\n  uint8 isManaged; // If the collateral is managed through external strategies\\n  uint8 isMintLive; // If minting from this asset is unpaused\\n  uint8 isBurnLive; // If burning to this asset is unpaused\\n  uint8 decimals; // IERC20Metadata(collateral).decimals()\\n  uint8 onlyWhitelisted; // If only whitelisted addresses can burn or redeem for this token\\n  uint216 normalizedStables; // Normalized amount of stablecoins issued from this collateral\\n  uint64[] xFeeMint; // Increasing exposures in [0,BASE_9[\\n  int64[] yFeeMint; // Mint fees at the exposures specified in `xFeeMint`\\n  uint64[] xFeeBurn; // Decreasing exposures in ]0,BASE_9]\\n  int64[] yFeeBurn; // Burn fees at the exposures specified in `xFeeBurn`\\n  bytes oracleConfig; // Data about the oracle used for the collateral\\n  bytes whitelistData; // For whitelisted collateral, data used to verify whitelists\\n  ManagerStorage managerData; // For managed collateral, data used to handle the strategies\\n  uint256 stablecoinCap; // Cap on the amount of stablecoins that can be issued from this collateral\\n}\\n\\nstruct MonetizerStorage {\\n  ITokenP tokenP; // tokenP handled by the system\\n  uint8 isRedemptionLive; // If redemption is unpaused\\n  uint8 statusReentrant; // If call is reentrant or not\\n  bool consumingSchedule; // If the contract is consuming a scheduled operation\\n  uint128 normalizedStables; // Normalized amount of stablecoins issued by the system\\n  uint128 normalizer; // To reconcile `normalizedStables` values with the actual amount\\n  address[] collateralList; // List of collateral assets supported by the system\\n  uint64[] xRedemptionCurve; // Increasing collateral ratios > 0\\n  int64[] yRedemptionCurve; // Value of the redemption fees at `xRedemptionCurve`\\n  mapping(address => Collateral) collaterals; // Maps a collateral asset to its parameters\\n  mapping(address => uint256) isTrusted; // If an address is trusted to update the normalizer value\\n  mapping(address => uint256) isSellerTrusted; // If an address is trusted to sell accruing reward tokens or to run\\n    // keeper jobs on oracles\\n  mapping(WhitelistType => mapping(address => uint256)) isWhitelistedForType;\\n}\\n// Whether an address is whitelisted for a specific whitelist type\\n\",\"keccak256\":\"0xd9e3a4c1cff68115a684d79357d068f8a52b6d6416ae3ecc76795545fff22ea7\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/facets/AccessManagedModifiers.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { LibDiamond } from \\\"../libraries/LibDiamond.sol\\\";\\nimport { LibStorage as s, MonetizerStorage } from \\\"../libraries/LibStorage.sol\\\";\\nimport \\\"../../utils/Errors.sol\\\";\\nimport \\\"../../utils/Constants.sol\\\";\\n\\n/// @title AccessManagedModifiers\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This contract is an authorized fork of Angle's `AccessControlModifiers` contract\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/facets/AccessControlModifiers.sol\\n/// update access logic to use OpenZeppelin's `AccessManaged` logic\\ncontract AccessManagedModifiers {\\n  /// @notice Checks whether the `msg.sender` can call a function with a given selector\\n  modifier restricted() {\\n    if (!LibDiamond.checkCanCall(msg.sender, msg.data)) revert AccessManagedUnauthorized(msg.sender);\\n    _;\\n  }\\n\\n  /// @notice Prevents a contract from calling itself, directly or indirectly\\n  /// @dev This implementation is an adaptation of the OpenZepellin `ReentrancyGuard` for the purpose of this\\n  /// Diamond Proxy system. The base implementation can be found here\\n  /// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol\\n  modifier nonReentrant() {\\n    MonetizerStorage storage ts = s.transmuterStorage();\\n    // Reentrant protection\\n    // On the first call, `ts.statusReentrant` will be `NOT_ENTERED`\\n    if (ts.statusReentrant == ENTERED) revert ReentrantCall();\\n    // Any calls to the `nonReentrant` modifier after this point will fail\\n    ts.statusReentrant = ENTERED;\\n\\n    _;\\n\\n    // By storing the original value once again, a refund is triggered (see\\n    // https://eips.ethereum.org/EIPS/eip-2200)\\n    ts.statusReentrant = NOT_ENTERED;\\n  }\\n}\\n\",\"keccak256\":\"0x14995f4b638c37aa8e93cf2fc64227b2bfa37276d49e66ffe6e64f35a0a8d93b\",\"license\":\"BUSL-1.1\"},\"project/contracts/monetizer/facets/DiamondEtherscan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport { IDiamondEtherscan } from \\\"contracts/interfaces/IDiamondEtherscan.sol\\\";\\n\\nimport { LibDiamondEtherscan } from \\\"../libraries/LibDiamondEtherscan.sol\\\";\\nimport { AccessManagedModifiers } from \\\"./AccessManagedModifiers.sol\\\";\\n\\n/// @title DiamondEtherscan\\n/// @author Forked from:\\n/// https://github.com/zdenham/diamond-etherscan/blob/main/contracts/libraries/LibDiamondEtherscan.sol\\ncontract DiamondEtherscan is IDiamondEtherscan, AccessManagedModifiers {\\n  /// @inheritdoc IDiamondEtherscan\\n  function setDummyImplementation(address _implementation) external restricted {\\n    LibDiamondEtherscan.setDummyImplementation(_implementation);\\n  }\\n\\n  /// @inheritdoc IDiamondEtherscan\\n  function implementation() external view returns (address) {\\n    return LibDiamondEtherscan.dummyImplementation();\\n  }\\n}\\n\",\"keccak256\":\"0x9d607e8e20eb5efdd9d2ec3390969b327cc661b8eab563061f7e1e65cd4ef2e8\",\"license\":\"MIT\"},\"project/contracts/monetizer/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport { LibStorage as s } from \\\"./LibStorage.sol\\\";\\nimport { IAccessManager } from \\\"@openzeppelin/contracts/access/manager/IAccessManager.sol\\\";\\nimport { AuthorityUtils } from \\\"@openzeppelin/contracts/access/manager/AuthorityUtils.sol\\\";\\n\\nimport \\\"../../utils/Errors.sol\\\";\\nimport \\\"../../utils/Constants.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\n/// @title LibDiamond\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @notice Helper library to deal with diamond proxies.\\n/// @dev Reference: EIP-2535 Diamonds\\n/// @dev Forked from https://github.com/mudgen/diamond-3/blob/master/contracts/libraries/LibDiamond.sol by mudgen\\nlibrary LibDiamond {\\n  event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    INTERNAL FUNCTIONS                                                \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  function isGovernor(address caller) internal view returns (bool) {\\n    (bool isMember,) = s.diamondStorage().accessManager.hasRole(GOVERNOR_ROLE, caller);\\n    return isMember;\\n  }\\n\\n  /// @notice Checks whether `caller` can call `data` on `this`\\n  function checkCanCall(address caller, bytes calldata data) internal returns (bool) {\\n    IAccessManager accessManager = s.diamondStorage().accessManager;\\n    (bool immediate, uint32 delay) =\\n      AuthorityUtils.canCallWithDelay(address(accessManager), caller, address(this), bytes4(data[0:4]));\\n    if (!immediate) {\\n      if (delay > 0) {\\n        MonetizerStorage storage ts = s.transmuterStorage();\\n        ts.consumingSchedule = true;\\n        accessManager.consumeScheduledOp(caller, data);\\n        ts.consumingSchedule = false;\\n      } else {\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  /// @notice Internal function version of `diamondCut`\\n  function diamondCut(FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n    uint256 diamondCutLength = _diamondCut.length;\\n    for (uint256 facetIndex; facetIndex < diamondCutLength; facetIndex++) {\\n      bytes4[] memory functionSelectors = _diamondCut[facetIndex].functionSelectors;\\n      address facetAddress = _diamondCut[facetIndex].facetAddress;\\n\\n      if (functionSelectors.length == 0) {\\n        revert NoSelectorsProvidedForFacetForCut(facetAddress);\\n      }\\n\\n      FacetCutAction action = _diamondCut[facetIndex].action;\\n      if (action == FacetCutAction.Add) {\\n        _addFunctions(facetAddress, functionSelectors);\\n      } else if (action == FacetCutAction.Replace) {\\n        _replaceFunctions(facetAddress, functionSelectors);\\n      } else if (action == FacetCutAction.Remove) {\\n        _removeFunctions(facetAddress, functionSelectors);\\n      }\\n    }\\n\\n    emit DiamondCut(_diamondCut, _init, _calldata);\\n    _initializeDiamondCut(_init, _calldata);\\n  }\\n\\n  /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n    PRIVATE FUNCTIONS                                                \\n  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n  /// @notice Does a delegate call on `_init` with `_calldata`\\n  function _initializeDiamondCut(address _init, bytes memory _calldata) private {\\n    if (_init == address(0)) {\\n      return;\\n    }\\n    _enforceHasContractCode(_init);\\n    (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n    if (!success) {\\n      if (error.length > 0) {\\n        assembly (\\\"memory-safe\\\") {\\n          let returndata_size := mload(error)\\n          revert(add(32, error), returndata_size)\\n        }\\n      } else {\\n        revert InitializationFunctionReverted(_init, _calldata);\\n      }\\n    }\\n  }\\n\\n  /// @notice Adds a new function to the diamond proxy\\n  /// @dev Reverts if selectors are already existing\\n  function _addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) private {\\n    if (_facetAddress == address(0)) {\\n      revert CannotAddSelectorsToZeroAddress(_functionSelectors);\\n    }\\n    DiamondStorage storage ds = s.diamondStorage();\\n    uint16 selectorCount = uint16(ds.selectors.length);\\n    _enforceHasContractCode(_facetAddress);\\n    uint256 functionSelectorsLength = _functionSelectors.length;\\n    for (uint256 selectorIndex; selectorIndex < functionSelectorsLength; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorInfo[selector].facetAddress;\\n      if (oldFacetAddress != address(0)) {\\n        revert CannotAddFunctionToDiamondThatAlreadyExists(selector);\\n      }\\n      ds.selectorInfo[selector] = FacetInfo(_facetAddress, selectorCount);\\n      ds.selectors.push(selector);\\n      selectorCount++;\\n    }\\n  }\\n\\n  /// @notice Upgrades a function in the diamond proxy\\n  /// @dev Reverts if selectors do not already exist\\n  function _replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) private {\\n    DiamondStorage storage ds = s.diamondStorage();\\n    if (_facetAddress == address(0)) {\\n      revert CannotReplaceFunctionsFromFacetWithZeroAddress(_functionSelectors);\\n    }\\n    _enforceHasContractCode(_facetAddress);\\n    uint256 functionSelectorsLength = _functionSelectors.length;\\n    for (uint256 selectorIndex; selectorIndex < functionSelectorsLength; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      address oldFacetAddress = ds.selectorInfo[selector].facetAddress;\\n      // Can't replace immutable functions -- functions defined directly in the diamond in this case\\n      if (oldFacetAddress == address(this)) {\\n        revert CannotReplaceImmutableFunction(selector);\\n      }\\n      if (oldFacetAddress == _facetAddress) {\\n        revert CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet(selector);\\n      }\\n      if (oldFacetAddress == address(0)) {\\n        revert CannotReplaceFunctionThatDoesNotExists(selector);\\n      }\\n      // Replace old facet address\\n      ds.selectorInfo[selector].facetAddress = _facetAddress;\\n    }\\n  }\\n\\n  /// @notice Removes a function in the diamond proxy\\n  /// @dev Reverts if selectors do not already exist\\n  function _removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) private {\\n    DiamondStorage storage ds = s.diamondStorage();\\n    uint256 selectorCount = ds.selectors.length;\\n    if (_facetAddress != address(0)) {\\n      revert RemoveFacetAddressMustBeZeroAddress(_facetAddress);\\n    }\\n    uint256 functionSelectorsLength = _functionSelectors.length;\\n    for (uint256 selectorIndex; selectorIndex < functionSelectorsLength; selectorIndex++) {\\n      bytes4 selector = _functionSelectors[selectorIndex];\\n      FacetInfo memory oldFacetAddressAndSelectorPosition = ds.selectorInfo[selector];\\n      if (oldFacetAddressAndSelectorPosition.facetAddress == address(0)) {\\n        revert CannotRemoveFunctionThatDoesNotExist(selector);\\n      }\\n\\n      // Can't remove immutable functions -- functions defined directly in the diamond\\n      if (oldFacetAddressAndSelectorPosition.facetAddress == address(this)) {\\n        revert CannotRemoveImmutableFunction(selector);\\n      }\\n      // Replace selector with last selector\\n      selectorCount--;\\n      if (oldFacetAddressAndSelectorPosition.selectorPosition != selectorCount) {\\n        bytes4 lastSelector = ds.selectors[selectorCount];\\n        ds.selectors[oldFacetAddressAndSelectorPosition.selectorPosition] = lastSelector;\\n        ds.selectorInfo[lastSelector].selectorPosition = oldFacetAddressAndSelectorPosition.selectorPosition;\\n      }\\n      // Delete last selector\\n      ds.selectors.pop();\\n      delete ds.selectorInfo[selector];\\n    }\\n  }\\n\\n  /// @notice Checks that an address has a non void bytecode\\n  function _enforceHasContractCode(address _contract) private view {\\n    uint256 contractSize;\\n    assembly (\\\"memory-safe\\\") {\\n      contractSize := extcodesize(_contract)\\n    }\\n    if (contractSize == 0) {\\n      revert ContractHasNoCode();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7cac6c4cee194f464b080e04b8c323197419970d76576ae8e7b8d1b11ca33242\",\"license\":\"MIT\"},\"project/contracts/monetizer/libraries/LibDiamondEtherscan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport { LibStorage as s } from \\\"./LibStorage.sol\\\";\\n\\n/// @title LibDiamondEtherscan\\n/// @notice Allow to verify a diamond proxy on Etherscan\\n/// @dev Forked from https://github.com/zdenham/diamond-etherscan/blob/main/contracts/libraries/LibDiamondEtherscan.sol\\nlibrary LibDiamondEtherscan {\\n  event Upgraded(address indexed implementation);\\n\\n  /// @notice Internal version of `setDummyImplementation`\\n  function setDummyImplementation(address implementationAddress) internal {\\n    s.implementationStorage().implementation = implementationAddress;\\n    emit Upgraded(implementationAddress);\\n  }\\n\\n  /// @notice Internal version of `implementation`\\n  function dummyImplementation() internal view returns (address) {\\n    return s.implementationStorage().implementation;\\n  }\\n}\\n\",\"keccak256\":\"0x016498883b4a43b5ad6778ac5e77d86e9849174e266e783a40b6f275c3260480\",\"license\":\"MIT\"},\"project/contracts/monetizer/libraries/LibStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport \\\"../../utils/Constants.sol\\\";\\nimport { DiamondStorage, ImplementationStorage, MonetizerStorage } from \\\"../Storage.sol\\\";\\n\\n/// @title LibStorage\\n/// @author Cooper Labs\\n/// @custom:contact security@monet.cash\\n/// @dev This library is an authorized fork of Angle's `LibStorage` library\\n/// https://github.com/AngleProtocol/angle-transmuter/blob/main/contracts/monetizer/libraries/LibStorage.sol\\nlibrary LibStorage {\\n  /// @notice Returns the storage struct stored at the `DIAMOND_STORAGE_POSITION` slot\\n  /// @dev This struct handles the logic of the different facets used in the diamond proxy\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly (\\\"memory-safe\\\") {\\n      ds.slot := position\\n    }\\n  }\\n\\n  /// @notice Returns the storage struct stored at the `TRANSMUTER_STORAGE_POSITION` slot\\n  /// @dev This struct handles the particular logic of the Monetizer system\\n  function transmuterStorage() internal pure returns (MonetizerStorage storage ts) {\\n    bytes32 position = TRANSMUTER_STORAGE_POSITION;\\n    assembly (\\\"memory-safe\\\") {\\n      ts.slot := position\\n    }\\n  }\\n\\n  /// @notice Returns the storage struct stored at the `IMPLEMENTATION_STORAGE_POSITION` slot\\n  /// @dev This struct handles the logic for making the contract easily usable on Etherscan\\n  function implementationStorage() internal pure returns (ImplementationStorage storage ims) {\\n    bytes32 position = IMPLEMENTATION_STORAGE_POSITION;\\n    assembly (\\\"memory-safe\\\") {\\n      ims.slot := position\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xd990014177f2d92cb44d736faf7acff994e48b551910c7c7ba36c1faa2aa6169\",\"license\":\"BUSL-1.1\"},\"project/contracts/utils/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nimport { ICbETH } from \\\"contracts/interfaces/external/coinbase/ICbETH.sol\\\";\\nimport { ISfrxETH } from \\\"contracts/interfaces/external/frax/ISfrxETH.sol\\\";\\nimport { IStETH } from \\\"contracts/interfaces/external/lido/IStETH.sol\\\";\\nimport { IRETH } from \\\"contracts/interfaces/external/rocketPool/IRETH.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                 STORAGE SLOTS                                                  \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n/// @dev Storage position of `DiamondStorage` structure\\n/// @dev Equals `keccak256(\\\"diamond.standard.diamond.storage\\\") - 1`\\nbytes32 constant DIAMOND_STORAGE_POSITION = 0xc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131b;\\n\\n/// @dev Storage position of `MonetizerStorage` structure\\n/// @dev Equals `keccak256(\\\"diamond.standard.monetizer.storage\\\") - 1`\\nbytes32 constant TRANSMUTER_STORAGE_POSITION = 0x4b2dd303f68b99d244b702089c802b6e9ea1b5d4ef61fd436d6c41abb1178c75;\\n\\n/// @dev Storage position of `ImplementationStorage` structure\\n/// @dev Equals `keccak256(\\\"eip1967.proxy.implementation\\\") - 1`\\nbytes32 constant IMPLEMENTATION_STORAGE_POSITION = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                     MATHS                                                      \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\nuint256 constant BASE_6 = 1e6;\\nuint256 constant BASE_8 = 1e8;\\nuint256 constant BASE_9 = 1e9;\\nuint256 constant BASE_12 = 1e12;\\nuint256 constant BPS = 1e14;\\nuint256 constant BASE_18 = 1e18;\\nuint256 constant HALF_BASE_27 = 1e27 / 2;\\nuint256 constant BASE_27 = 1e27;\\nuint256 constant BASE_36 = 1e36;\\nuint256 constant MAX_BURN_FEE = 999_000_000;\\nuint256 constant MAX_MINT_FEE = BASE_12 - 1;\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                     REENTRANT                                                      \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n// The values being non-zero value makes deployment a bit more expensive,\\n// but in exchange the refund on every call to nonReentrant will be lower in\\n// amount. Since refunds are capped to a percentage of the total\\n// transaction's gas, it is best to keep them low in cases like this one, to\\n// increase the likelihood of the full refund coming into effect.\\nuint8 constant NOT_ENTERED = 1;\\nuint8 constant ENTERED = 2;\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                                     REENTRANT                                                      \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\n// Role IDs for the AccessManager\\nuint64 constant GOVERNOR_ROLE = 10;\\nuint64 constant GUARDIAN_ROLE = 20;\\n\\n/*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\\n                                               COMMON ADDRESSES                                                 \\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////*/\\n\\naddress constant PERMIT_2 = 0x000000000022D473030F116dDEE9F6B43aC78BA3;\\naddress constant ODOS_ROUTER = 0xCf5540fFFCdC3d510B18bFcA6d2b9987b0772559;\\nICbETH constant CBETH = ICbETH(0xBe9895146f7AF43049ca1c1AE358B0541Ea49704);\\nIRETH constant RETH = IRETH(0xae78736Cd615f374D3085123A210448E74Fc6393);\\nIStETH constant STETH = IStETH(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);\\nISfrxETH constant SFRXETH = ISfrxETH(0xac3E018457B222d93114458476f3E3416Abbe38F);\\naddress constant XEVT = 0x3Ee320c9F73a84D1717557af00695A34b26d1F1d;\\naddress constant USDM = 0x59D9356E565Ab3A36dD77763Fc0d87fEaf85508C;\\naddress constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\naddress constant EURC = 0x1aBaEA1f7C830bD89Acc67eC4af516284b1bC33c;\\n\",\"keccak256\":\"0x386d47583c6deb04a0a42883fa8fb12b7def1461b6d6232cf09cd5899db666fd\",\"license\":\"BUSL-1.1\"},\"project/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.28;\\n\\nerror AccessManagedUnauthorized(address caller);\\nerror AlreadyAdded();\\nerror CannotAddFunctionToDiamondThatAlreadyExists(bytes4 _selector);\\nerror CannotAddSelectorsToZeroAddress(bytes4[] _selectors);\\nerror CannotRemoveFunctionThatDoesNotExist(bytes4 _selector);\\nerror CannotRemoveImmutableFunction(bytes4 _selector);\\nerror CannotReplaceFunctionsFromFacetWithZeroAddress(bytes4[] _selectors);\\nerror CannotReplaceFunctionThatDoesNotExists(bytes4 _selector);\\nerror CannotReplaceFunctionWithTheSameFunctionFromTheSameFacet(bytes4 _selector);\\nerror CannotReplaceImmutableFunction(bytes4 _selector);\\nerror ContractHasNoCode();\\nerror CollateralBacked();\\nerror FunctionNotFound(bytes4 _functionSelector);\\nerror IncorrectFacetCutAction(uint8 _action);\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\nerror InvalidChainlinkRate();\\nerror InvalidLengths();\\nerror InvalidNegativeFees();\\nerror InvalidOracleType();\\nerror InvalidParam();\\nerror InvalidParams();\\nerror InvalidRate();\\nerror InvalidSwap();\\nerror InvalidTokens();\\nerror InvalidAccessManager();\\nerror ManagerHasAssets();\\nerror NoSelectorsProvidedForFacetForCut(address _facetAddress);\\nerror NotAllowed();\\nerror NotCollateral();\\nerror NotGovernor();\\nerror NotGuardian();\\nerror NotTrusted();\\nerror NotTrustedOrGuardian();\\nerror NotWhitelisted();\\nerror OdosSwapFailed();\\nerror OracleUpdateFailed();\\nerror Paused();\\nerror ReentrantCall();\\nerror RemoveFacetAddressMustBeZeroAddress(address _facetAddress);\\nerror TooBigAmountIn();\\nerror TooLate();\\nerror TooSmallAmountOut();\\nerror ZeroAddress();\\nerror ZeroAmount();\\nerror SwapError();\\nerror SlippageTooHigh();\\nerror InsufficientFunds();\\n\",\"keccak256\":\"0x1e2f6812ef78e948e5155d32213b52afff8c0ba5463d18bee10694efbf886130\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "storageLayout": {
    "storage": [],
    "types": null
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "implementation()": {
        "notice": "Address of the dummy implementation used to make the DiamondProxy contract interpretable by Etherscan"
      },
      "setDummyImplementation(address)": {
        "notice": "Sets a dummy implementation with the same layout at the diamond proxy contract with all its facets"
      }
    },
    "version": 1
  },
  "argsData": "0x",
  "transaction": {
    "hash": "0x87ac1e6457952a0964fbef9f4c9ed3b21cdf58b112569f16e2d88282329b82d1",
    "nonce": "0x35",
    "origin": "0x10a852971d242a04829b541c32f09ad9ec1b227d"
  },
  "receipt": {
    "blockHash": "0x4d8fcc86ad1ea5b2f57e47cabb7a00e3f3a9477612411209884a99e7d209372c",
    "blockNumber": "0x1ad176",
    "transactionIndex": "0x0"
  }
}